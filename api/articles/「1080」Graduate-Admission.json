{"title":"「1080」Graduate Admission","uid":"d79e1a49ba7f6556c0817ac0afa7d9ae","slug":"「1080」Graduate-Admission","date":"2022-10-11T12:44:56.000Z","updated":"2022-10-11T13:07:57.373Z","comments":true,"path":"api/articles/「1080」Graduate-Admission.json","keywords":null,"cover":null,"content":"<p>It is said that in 2011, there are about 100 graduate schools ready to proceed over 40,000 applications in Zhejiang Province. It would help a lot if you could write a program to automate the admission procedure.</p>\n<p>Each applicant will have to provide two grades: the national entrance exam grade GE​, and the interview grade GI​. The final grade of an applicant is (GE​+GI​)&#x2F;2. The admission rules are:</p>\n<ul>\n<li><p>The applicants are ranked according to their final grades, and will be admitted one by one from the top of the rank list.</p>\n</li>\n<li><p>If there is a tied final grade, the applicants will be ranked according to their national entrance exam grade GE​. If still tied, their ranks must be the same.</p>\n</li>\n<li><p>Each applicant may have K choices and the admission will be done according to his&#x2F;her choices: if according to the rank list, it is one’s turn to be admitted; and if the quota of one’s most preferred shcool is not exceeded, then one will be admitted to this school, or one’s other choices will be considered one by one in order. If one gets rejected by all of preferred schools, then this unfortunate applicant will be rejected.</p>\n</li>\n<li><p>If there is a tied rank, and if the corresponding applicants are applying to the same school, then that school must admit all the applicants with the same rank, <strong>even if its quota will be exceeded</strong>.</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case.</p>\n<p>Each case starts with a line containing three positive integers: N (≤40,000), the total number of applicants; M (≤100), the total number of graduate schools; and K (≤5), the number of choices an applicant may have.</p>\n<p>In the next line, separated by a space, there are M positive integers. The i-th integer is the quota of the i-th graduate school respectively.</p>\n<p>Then N lines follow, each contains 2+K integers separated by a space. The first 2 integers are the applicant’s GE​ and GI​, respectively. The next K integers represent the preferred schools. For the sake of simplicity, we assume that the schools are numbered from 0 to M−1, and the applicants are numbered from 0 to N−1.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case you should output the admission results for all the graduate schools. The results of each school must occupy a line, which contains the applicants’ numbers that school admits. The numbers must be in increasing order and be separated by a space. There must be no extra space at the end of each line. If no applicant is admitted by a school, you must output an empty line correspondingly.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11 6 3</span><br><span class=\"line\">2 1 2 2 2 3</span><br><span class=\"line\">100 100 0 1 2</span><br><span class=\"line\">60 60 2 3 5</span><br><span class=\"line\">100 90 0 3 4</span><br><span class=\"line\">90 100 1 2 0</span><br><span class=\"line\">90 90 5 1 3</span><br><span class=\"line\">80 90 1 0 2</span><br><span class=\"line\">80 80 0 1 2</span><br><span class=\"line\">80 80 0 1 2</span><br><span class=\"line\">80 70 1 3 2</span><br><span class=\"line\">70 80 1 2 3</span><br><span class=\"line\">100 100 0 2 4</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 10</span><br><span class=\"line\">3</span><br><span class=\"line\">5 6 7</span><br><span class=\"line\">2 8</span><br><span class=\"line\"></span><br><span class=\"line\">1 4</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$读题读的呕心沥血，但不难理解题意，写一个考试录取系统，类似高考中的平行志愿，每个人有三个志愿，分数高的人优先择校，按照志愿顺序依次投递，如果该校还有名额剩余则成功录取。另外，如果某校录取了名次R的同学，那么在面对其余名次也为R的同学时可以忽略人数限制录取，即只要有1个名额剩余名次相同的可以一起录。</p>\n<p>$\\qquad$由于有两个分数，我们可以用一个tuple依次存取【总分，$G_E$，ID】然后直接sort（💡<strong>tuple和pair均已重载过比较运算符，按照顺序依次比较</strong>）。然后根据排序次序依次择校，根据其志愿依次遍历学校剩余人数，如果有剩余名额则录取并break。对于相同名次可以一起录取的特殊情况，用vector给每个学校一个bool值，每当一位同学录取后就将录取学校赋值为true，表示同名次可以一并录取。到下一个同学时先比较分数确定是否与上一位同学名次相同，若相同则不做任何修改，否则将所有学校的bool值都置false。那么在遍历志愿时除了检查剩余名额，同时检查其bool值。</p>\n<p>$\\qquad$每个学校的录取人员用一个set存储，最后直接输出。</p>\n<p>$\\qquad$一遍过，中规中矩。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tuple&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, k;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">quota</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;q: quota)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q);</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;tuple&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">score</span>(n);</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">pref</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(k));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(score[i]), &amp;<span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(score[i]));</span><br><span class=\"line\">        <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(score[i]) += <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(score[i]);</span><br><span class=\"line\">        <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(score[i]) = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;p: pref[i])</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(score.<span class=\"built_in\">begin</span>(), score.<span class=\"built_in\">end</span>(), greater&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">green</span><span class=\"params\">(m, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; pre&#123;<span class=\"number\">-1</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">    vector&lt;set&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">admit</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;s: score)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre.first != <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(s) || pre.second != <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(s))</span><br><span class=\"line\">            <span class=\"built_in\">fill</span>(green.<span class=\"built_in\">begin</span>(), green.<span class=\"built_in\">end</span>(), <span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;p: pref[<span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(s)])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (quota[p] &gt; <span class=\"number\">0</span> || green[p])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                quota[p] -= <span class=\"number\">1</span>;</span><br><span class=\"line\">                green[p] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                admit[p].<span class=\"built_in\">insert</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(s));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        pre = <span class=\"built_in\">make_pair</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(s), <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(s));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;a: admit)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!a.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *a.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> aa = ++a.<span class=\"built_in\">begin</span>(); aa != a.<span class=\"built_in\">end</span>(); ++aa)</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d&quot;</span>, *aa);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4><span id=\"tips\">Tips</span></h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sort</span>(score.<span class=\"built_in\">begin</span>(), score.<span class=\"built_in\">end</span>(), greater&lt;&gt;());</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$这里的greater事实上是一个重载了<code>()</code>的结构体struct模板，因此加上括号之后就类似函数名，效果类似大于符号。</p>\n","text":"It is said that in 2011, there are about 100 graduate schools ready to proceed over 40,000 applications in Zhejiang Province. It would help ...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">Tips</span></a></li></ol></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1081」Rational Sum","uid":"8c93de95cc54dabff6d1524322e2911a","slug":"「1081」Rational-Sum","date":"2022-10-14T09:55:41.000Z","updated":"2022-12-03T03:02:35.624Z","comments":true,"path":"api/articles/「1081」Rational-Sum.json","keywords":null,"cover":null,"text":"Given N rational numbers in the form numerator/denominator, you are supposed to calculate their sum. Input Specification:Each input file con...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"numeric","slug":"numeric","count":4,"path":"api/tags/numeric.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1079」Total Sales of Supply Chain","uid":"60bfb2bd1454fe93e59a0b3383c25980","slug":"「1079」Total-Sales-of-Supply-Chain","date":"2022-10-11T06:10:22.000Z","updated":"2022-10-21T14:56:20.214Z","comments":true,"path":"api/articles/「1079」Total-Sales-of-Supply-Chain.json","keywords":null,"cover":null,"text":"A supply chain is a network of retailers（零售商）, distributors（经销商）, and suppliers（供应商）– everyone involved in moving a product from supplier to...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"BFS","slug":"BFS","count":10,"path":"api/tags/BFS.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}