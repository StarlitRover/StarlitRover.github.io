{"title":"「1112」Stucked Keyboard","uid":"618b8ef040c33dc554fa44d01d787f4c","slug":"「1112」Stucked-Keyboard","date":"2022-11-14T17:01:35.000Z","updated":"2022-11-15T05:26:35.560Z","comments":true,"path":"api/articles/「1112」Stucked-Keyboard.json","keywords":null,"cover":null,"content":"<p>On a broken keyboard, some of the keys are always stucked. So when you type some sentences, the characters corresponding to those keys will appear repeatedly on screen for k times.</p>\n<p>Now given a resulting string on screen, you are supposed to list all the possible stucked keys, and the original string.</p>\n<p>Notice that there might be some characters that are typed repeatedly. The stucked key will always repeat output for a fixed k times whenever it is pressed. For example, when k&#x3D;3, from the string <code>thiiis iiisss a teeeeeest</code> we know that the keys <code>i</code> and <code>e</code> might be stucked, but <code>s</code> is not even though it appears repeatedly sometimes. The original string could be <code>this isss a teest</code>.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the 1st line gives a positive integer $k (1&lt;k≤100)$ which is the output repeating times of a stucked key. The 2nd line contains the resulting string on screen, which consists of no more than 1000 characters from {a-z}, {0-9} and <code>_</code>. It is guaranteed that the string is non-empty.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in one line the possible stucked keys, in the order of being detected. Make sure that each key is printed once only. Then in the next line print the original string. It is guaranteed that there is at least one stucked key.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">caseee1__thiiis_iiisss_a_teeeeeest</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ei</span><br><span class=\"line\">case1__this_isss_a_teest</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$寻找所有卡住的按键。首先我们知道每个卡住的按键会重复$k$次，那么给出一个输入后显示的字符串，请判断哪些字符可能是卡住的（按照出现顺序输出），同时给出正常键盘的输出。</p>\n<p>$\\qquad$显然，只要一个字符连续出现的次数有一次不是$k$的倍数，那么它就必然不是卡住的按钮。我们设置一个<code>map&lt;char,short&gt; flag</code>，在遍历字符串的过程中分别代表以下含义：</p>\n<ol>\n<li><p>$flag[c]&#x3D;1$表示在之前的字符串中c连续出现的个数都是$k$的倍数，即是可能卡住的按钮</p>\n</li>\n<li><p>$flag[c]&#x3D;0$表示在之前的字符串中c未出现过（map的初始化值即为0）</p>\n</li>\n<li><p>$flag[c]&#x3D;-1$表示c不可能是卡住的按钮（之前的字符串中出现过非$k$倍数长度的连续c串）</p>\n</li>\n</ol>\n<p>$\\qquad$那么局势就明朗多啦，用一个<code>vector&lt;char&gt; stuck</code>来存储怀疑对象，由于不读到最后一个字符就无法肯定stuck中的按钮确实有可能卡住，因此最后在输出stuck时需要检查flag是否为1，-1的不能输出。</p>\n<p>$\\qquad$遍历整个字符串，如果当前字符与下一个字符不相等（⚠️或是在字符串末尾的字符），就将计数器对$k$取余，一旦不为0直接-1封杀，如果是$k$的倍数且$flag[c]&#x3D;0$那么就先压入stuck作为考察对象，之前$flag[c]&#x3D;1$就不要重复存入stuck了，同时将计数器归0。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; k;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">char</span>&gt; stuck;</span><br><span class=\"line\">    map&lt;<span class=\"type\">char</span>, <span class=\"type\">short</span>&gt; flag;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; s.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> &amp;&amp; s[i + <span class=\"number\">1</span>] == s[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt % k == <span class=\"number\">0</span> &amp;&amp; flag[s[i]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            stuck.<span class=\"built_in\">push_back</span>(s[i]), flag[s[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cnt % k != <span class=\"number\">0</span>)</span><br><span class=\"line\">            flag[s[i]] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;c: stuck)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag[c] == <span class=\"number\">1</span>) cout &lt;&lt; c;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; s[i];</span><br><span class=\"line\">        i += (flag[s[i]] == <span class=\"number\">1</span>) * (k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"On a broken keyboard, some of the keys are always stucked. So when you type some sentences, the characters corresponding to those keys will ...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1113」Integer Set Partition","uid":"e36208e2f8f3b544d6aecbeda1298b6f","slug":"「1113」Integer-Set-Partition","date":"2022-11-15T10:47:35.000Z","updated":"2022-11-15T10:56:14.721Z","comments":true,"path":"api/articles/「1113」Integer-Set-Partition.json","keywords":null,"cover":null,"text":"Given a set of N (&gt;1) positive integers, you are supposed to partition them into two disjoint sets A1​ and A2​ of n1​ and n2​ numbers, re...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1111」Online Map","uid":"d918ffea37eef621e5dbc24cef76eeef","slug":"「1111」Online-Map","date":"2022-11-14T15:22:03.000Z","updated":"2022-11-14T17:25:57.700Z","comments":true,"path":"api/articles/「1111」Online-Map.json","keywords":null,"cover":null,"text":"Input our current position and a destination, an online map can recommend several paths. Now your job is to recommend two paths to your user...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Dijkstra","slug":"Dijkstra","count":6,"path":"api/tags/Dijkstra.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}