{"title":"「1010」Radix","uid":"ace59b7e8a5639360739593f39df1262","slug":"1010-Radix","date":"2022-02-28T15:04:14.000Z","updated":"2022-11-25T16:35:01.423Z","comments":true,"path":"api/articles/1010-Radix.json","keywords":null,"cover":null,"content":"<p><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805507225665536\">➳ENTRY</a></p>\n<p>$\\qquad$Given a pair of positive integers, for example, 6 and 110, can this equation 6 &#x3D; 110 be true? The answer is <code>yes</code>, if 6 is a decimal number and 110 is a binary number.</p>\n<p>$\\qquad$Now for any pair of positive integers $N_1$ and $N_2$, your task is to find the radix of one number while that of the other is given.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>$\\qquad$Each input file contains one test case. Each case occupies a line which contains 4 positive integers:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N1 N2 tag radix</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$Here <code>N1</code> and <code>N2</code> each has no more than 10 digits. A digit is less than its radix and is chosen from the set { 0-9, <code>a</code>-<code>z</code> } where 0-9 represent the decimal numbers 0-9, and <code>a</code>-<code>z</code> represent the decimal numbers 10-35. The last number <code>radix</code> is the radix of <code>N1</code> if <code>tag</code> is 1, or of <code>N2</code> if <code>tag</code> is 2.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>$\\qquad$For each test case, print in one line the radix of the other number so that the equation <code>N1</code> &#x3D; <code>N2</code> is true. If the equation is impossible, print <code>Impossible</code>. If the solution is not unique, output the smallest possible radix.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 110 1 10</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 ab 1 2</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Impossible</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$这道题的测试点算是把我的认知给打穿了，不曾想，之前刷的题目都是那么的单纯可爱……</p>\n<img src=\"/images/PAT(Advanced level) Practice/1010/1.png\" style=\"zoom:40%;\">\n\n<p>$\\qquad$咳咳，你说搞20个测试点也就算了，真就一个提示都不给？</p>\n<p>$\\qquad$对的，计算机是一门追求严谨的学科，严谨的，严……</p>\n<p>$\\qquad$好吧，肝就完事了。</p>\n<br>\n\n<p>$\\qquad$题目大意是，给你两个字符串数字，告诉你其中一个数是几进制，问你另一个数是几进制时可以使两数相等，如果不可能则输出<code>Impossible</code>。</p>\n<img src=\"/images/PAT(Advanced level) Practice/1010/2.png\" style=\"zoom:50%;\">\n\n<p>$\\qquad$乍一看，so easy～ 一通枚举猛如虎，这不直接……但，题目没有给出进制数的范围，不讲武德呐。不过没有关系，我们清楚字符串数字的值随着进制数的增加是单调递增的（⚠️一种情况除外，那就是只有一位数字，其值不会随着进制的改变而改变。显然，我<del>根本不可能</del>掉进这种低级的坑），那么就可以先找出进制未知数中最大的字符，然后从最大的字符开始往上枚举，如果枚举到某个进制时超过了另一个已知数就说明两者不可能相等。比如说<code>1ac3b</code>中最大的字符是<code>c=12</code>，那就从13进制开始枚举直到其值≥另一个数。</p>\n<p>$\\qquad$思路非常的清晰啊，小手一抖代码就写完了呢～</p>\n<hr>\n<h2><span id=\"cde\">C☹DE</span></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string a, b;</span><br><span class=\"line\">  <span class=\"comment\">//each has no more than 10 digits！</span></span><br><span class=\"line\">  <span class=\"comment\">//a_d：decimal a；ra：radix of a</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> t, ra, rb = <span class=\"number\">1</span>, n, a_d = <span class=\"number\">0</span>, b_d = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; t &gt;&gt; ra;</span><br><span class=\"line\">  <span class=\"comment\">//make sure a&#x27;s value is known</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t == <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\">  <span class=\"comment\">//calculate a&#x27;s decimal value</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;c: a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n = (<span class=\"built_in\">isdigit</span>(c) ? c - <span class=\"string\">&#x27;0&#x27;</span> : c - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">10</span>);</span><br><span class=\"line\">        a_d = a_d * ra + n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">//mark if there is an answer</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">//find the max character of b</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> max_digit = *<span class=\"built_in\">max_element</span>(b.<span class=\"built_in\">begin</span>(), b.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    rb = (<span class=\"built_in\">isdigit</span>(max_digit) ? max_digit - <span class=\"string\">&#x27;0&#x27;</span> : max_digit - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//start enumeration</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b_d &lt; a_d)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b_d = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ++rb;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;c: b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n = (<span class=\"built_in\">isdigit</span>(c) ? c - <span class=\"string\">&#x27;0&#x27;</span> : c - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">10</span>);</span><br><span class=\"line\">            b_d = b_d * rb + n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b_d == a_d)</span><br><span class=\"line\">            flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">        cout &lt;&lt; rb;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Impossible&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>$\\qquad$第一次提交的时候没有用<code>long long int</code>，有一个测试点炸了，改正后就【测试点7】显示运行超时。不错啊，20个里面已经消灭19个了，不过感觉这个运行超时不是很友好……毕竟枚举最怕的就是运行超时了。</p>\n<p>$\\qquad$果然，经过一番测试（将<code>rb</code>的初始值不断提高看什么时候不超时），非常<del>惊喜</del>地发现【测试点7】的测试数据是<code>10 2147483647 2 10</code>。狗带，这用例完全就是专怼枚举的，因为这要从2进制枚举到最大的32位整型。也还好啦，再给我多一点时间……</p>\n<p>$\\qquad$不枚举的话那咋办，突然想起来其值随着进制数的增大是单调递增的。单调的事物往往查找方便，因为还有一个叫二分法的东西。对啊，这不就是典型的二分法应用题嘛。</p>\n<p>$\\qquad$一通代码猛如虎，修改方案的时候往往会捡了西瓜丢了芝麻。</p>\n<p>$\\qquad$差点忘了题目里还有个要求，如果有多个符和要求的答案则输出最小的那个。我寻思着单调还能有多解？个位数们：你好。</p>\n<p>$\\qquad$对了，“二进制数里没有<code>132</code>”。</p>\n<hr>\n<h2><span id=\"cde\">C☺DE</span></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string a, b;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> t, ra, rb = <span class=\"number\">1</span>, n, a_d = <span class=\"number\">0</span>, b_d, cup = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; t &gt;&gt; ra;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t == <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;c: a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n = (<span class=\"built_in\">isdigit</span>(c) ? c - <span class=\"string\">&#x27;0&#x27;</span> : c - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">10</span>);</span><br><span class=\"line\">        a_d = a_d * ra + n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">//consider one-digit</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">atoi</span>(b.<span class=\"built_in\">c_str</span>()) == a_d)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">atoi</span>(b.<span class=\"built_in\">c_str</span>()) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">//&quot;132 isn&#x27;t binary number&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> max_digit = *<span class=\"built_in\">max_element</span>(b.<span class=\"built_in\">begin</span>(), b.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> rb_max = INT32_MAX, rb_min = (<span class=\"built_in\">isdigit</span>(max_digit) ? max_digit - <span class=\"string\">&#x27;0&#x27;</span> : max_digit - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (rb_max &gt; rb_min)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b_d = <span class=\"number\">0</span>;</span><br><span class=\"line\">        rb = (rb_max + rb_min + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"comment\">// unchanged rb demonstrates impossibility</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cup == rb)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        cup = rb;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;c: b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n = (<span class=\"built_in\">isdigit</span>(c) ? c - <span class=\"string\">&#x27;0&#x27;</span> : c - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">10</span>);</span><br><span class=\"line\">            b_d = b_d * rb + n;</span><br><span class=\"line\">          <span class=\"comment\">//break in time</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b_d &gt; a_d)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b_d == a_d)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b_d &lt; a_d)</span><br><span class=\"line\">            rb_min = rb;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            rb_max = rb;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">        cout &lt;&lt; rb;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Impossible&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"λ-一个小注\">λ 一个小注</span></h2><p>$\\qquad$在实施二分法的时候有一个问题需要关注，那就是边界能否取到。注意到，上文中那个让我大枚举法爆炸的测试数据的答案是<code>2147483647</code>，也就是最大的32位整数。而我在<code>code</code>里取的<code>rb</code>初始最大值就是<code>INT32_MAX=2147483647</code>,因此我需要让<code>rb</code>可以二分到这个最大边界，一种解决方案便是<code>code</code>里采用的二分时+1策略，这样的话<code>rb</code>下界就必须取一个不可能的值，因为达不到下界。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rb = (rb_max + rb_min + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$还有一种方法，就是<code>rb_max</code>与<code>rb_min</code>都取一个达不到的值，比如说</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> rb_max = INT32_MAX + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$然而一开始采用这个策略时，我发现<code>rb_max</code>被赋值为了<code>-2147483648</code>。有点懵，寻思着<code>long long int</code>不是64位的吗，怎么缩水溢出了？后来仔细想想是因为<code>INT32_MAX</code>是<code>int</code>类型的，因此+1的时候先是按<code>int</code>类型进行计算的，然后才将<code>int</code>的结果转换成<code>long long int</code>。所以一开始就需要对<code>INT32_MAX</code>进行强制类型转化。</p>\n","text":"➳ENTRY $\\qquad$Given a pair of positive integers, for example, 6 and 110, can this equation 6 &#x3D; 110 be true? The answer is yes, if 6 is...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"binary search","slug":"binary-search","count":7,"path":"api/tags/binary-search.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C☹DE</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C☺DE</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">λ 一个小注</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「Section 2」浮点数表示","uid":"2aa32c1dad7cbbce692f6b1b0a062627","slug":"浮点数表示","date":"2022-03-01T08:43:17.000Z","updated":"2022-03-03T08:04:11.531Z","comments":true,"path":"api/articles/浮点数表示.json","keywords":null,"cover":[],"text":" 浮点数：顾名思义，小数点的位置可以浮动，采用了科学记数法的思想 任意一个二进制数都可以用阶码$E$、尾数$M$唯一地表示为$$N&#x3D;2^E\\times M&#x3D;2^{\\pm e}\\times\\pm 0.m$$⚠️正常情况下的尾数$M$包括符号位 阶码$E$决定了数据...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"计算机组成原理","slug":"计算机组成原理","count":8,"path":"api/categories/计算机组成原理.json"}],"tags":[{"name":"notes","slug":"notes","count":13,"path":"api/tags/notes.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「Section 0」计网专有名词","uid":"2e1e3e282f89766b686da9305ae12c26","slug":"计网专有名词","date":"2022-02-27T13:03:14.000Z","updated":"2022-04-10T08:39:11.129Z","comments":true,"path":"api/articles/计网专有名词.json","keywords":null,"cover":[],"text":" 独立模式：计算机未连接到网络，各自独立使用的方式（opp. 网络互连模式） WAN ( Wide Area Network，广域网）：指涵盖多个远距离区域的远程网络。比广域网再小一级的、连接整个城市的网络叫城域网(MAN, Metropolitan Area Network)。...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/categories/计算机网络.json"}],"tags":[{"name":"notes","slug":"notes","count":13,"path":"api/tags/notes.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}