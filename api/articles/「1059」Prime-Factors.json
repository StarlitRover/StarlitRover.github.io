{"title":"「1059」Prime Factors","uid":"d25a64f6e3048948d06ba269622dda29","slug":"「1059」Prime-Factors","date":"2022-09-08T13:23:41.000Z","updated":"2022-09-08T13:51:01.550Z","comments":true,"path":"api/articles/「1059」Prime-Factors.json","keywords":null,"cover":null,"content":"<p>Given any positive integer N, you are supposed to find all of its prime factors, and write them in the format $N &#x3D; p_1​^{k_1}​×p_2​^{k_2}​×⋯×p_m^{​k_m}$​.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case which gives a positive integer N in the range of <strong>long int</strong>.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>Factor N in the format N <code>=</code> p1​<code>^</code>k1​<code>*</code>p2​<code>^</code>k2​<code>*</code>…<code>*</code>pm​<code>^</code>km​, where pi​’s are prime factors of N in increasing order, and the exponent ki​ is the number of pi​ – hence when there is only one pi​, ki​ is 1 and must <strong>NOT</strong> be printed out.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">97532468</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">97532468=2^2*11*17*101*1291</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$经典分解质因数，感觉已经不会做大一的题目了，真的年纪大了。</p>\n<p>$\\qquad$有两种思路，首先建立一个素数表，我们知道一个数的质因数不会超过其平方根，那么由于$\\sqrt{2^{31}}&lt;5000$，因此我们只需找出所有5000以内的素数然后一个一个素数去除。</p>\n<p>$\\qquad$这种做法没什么美感。我采取了一点优化，不建立素数表，首先可以肯定$n(\\geq 2)$最小的因数一定是素数，否则还会存在更小的因数而矛盾。根据这一条性质，我们只需每次找最小的因子$pf_\\min$即可，$pf_\\min$必然是素数，然后接着找$n&#x2F;pf_\\min$的最小素因子，周而复始。另外循环搜索$pf$的范围也不必从2开始，根据我们的策略可以发现每轮发现的最小素因子$pf_\\min&#39;$必然$≥$上一轮找到的最小素因子$pf_\\min$（否则必然更早找到），因此可以将循环范围定为$[pre\\_pf,n&#x2F;2]$（事实证明$n&#x2F;2$比$\\sqrt{n}$更快）。另外每找到一个$pf$就更新$n&#x2F;&#x3D;pf$并重新开始循环，直到$n$不再变化为止。</p>\n<p>$\\qquad$如此一来，我们就能对搜索区间的两端同时进行优化，运行时用一个map记录每个$pf$出现的次数最后统一输出即可。</p>\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; pf;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m = <span class=\"number\">-1</span>, pre = <span class=\"number\">2</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    cout &lt;&lt; n &lt;&lt; <span class=\"string\">&quot;=&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) cout &lt;&lt; <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (m != n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m = n;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = pre; i &lt;= n / <span class=\"number\">2</span>; ++i)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    pf[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">                    n /= (pre = i);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pf[n] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: pf)</span><br><span class=\"line\">            cout &lt;&lt; (flag ? (flag = <span class=\"literal\">false</span>, <span class=\"string\">&quot;&quot;</span>) : <span class=\"string\">&quot;*&quot;</span>) &lt;&lt; k.first &lt;&lt; (k.second == <span class=\"number\">1</span> ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;^&quot;</span> + <span class=\"built_in\">to_string</span>(k.second));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Given any positive integer N, you are supposed to find all of its prime factors, and write them in the format $N &#x3D; p_1​^{k_1}​×p_2​^{k_...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"prime","slug":"prime","count":6,"path":"api/tags/prime.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1060」Are They Equal","uid":"0eaf91694ac904eb1b9bccba53543259","slug":"「1060」Are-They-Equal","date":"2022-09-11T08:00:39.000Z","updated":"2022-09-11T08:34:10.241Z","comments":true,"path":"api/articles/「1060」Are-They-Equal.json","keywords":null,"cover":null,"text":"If a machine can save only 3 significant digits, the float numbers 12300 and 12358.9 are considered equal since they are both saved as $0.12...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1058」A+B in Hogwarts","uid":"2d08ef1e83c7532f13470f67dbd15fc9","slug":"「1058」A-B-in-Hogwarts","date":"2022-09-08T12:03:34.000Z","updated":"2022-09-08T12:14:35.574Z","comments":true,"path":"api/articles/「1058」A-B-in-Hogwarts.json","keywords":null,"cover":null,"text":"If you are a fan of Harry Potter, you would know the world of magic has its own currency system – as Hagrid explained it to Harry, “Seventee...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}