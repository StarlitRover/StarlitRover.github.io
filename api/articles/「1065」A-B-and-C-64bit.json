{"title":"「1065」A+B and C (64bit)","uid":"42e41f54cdd74aae9e65b00439b07d2c","slug":"「1065」A-B-and-C-64bit","date":"2022-09-24T03:10:52.000Z","updated":"2022-09-24T03:25:09.213Z","comments":true,"path":"api/articles/「1065」A-B-and-C-64bit.json","keywords":null,"cover":null,"content":"<p>Given three integers A, B and C in $(−2^{63},2^{63})$, you are supposed to tell whether A+B&gt;C.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>The first line of the input gives the positive number of test cases, T (≤10). Then T test cases follow, each consists of a single line containing three integers A, B and C, separated by single spaces.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, output in one line <code>Case #X: true</code> if A+B&gt;C, or <code>Case #X: false</code> otherwise, where X is the case number (starting from 1). Each line should ends with <code>&#39;\\n&#39;</code>.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">1 2 3</span><br><span class=\"line\">2 3 4</span><br><span class=\"line\">9223372036854775807 -9223372036854775808 0</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case #1: false</span><br><span class=\"line\">Case #2: true</span><br><span class=\"line\">Case #3: false</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$很迷惑，第一行写的还是开区间，结果sample就来了一个$-2^{63}$。经过实际测试，测试数据的真实数据范围应在$[-2^{63},2^{63})$，即long long int的范围。</p>\n<p>$\\qquad$虽然读取数据时不会溢出，但在A、B相加时可能会发生溢出，那么最简单的一个方法就是通过移项将可能溢出的加法变为减法。根据只有同号相加才可能溢出的原理可以分为以下四种情况：</p>\n<ol>\n<li><p>A、B同号，此时判断C是否也同号：</p>\n<ul>\n<li><p>A、B、C都同号，将不等式改为A&gt;C-B</p>\n</li>\n<li><p>A、B和C不同号，$A,B\\geq 0$ true &#x2F; $A,B&lt;0$ false</p>\n</li>\n</ul>\n</li>\n<li><p>A、B异号，A+B不会溢出，直接判断</p>\n</li>\n</ol>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> n, a, b, c;</span><br><span class=\"line\">    string s[] = &#123;<span class=\"string\">&quot;false&quot;</span>, <span class=\"string\">&quot;true&quot;</span>&#125;;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">bool</span> otc;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld %lld %lld&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((a ^ b) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            otc = ((a ^ c) &gt;= <span class=\"number\">0</span>) ? a &gt; c - b : (a &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            otc = a + b &gt; c;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: %s\\n&quot;</span>, i + <span class=\"number\">1</span>, s[otc].<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Given three integers A, B and C in $(−2^{63},2^{63})$, you are supposed to tell whether A+B&gt;C. Input Specification:The first line of the ...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1066」Root of AVL Tree","uid":"42640cc884e7d3b61d24e0f58f7990cd","slug":"「1066」Root-of-AVL-Tree","date":"2022-09-24T16:14:37.000Z","updated":"2022-10-19T10:54:11.913Z","comments":true,"path":"api/articles/「1066」Root-of-AVL-Tree.json","keywords":null,"cover":[],"text":"An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one;...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"},{"name":"AVL","slug":"AVL","count":2,"path":"api/tags/AVL.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1064」Complete Binary Search Tree","uid":"fc7708d5c5ede5940549730140fdd222","slug":"「1064」Complete-Binary-Search-Tree","date":"2022-09-22T08:21:20.000Z","updated":"2022-10-19T10:53:59.490Z","comments":true,"path":"api/articles/「1064」Complete-Binary-Search-Tree.json","keywords":null,"cover":null,"text":"A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties: The left subtree of a node contains o...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}