{"title":"模拟退火","uid":"031d2c36fd739bf94778d5ddc84b6f38","slug":"模拟退火","date":"2022-08-28T05:33:08.000Z","updated":"2022-11-28T12:45:12.731Z","comments":true,"path":"api/articles/模拟退火.json","keywords":null,"cover":[],"content":"<p>$\\qquad$模拟退火算法，顾名思义，模拟晶体退火过程。晶体在加热后固体化为液态，内部原子运动加剧，会离开原有位置向四周扩散。此时慢慢进行退火冷却使其重新固化，粒子往往会停留在比原先能量低得多的位置上，本质上也是通过随机性跳出局部最优。</p>\n<p>$\\qquad$本文尝试用模拟退火算法对<strong>TSP问题</strong>（<em>travelling salesman problem</em>）进行求解，并与Gurobi求解器进行对比。</p>\n<img src=\"/images/数学煎馍/模拟退火/2.png\" title alt data-align=\"center\">\n\n<span id=\"more\"></span>\n\n<br>\n\n<h2><span id=\"ω\">Ω</span></h2><hr>\n<p>$\\qquad$模拟退火的算法流程非常简单，一般用来求解最小化的优化问题：</p>\n<ol>\n<li><p>给出一个满足所有约束条件的初始解，制定对解空间进行编码的规则，并设定初始温度$T$、降温参数$a\\in(0,1)$、最低温度$T_\\min $</p>\n</li>\n<li><p>通过<strong>2变换法&#x2F;3变换法&#x2F;随机调换</strong>对解进行改造：$λ\\rightarrow γ $</p>\n<ul>\n<li><strong>2变换法</strong>：随机取两个随机数$m,n(m&lt;n)$，将该解索引为$m,n$之间的序列进行反转（逆序排列）</li>\n<li><strong>3变换法</strong>：随机取3个随机数$m,n,r(m\\leq n&lt;r)$，取出索引$m,n$之间的序列置于索引$r$元素的后面</li>\n<li><strong>随机调换</strong>：随机取两个随机数$m,n(m&lt;n)$，将两位置处的元素进行调换</li>\n</ul>\n</li>\n<li><p>求改造解与原解之间的目标函数差：$\\Delta f&#x3D;f(γ)-f(λ)$</p>\n</li>\n<li><p>按照下述概率接受改造解，产生一随机数$r\\in (0,1)$与P进行比较，若$r\\leq P$则$\\lambda&#x3D;γ$否则维持原解</p>\n<center>\n\n<p><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20.76ex\" height=\"6.785ex\" viewbox=\"0 -1749.5 9175.9 2999\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\" style=\"\"><defs><path id=\"MJX-194-TEX-I-1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/><path id=\"MJX-194-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-194-TEX-S4-7B\" d=\"M661 -1243L655 -1249H622L604 -1240Q503 -1190 434 -1107T348 -909Q346 -897 346 -499L345 -98L343 -82Q335 3 287 87T157 223Q146 232 145 236Q144 240 144 250Q144 265 145 268T157 278Q242 333 288 417T343 583L345 600L346 1001Q346 1398 348 1410Q379 1622 600 1739L622 1750H655L661 1744V1727V1721Q661 1712 661 1710T657 1705T648 1700T630 1690T602 1668Q589 1659 574 1643T531 1593T484 1508T459 1398Q458 1389 458 1001Q458 614 457 605Q441 435 301 316Q254 277 202 251L250 222Q260 216 301 185Q443 66 457 -104Q458 -113 458 -501Q458 -888 459 -897Q463 -944 478 -988T509 -1060T548 -1114T580 -1149T602 -1167Q620 -1183 634 -1192T653 -1202T659 -1207T661 -1220V-1226V-1243Z\"/><path id=\"MJX-194-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path id=\"MJX-194-TEX-N-394\" d=\"M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z\"/><path id=\"MJX-194-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/><path id=\"MJX-194-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"/><path id=\"MJX-194-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/><path id=\"MJX-194-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/><path id=\"MJX-194-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/><path id=\"MJX-194-TEX-I-1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/><path id=\"MJX-194-TEX-N-2265\" d=\"M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-194-TEX-I-1D443\"/></g><g data-mml-node=\"mo\" transform=\"translate(1028.8, 0)\"><use xlink:href=\"#MJX-194-TEX-N-3D\"/></g><g data-mml-node=\"mrow\" transform=\"translate(2084.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-194-TEX-S4-7B\"/></g><g data-mml-node=\"mtable\" transform=\"translate(806, 0)\"><g data-mml-node=\"mtr\" transform=\"translate(0, 857)\"><g data-mml-node=\"mtd\" transform=\"translate(784.4, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-194-TEX-N-31\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(3068.8, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-194-TEX-N-394\"/></g><g data-mml-node=\"mi\" transform=\"translate(833, 0)\"><use xlink:href=\"#MJX-194-TEX-I-1D453\"/></g><g data-mml-node=\"mo\" transform=\"translate(1660.8, 0)\"><use xlink:href=\"#MJX-194-TEX-N-3C\"/></g><g data-mml-node=\"mn\" transform=\"translate(2716.6, 0)\"><use xlink:href=\"#MJX-194-TEX-N-30\"/></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, -857)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-194-TEX-I-1D452\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(466, 363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-194-TEX-N-2212\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(778, 0)\"><g data-mml-node=\"mrow\" transform=\"translate(220, 485) scale(0.707)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-194-TEX-N-394\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(833, 0)\"><use xlink:href=\"#MJX-194-TEX-I-1D453\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(460.1, -345) scale(0.707)\"><use xlink:href=\"#MJX-194-TEX-I-1D447\"/></g><rect width=\"1177.9\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(3068.8, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-194-TEX-N-394\"/></g><g data-mml-node=\"mi\" transform=\"translate(833, 0)\"><use xlink:href=\"#MJX-194-TEX-I-1D453\"/></g><g data-mml-node=\"mo\" transform=\"translate(1660.8, 0)\"><use xlink:href=\"#MJX-194-TEX-N-2265\"/></g><g data-mml-node=\"mn\" transform=\"translate(2716.6, 0)\"><use xlink:href=\"#MJX-194-TEX-N-30\"/></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(7091.3, 0)\"/></g></g></g></svg></p>\n</center>\n</li>\n<li><p>降温：$T&#x3D;a\\cdot T$</p>\n</li>\n<li><p>若$T&lt;T_\\min$或者连续多次的迭代过程中都没有接受改造解就退出循环，否则重复2～5步</p>\n</li>\n</ol>\n<br>\n\n<p>$\\qquad$可见模拟退火中最核心的内容便是</p>\n<p>$$<br>P&#x3D;e^{-\\frac{\\Delta f}{T}}\\quad Δ f\\geq 0<br>$$</p>\n<p>$\\qquad$ $Δ f&gt;0$时直接接受非常容易理解，毕竟目标函数更小了；而模拟退火算法的核心就在于$Δ f\\leq 0$时还是以一定概率接受，而且分析上式可以发现当初始情况下T更大时P也会较大，随着T慢慢降低后P也会趋近于0。很显然，这是利用随机性避免粒子在初始情况中就落于局部最优。刚开始降温时粒子还是有一定概率跳出当前所处区域，扩大搜寻范围；到后来温度逐渐降低，粒子的状态开始收敛，跳出的概率就很小了，这是避免粒子跳出最优解所在区域而难以收敛。</p>\n<p>$$<br>\\lim_{T→0}P&#x3D;\\lim_{T→0}e^{-\\frac{\\Delta f}{T}}&#x3D;0<br>$$</p>\n<br>\n\n<h2><span id=\"tsp旅行推销员问题\">TSP：旅行推销员问题</span></h2><hr>\n<p>$\\qquad$旅行推销员是一个非常经典的NP-Hard问题，即在多项式时间内也无法验证解的正确性。问题大意非常简单，就是有$n$个城市，两两之间距离已知，有个salesman从某个城市出发希望能够游历其他每座城市一遍，同时最后回到出发城市，重度强迫症患者的他希望设计出一条满足上述要求的最短路线。</p>\n<p>$\\qquad$如果你是他的朋友，你会如何劝退他，请写一篇不少于200词的感化信。（100）</p>\n<br>\n\n<h4><span id=\"初始化城市坐标和距离矩阵\">✦ 初始化城市坐标和距离矩阵</span></h4><p>$\\qquad$可以通过随机生成或者加载之前生成的坐标来初始化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> random <span class=\"keyword\">as</span> rd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 随机生成城市坐标</span></span><br><span class=\"line\">loc = np.zeros([<span class=\"number\">100</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(loc)):</span><br><span class=\"line\">    loc[i] = (rd.random() * <span class=\"number\">100</span>, rd.random() * <span class=\"number\">100</span>)</span><br><span class=\"line\">np.save(<span class=\"string\">&quot;loc.npy&quot;</span>, loc) <span class=\"comment\"># 保存生成坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入之前城市坐标</span></span><br><span class=\"line\"><span class=\"comment\"># loc=np.load(&quot;loc.npy&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">num = <span class=\"built_in\">len</span>(loc)</span><br><span class=\"line\"><span class=\"comment\"># 多一列方便处理回到原城市的约束</span></span><br><span class=\"line\">dist = np.zeros([num, num + <span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算距离矩阵</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, num):</span><br><span class=\"line\">        dist[i, j] = dist[j, i] = np.linalg.norm(loc[i] - loc[j])</span><br><span class=\"line\">dist[:, num] = dist[:, <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"贪心求初始解\">✦ 贪心求初始解</span></h4><p>$\\qquad$TSP问题的解基本不需要编码，包含所有城市一个全排列的列表就可以作为可行解的编码。我这里规定了0号作为起点和终点。</p>\n<p>$\\qquad$用贪心算法构造初始解，即从起点城市开始每次选择离当前城市最近的且还未访问过的城市作为下一个目的地。在城市数较少时贪心结果几乎就是最优解，城市数大了就嘻嘻。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 贪心求初始解</span></span><br><span class=\"line\">path=[<span class=\"number\">0</span>]</span><br><span class=\"line\">isVisited=[<span class=\"literal\">False</span>]*num</span><br><span class=\"line\">isVisited[<span class=\"number\">0</span>]=<span class=\"literal\">True</span></span><br><span class=\"line\">crt=<span class=\"number\">0</span></span><br><span class=\"line\">sum_d=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">    idx=np.argsort(dist[crt])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> idx:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j!=num <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isVisited[j] <span class=\"keyword\">and</span> j!=crt:</span><br><span class=\"line\">            path.append(j)</span><br><span class=\"line\">            sum_d+=dist[crt,j]</span><br><span class=\"line\">            isVisited[j]=<span class=\"literal\">True</span></span><br><span class=\"line\">            crt=j</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">path.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">sum_d+=dist[crt,<span class=\"number\">0</span>]</span><br><span class=\"line\">init_sum=sum_d</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;distance of initial solution:&quot;</span>,sum_d)</span><br></pre></td></tr></table></figure>\n\n<center class=\"half\">\n    <img src=\"/images/数学煎馍/模拟退火/4.png\" width=\"420\" style=\"display: inline-block\">\n  <img src=\"/images/数学煎馍/模拟退火/3.png\" width=\"420\" style=\"display: inline-block\">\n</center>\n\n<h4><span id=\"模拟退火\">✦ 模拟退火</span></h4><p>$\\qquad$设置好初始温度、降温参数、最低温度之后即可开始退火。我在这里尝试了2变换法、3变换法、2 3变换法相结合（设置dice骰子随机选择）的模式，最后发现还是2变换法的效果最佳。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置初始参数</span></span><br><span class=\"line\">T=<span class=\"number\">1</span></span><br><span class=\"line\">a=<span class=\"number\">0.999</span></span><br><span class=\"line\"></span><br><span class=\"line\">path_opt=path</span><br><span class=\"line\">sum_opt=sum_d</span><br><span class=\"line\">cnt=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> T&gt;<span class=\"number\">1e-300</span>:</span><br><span class=\"line\">    <span class=\"comment\"># dice=rd.randint(1,2)</span></span><br><span class=\"line\">    <span class=\"comment\"># if dice==1:</span></span><br><span class=\"line\">    m=rd.randint(<span class=\"number\">1</span>,num-<span class=\"number\">2</span>)</span><br><span class=\"line\">    n=rd.randint(m+<span class=\"number\">1</span>,num)</span><br><span class=\"line\">    delta=dist[path[m-<span class=\"number\">1</span>],path[n-<span class=\"number\">1</span>]]+dist[path[m],path[n]]-dist[path[m-<span class=\"number\">1</span>],path[m]]-dist[path[n-<span class=\"number\">1</span>],path[n]]</span><br><span class=\"line\">    <span class=\"comment\"># elif dice==2:</span></span><br><span class=\"line\">    <span class=\"comment\">#     m=rd.randint(1,num-3)</span></span><br><span class=\"line\">    <span class=\"comment\">#     n=rd.randint(m+2,num-1)</span></span><br><span class=\"line\">    <span class=\"comment\">#     delta=dist[path[m],path[n-1]]+dist[path[m],path[n+1]]+\\</span></span><br><span class=\"line\">    <span class=\"comment\">#       dist[path[n],path[m-1]]+dist[path[n],path[m+1]]-\\</span></span><br><span class=\"line\">    <span class=\"comment\">#       dist[path[m],path[m-1]]-dist[path[m],path[m+1]]-\\</span></span><br><span class=\"line\">    <span class=\"comment\">#       dist[path[n],path[n-1]]-dist[path[n],path[n+1]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> delta&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> rd.random()&lt;np.exp(-delta/T):</span><br><span class=\"line\">        <span class=\"comment\"># if dice==1:</span></span><br><span class=\"line\">        path[m:n]=path[n-<span class=\"number\">1</span>:m-<span class=\"number\">1</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># elif dice==2:</span></span><br><span class=\"line\">        <span class=\"comment\">#     path[m],path[n]=path[n],path[m]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sum_d+=delta</span><br><span class=\"line\">        cnt=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> sum_d&lt;sum_opt:</span><br><span class=\"line\">            path_opt=path</span><br><span class=\"line\">            sum_opt=sum_d</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cnt+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cnt==<span class=\"number\">300</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    T=a*T</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Current Temperature:\\t&quot;</span>,T)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Minimum Distance:\\t\\t&quot;</span>,sum_opt)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Initial Distance:\\t\\t&quot;</span>,init_sum)</span><br><span class=\"line\">x=loc[path_opt,<span class=\"number\">0</span>]</span><br><span class=\"line\">y=loc[path_opt,<span class=\"number\">1</span>]</span><br><span class=\"line\">plt.plot(x,y,<span class=\"string\">&#x27;b*-&#x27;</span>,linewidth=<span class=\"number\">1</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$其中一例的结果如下：</p>\n<img title src=\"/images/数学煎馍/模拟退火/1.png\" alt data-align=\"center\" width=\"483\">\n\n<p>$\\qquad$顺便将其可视化：</p>\n<img title src=\"/images/数学煎馍/模拟退火/0.png\" alt data-align=\"center\" width=\"570\">\n\n<br>\n\n<h2><span id=\"gurobi\">Gurobi</span></h2><hr>\n<p>$\\qquad$想着用Gurobi也来插一脚，没想到花的时间比码上面的模拟退火还长。因为这里有个问题——如何保证Gurobi给出的解是一个连通图？</p>\n<p>$\\qquad$仔细想想，会发现多个连通图和一个连通图的总边数以及每个顶点度要求都是相同的，如果优化模型对连通性没有限制的话会出大问题：</p>\n<p>$$<br>\\min \\sum_{i&#x3D;1}^n\\sum_{j&#x3D;i+1}^n x_{ij}\\cdot d_{ij}<br>$$</p>\n<center>\n\n<p><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"38.316ex\" height=\"12.179ex\" viewbox=\"0 -2941.6 16935.7 5383.2\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\" style=\"\"><defs><path id=\"MJX-910-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/><path id=\"MJX-910-TEX-N-2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"/><path id=\"MJX-910-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/><path id=\"MJX-910-TEX-S4-23A7\" d=\"M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z\"/><path id=\"MJX-910-TEX-S4-23A9\" d=\"M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z\"/><path id=\"MJX-910-TEX-S4-23A8\" d=\"M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z\"/><path id=\"MJX-910-TEX-S4-23AA\" d=\"M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z\"/><path id=\"MJX-910-TEX-SO-2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/><path id=\"MJX-910-TEX-I-1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/><path id=\"MJX-910-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-910-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path id=\"MJX-910-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-910-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/><path id=\"MJX-910-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/><path id=\"MJX-910-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/><path id=\"MJX-910-TEX-N-2200\" d=\"M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z\"/><path id=\"MJX-910-TEX-N-2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/><path id=\"MJX-910-TEX-N-7B\" d=\"M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z\"/><path id=\"MJX-910-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/><path id=\"MJX-910-TEX-N-22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/><path id=\"MJX-910-TEX-N-7D\" d=\"M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z\"/><path id=\"MJX-910-TEX-N-A0\" d=\"\"/><path id=\"MJX-910-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-I-1D460\"/></g><g data-mml-node=\"mo\" transform=\"translate(469, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2E\"/></g><g data-mml-node=\"mi\" transform=\"translate(913.7, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D461\"/></g><g data-mml-node=\"mo\" transform=\"translate(1274.7, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2E\"/></g><g data-mml-node=\"mrow\" transform=\"translate(1719.3, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-910-TEX-S4-23A7\" transform=\"translate(0, 2042.6)\"/><use xlink:href=\"#MJX-910-TEX-S4-23A9\" transform=\"translate(0, -1542.6)\"/><use xlink:href=\"#MJX-910-TEX-S4-23A8\" transform=\"translate(0, 0)\"/><svg width=\"889\" height=\"1072.6\" y=\"1060\" x=\"0\" viewbox=\"0 189 889 1072.6\"><use xlink:href=\"#MJX-910-TEX-S4-23AA\" transform=\"scale(1, 5.275)\"/></svg><svg width=\"889\" height=\"1072.6\" y=\"-1632.6\" x=\"0\" viewbox=\"0 189 889 1072.6\"><use xlink:href=\"#MJX-910-TEX-S4-23AA\" transform=\"scale(1, 5.275)\"/></svg></g><g data-mml-node=\"mtable\" transform=\"translate(889, 0)\"><g data-mml-node=\"mtr\" transform=\"translate(0, 1579.1)\"><g data-mml-node=\"mtd\" transform=\"translate(236, 0)\"><g data-mml-node=\"munderover\"><g data-mml-node=\"mo\" transform=\"translate(69.5, 0)\"><use xlink:href=\"#MJX-910-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(0, -887.9) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-I-1D457\"/></g><g data-mml-node=\"mo\" transform=\"translate(412, 0)\"><use xlink:href=\"#MJX-910-TEX-N-3D\"/></g><g data-mml-node=\"mn\" transform=\"translate(1190, 0)\"><use xlink:href=\"#MJX-910-TEX-N-31\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(385.4, 950) scale(0.707)\"><use xlink:href=\"#MJX-910-TEX-I-1D45B\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(1361.7, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-I-1D465\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(572, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D457\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(2796.7, 0)\"><use xlink:href=\"#MJX-910-TEX-N-3D\"/></g><g data-mml-node=\"mn\" transform=\"translate(3852.5, 0)\"><use xlink:href=\"#MJX-910-TEX-N-32\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(6377.8, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-N-2200\"/></g><g data-mml-node=\"mi\" transform=\"translate(556, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D456\"/></g><g data-mml-node=\"mo\" transform=\"translate(1178.8, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2208\"/></g><g data-mml-node=\"mo\" transform=\"translate(2123.6, 0)\"><use xlink:href=\"#MJX-910-TEX-N-7B\"/></g><g data-mml-node=\"mn\" transform=\"translate(2623.6, 0)\"><use xlink:href=\"#MJX-910-TEX-N-31\"/></g><g data-mml-node=\"mo\" transform=\"translate(3123.6, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mn\" transform=\"translate(3568.2, 0)\"><use xlink:href=\"#MJX-910-TEX-N-32\"/></g><g data-mml-node=\"mo\" transform=\"translate(4068.2, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mo\" transform=\"translate(4512.9, 0)\"><use xlink:href=\"#MJX-910-TEX-N-22EF\"/></g><g data-mml-node=\"mo\" transform=\"translate(5851.6, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(6296.2, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D45B\"/></g><g data-mml-node=\"mo\" transform=\"translate(6896.2, 0)\"><use xlink:href=\"#MJX-910-TEX-N-7D\"/></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, -703.1)\"><g data-mml-node=\"mtd\" transform=\"translate(588.2, 0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-I-1D465\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(572, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D457\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(1435.1, 0)\"><use xlink:href=\"#MJX-910-TEX-N-3D\"/></g><g data-mml-node=\"msub\" transform=\"translate(2490.8, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-I-1D465\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(572, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-I-1D457\"/></g><g data-mml-node=\"mi\" transform=\"translate(412, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D456\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(5824.5, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-N-2200\"/></g><g data-mml-node=\"mtext\" transform=\"translate(556, 0)\"><use xlink:href=\"#MJX-910-TEX-N-A0\"/></g><g data-mml-node=\"mi\" transform=\"translate(806, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D456\"/></g><g data-mml-node=\"mo\" transform=\"translate(1151, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(1595.7, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D457\"/></g><g data-mml-node=\"mo\" transform=\"translate(2285.4, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2208\"/></g><g data-mml-node=\"mo\" transform=\"translate(3230.2, 0)\"><use xlink:href=\"#MJX-910-TEX-N-7B\"/></g><g data-mml-node=\"mn\" transform=\"translate(3730.2, 0)\"><use xlink:href=\"#MJX-910-TEX-N-31\"/></g><g data-mml-node=\"mo\" transform=\"translate(4230.2, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mn\" transform=\"translate(4674.9, 0)\"><use xlink:href=\"#MJX-910-TEX-N-32\"/></g><g data-mml-node=\"mo\" transform=\"translate(5174.9, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mo\" transform=\"translate(5619.6, 0)\"><use xlink:href=\"#MJX-910-TEX-N-22EF\"/></g><g data-mml-node=\"mo\" transform=\"translate(6958.2, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(7402.9, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D45B\"/></g><g data-mml-node=\"mo\" transform=\"translate(8002.9, 0)\"><use xlink:href=\"#MJX-910-TEX-N-7D\"/></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, -2147.4)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-I-1D465\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(572, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D457\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(1435.1, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2208\"/></g><g data-mml-node=\"mo\" transform=\"translate(2379.8, 0)\"><use xlink:href=\"#MJX-910-TEX-N-7B\"/></g><g data-mml-node=\"mn\" transform=\"translate(2879.8, 0)\"><use xlink:href=\"#MJX-910-TEX-N-30\"/></g><g data-mml-node=\"mo\" transform=\"translate(3379.8, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mn\" transform=\"translate(3824.5, 0)\"><use xlink:href=\"#MJX-910-TEX-N-31\"/></g><g data-mml-node=\"mo\" transform=\"translate(4324.5, 0)\"><use xlink:href=\"#MJX-910-TEX-N-7D\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(5824.5, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-910-TEX-N-2200\"/></g><g data-mml-node=\"mtext\" transform=\"translate(556, 0)\"><use xlink:href=\"#MJX-910-TEX-N-A0\"/></g><g data-mml-node=\"mi\" transform=\"translate(806, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D456\"/></g><g data-mml-node=\"mo\" transform=\"translate(1151, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(1595.7, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D457\"/></g><g data-mml-node=\"mo\" transform=\"translate(2285.4, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2208\"/></g><g data-mml-node=\"mo\" transform=\"translate(3230.2, 0)\"><use xlink:href=\"#MJX-910-TEX-N-7B\"/></g><g data-mml-node=\"mn\" transform=\"translate(3730.2, 0)\"><use xlink:href=\"#MJX-910-TEX-N-31\"/></g><g data-mml-node=\"mo\" transform=\"translate(4230.2, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mn\" transform=\"translate(4674.9, 0)\"><use xlink:href=\"#MJX-910-TEX-N-32\"/></g><g data-mml-node=\"mo\" transform=\"translate(5174.9, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mo\" transform=\"translate(5619.6, 0)\"><use xlink:href=\"#MJX-910-TEX-N-22EF\"/></g><g data-mml-node=\"mo\" transform=\"translate(6958.2, 0)\"><use xlink:href=\"#MJX-910-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(7402.9, 0)\"><use xlink:href=\"#MJX-910-TEX-I-1D45B\"/></g><g data-mml-node=\"mo\" transform=\"translate(8002.9, 0)\"><use xlink:href=\"#MJX-910-TEX-N-7D\"/></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(15216.4, 0)\"/></g></g></g></g></g></g></svg></p>\n</center>\n\n<p>$\\qquad$后来发现Gurobi官方有给出求解TSP问题的案例，详情<a href=\"https://gurobi.github.io/modeling-examples/traveling_salesman/tsp.html\">戳这</a>。</p>\n<p>$\\qquad$他在上述模型中又添加了以下约束（*）：</p>\n<p>$$<br>\\sum_{(i \\neq j) \\in S} x_{i, j} \\leq|S|-1 \\quad \\forall S \\subset \\text { Capitals }<br>$$</p>\n<p>$\\qquad$简单地说，如果一个解中包含多个连通分图，那么肯定存在真子集$S\\subset \\text{Cities}$，S中所有的边数（两个端点都在S中）之和&#x3D;&#x3D;S中的城市数量，且满足这个条件的S即为一个连通分图。因此他就非常暴力地把所有真子集都枚举一遍，让他们都不满足这个条件。</p>\n<p>$\\qquad$然而在实际实现的过程中，这是个糟糕透顶的想法。因为如此一来约束个数会随着城市数的增加而呈指数式增长。说实在一点，理想是理想，现实是现实。那咋办呢？不要慌，既然Gurobi出了官方文档，说明他们还是有能力解决的。</p>\n<p>$\\qquad$于是乎他们拿出了名叫Lazy Constraints的法宝，翻译一下应该叫惰性约束，顾名思义，这个约束非常的懒，只有在指定条件才会跳出来判断解的合理性。也就是说，在正常求解的过程中不会添加该约束，在用户指定的情况下再去判断，这样就轻松多啦。</p>\n<p>$\\qquad$本来想着直接套用官方模版跑一通，奈何他刚开始直接读取了一个json文件，不是很清楚读完后的数据格式，部分地方也没看懂在做什么，导致在套用自己变量后总会出现这样那样的小bug，很烦，简单地重构了下。</p>\n<br>\n\n<p>$\\qquad$想要构造惰性约束需要自己实现一个Callback函数来指定什么条件调用该函数，然后该函数再决定满足什么要求时添加Lazy Constraint：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delSubtour</span>(<span class=\"params\">model, where</span>):</span><br><span class=\"line\">    <span class=\"comment\"># GRB.Callback.MIPSOL：发现新的MIP解</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> where == GRB.Callback.MIPSOL:</span><br><span class=\"line\">        <span class=\"comment\"># make a list of edges selected in the solution</span></span><br><span class=\"line\">        vals = model.cbGetSolution(model._<span class=\"built_in\">vars</span>)</span><br><span class=\"line\">        edges = gp.tuplelist((i, j) <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> model._<span class=\"built_in\">vars</span>.keys()</span><br><span class=\"line\">                             <span class=\"keyword\">if</span> vals[i, j] &gt; <span class=\"number\">0.5</span>)</span><br><span class=\"line\">        adj = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> edges:</span><br><span class=\"line\">            adj.setdefault(i, <span class=\"built_in\">set</span>()).add(j)</span><br><span class=\"line\">            adj.setdefault(j, <span class=\"built_in\">set</span>()).add(i)</span><br><span class=\"line\">        circle = <span class=\"built_in\">set</span>([<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"built_in\">next</span> = <span class=\"built_in\">set</span>([<span class=\"number\">0</span>])</span><br><span class=\"line\">        new = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">next</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">next</span>:</span><br><span class=\"line\">                new |= adj[k]</span><br><span class=\"line\">            <span class=\"built_in\">next</span> = new - circle</span><br><span class=\"line\">            circle |= <span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(circle) &lt; num:</span><br><span class=\"line\">            model.cbLazy(gp.quicksum(model._<span class=\"built_in\">vars</span>[i, j] <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> combinations(circle, <span class=\"number\">2</span>)) &lt;= <span class=\"built_in\">len</span>(circle) - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$Callback函数的条件选项可以见<a href=\"https://www.gurobi.com/documentation/9.5/refman/cb_codes.html\">官方文档</a>。where指定调用条件，我这里的MIPSOL是指当Gurobi找到一个混合整数规划（MIP）解（SOL）时，就会执行该函数的主体部分。而主体部分先通过cbGetSolution函数获取找到的该解，然后将$x_{ij}&#x3D;1$的顶点元组对$(i,j)$放入一个列表中，根据该列表建立一个通过城市编号可以访问连接顶点的邻接字典adj，最后求出0号城市所在连通图的城市个数，与城市总数进行比较就能说明所有城市是否连通。如果不连通，此时再添加约束（*）。</p>\n<br>\n\n<p>$\\qquad$Gurobi求解的完整代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gurobipy <span class=\"keyword\">as</span> gp</span><br><span class=\"line\"><span class=\"keyword\">from</span> gurobipy <span class=\"keyword\">import</span> GRB</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> random <span class=\"keyword\">as</span> rd</span><br><span class=\"line\"><span class=\"comment\"># combinations(list,n): 枚举所有长度为n的全排列</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations, product</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delSubtour</span>(<span class=\"params\">model, where</span>):</span><br><span class=\"line\">    <span class=\"comment\"># GRB.Callback.MIPSOL：发现新的MIP解</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> where == GRB.Callback.MIPSOL:</span><br><span class=\"line\">        <span class=\"comment\"># make a list of edges selected in the solution</span></span><br><span class=\"line\">        vals = model.cbGetSolution(model._<span class=\"built_in\">vars</span>)</span><br><span class=\"line\">        edges = gp.tuplelist((i, j) <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> model._<span class=\"built_in\">vars</span>.keys()</span><br><span class=\"line\">                             <span class=\"keyword\">if</span> vals[i, j] &gt; <span class=\"number\">0.5</span>)</span><br><span class=\"line\">        adj = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> edges:</span><br><span class=\"line\">            adj.setdefault(i, <span class=\"built_in\">set</span>()).add(j)</span><br><span class=\"line\">            adj.setdefault(j, <span class=\"built_in\">set</span>()).add(i)</span><br><span class=\"line\">        circle = <span class=\"built_in\">set</span>([<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"built_in\">next</span> = <span class=\"built_in\">set</span>([<span class=\"number\">0</span>])</span><br><span class=\"line\">        new = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">next</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">next</span>:</span><br><span class=\"line\">                new |= adj[k]</span><br><span class=\"line\">            <span class=\"built_in\">next</span> = new - circle</span><br><span class=\"line\">            circle |= <span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(circle) &lt; num:</span><br><span class=\"line\">            model.cbLazy(gp.quicksum(model._<span class=\"built_in\">vars</span>[i, j] <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> combinations(circle, <span class=\"number\">2</span>)) &lt;= <span class=\"built_in\">len</span>(circle) - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">m = gp.Model(<span class=\"string\">&quot;TSP&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vars</span> = m.addVars(dist.keys(), obj=dist, vtype=GRB.BINARY)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Symmetry</span></span><br><span class=\"line\">m.addConstrs(<span class=\"built_in\">vars</span>[j, i] == <span class=\"built_in\">vars</span>[i, j] <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> dist.keys())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># two edges to each city</span></span><br><span class=\"line\">m.addConstrs((<span class=\"built_in\">vars</span>.<span class=\"built_in\">sum</span>(i, <span class=\"string\">&#x27;*&#x27;</span>) == <span class=\"number\">2</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optimize the model</span></span><br><span class=\"line\">m._<span class=\"built_in\">vars</span> = <span class=\"built_in\">vars</span></span><br><span class=\"line\">m.Params.lazyConstraints = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># setObjective函数此时似乎没用</span></span><br><span class=\"line\"><span class=\"comment\"># m.setObjective(vars.prod(dist), GRB.MINIMIZE)</span></span><br><span class=\"line\">m.optimize(delSubtour)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vals = m.getAttr(<span class=\"string\">&#x27;x&#x27;</span>, <span class=\"built_in\">vars</span>)</span><br><span class=\"line\">edges = gp.tuplelist((i, j) <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> vals.keys() <span class=\"keyword\">if</span> vals[i, j] &gt; <span class=\"number\">0.5</span> <span class=\"keyword\">and</span> i &lt; j)</span><br><span class=\"line\">adj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> edges:</span><br><span class=\"line\">    adj.setdefault(i, []).append(j)</span><br><span class=\"line\">    adj.setdefault(j, []).append(i)</span><br><span class=\"line\">isVisited = [<span class=\"literal\">False</span>] * num</span><br><span class=\"line\">x = [];</span><br><span class=\"line\">y = []</span><br><span class=\"line\">idx = <span class=\"number\">0</span></span><br><span class=\"line\">total = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num - <span class=\"number\">1</span>):</span><br><span class=\"line\">    x.append(loc[idx, <span class=\"number\">0</span>])</span><br><span class=\"line\">    y.append(loc[idx, <span class=\"number\">1</span>])</span><br><span class=\"line\">    pre = idx</span><br><span class=\"line\">    isVisited[idx] = <span class=\"literal\">True</span></span><br><span class=\"line\">    idx = adj[idx][<span class=\"number\">0</span>] <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isVisited[adj[idx][<span class=\"number\">0</span>]] <span class=\"keyword\">else</span> adj[idx][<span class=\"number\">1</span>]</span><br><span class=\"line\">    total += dist[pre, idx]</span><br><span class=\"line\"></span><br><span class=\"line\">total += dist[idx, <span class=\"number\">0</span>]</span><br><span class=\"line\">x.append(loc[<span class=\"number\">0</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\">y.append(loc[<span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Minimum Distance：&quot;</span>, total)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"comment\"># 设置字体</span></span><br><span class=\"line\">plt.rc(<span class=\"string\">&#x27;font&#x27;</span>, family=<span class=\"string\">&#x27;Times New Roman&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置图像的像素</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;figure.dpi&#x27;</span>] = <span class=\"number\">150</span></span><br><span class=\"line\"><span class=\"comment\"># 设置字体的颜色</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;text.color&#x27;</span>] = <span class=\"string\">&#x27;black&#x27;</span></span><br><span class=\"line\">plt.plot(x, y, <span class=\"string\">&#x27;b*-&#x27;</span>, linewidth=<span class=\"number\">1</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$由于Gurobi求解的是最优解，因此规模一旦稍大就要跑很久。城市数量为50左右的求解速度还是很快的，100就开始思考人生了。</p>\n<center class=\"half\">\n    <img src=\"/images/数学煎馍/模拟退火/6.png\" width=\"420\" style=\"display: inline-block\">\n  <img src=\"/images/数学煎馍/模拟退火/5.png\" width=\"420\" style=\"display: inline-block\">\n</center>\n\n<center class=\"half\">\n    <img src=\"/images/数学煎馍/模拟退火/7.png\" width=\"420\" style=\"display: inline-block\">\n  <img src=\"/images/数学煎馍/模拟退火/8.png\" width=\"420\" style=\"display: inline-block\">\n</center>\n\n<center class=\"half\">\n    <img src=\"/images/数学煎馍/模拟退火/10.png\" width=\"420\" style=\"display: inline-block\">\n  <img src=\"/images/数学煎馍/模拟退火/9.png\" width=\"420\" style=\"display: inline-block\">\n</center>\n","text":"$\\qquad$模拟退火算法，顾名思义，模拟晶体退火过程。晶体在加热后固体化为液态，内部原子运动加剧，会离开原有位置向四周扩散。此时慢慢进行退火冷却使其重新固化，粒子往往会停留在比原先能量低得多的位置上，本质上也是通过随机性跳出局部最优。 $\\qquad$本文尝试用模拟退火算法对...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"智能算法","slug":"智能算法","count":4,"path":"api/categories/智能算法.json"}],"tags":[{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"},{"name":"数学煎馍","slug":"数学煎馍","count":4,"path":"api/tags/数学煎馍.json"},{"name":"TSP","slug":"TSP","count":2,"path":"api/tags/TSP.json"},{"name":"Gurobi","slug":"Gurobi","count":2,"path":"api/tags/Gurobi.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">TSP：旅行推销员问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">✦ 初始化城市坐标和距离矩阵</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">✦ 贪心求初始解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">✦ 模拟退火</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Gurobi</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1048」Find Coins","uid":"0d4898cefd298a76df1cccb4e68d417b","slug":"「1048」Find-Coins","date":"2022-08-31T07:03:51.000Z","updated":"2022-08-31T07:20:37.764Z","comments":true,"path":"api/articles/「1048」Find-Coins.json","keywords":null,"cover":null,"text":"Eva loves to collect coins from all over the universe, including some other planets like Mars. One day she visited a universal shopping mall...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1047」Student List for Course","uid":"6791030d5707ab0b9f17e02b4e398cd4","slug":"「1047」Student-List-for-Course","date":"2022-08-26T05:56:35.000Z","updated":"2022-08-26T06:20:50.314Z","comments":true,"path":"api/articles/「1047」Student-List-for-Course.json","keywords":null,"cover":null,"text":"Zhejiang University has 40,000 students and provides 2,500 courses. Now given the registered course list of each student, you are supposed t...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"vector","slug":"vector","count":17,"path":"api/tags/vector.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}