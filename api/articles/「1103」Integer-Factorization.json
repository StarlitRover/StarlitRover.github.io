{"title":"「1103」Integer Factorization","uid":"4ef3e4e200e4b84799be544dd9cdda17","slug":"「1103」Integer-Factorization","date":"2022-11-02T02:26:51.000Z","updated":"2022-11-02T10:51:26.112Z","comments":true,"path":"api/articles/「1103」Integer-Factorization.json","keywords":null,"cover":null,"content":"<p>The K−P factorization of a positive integer N is to write N as the sum of the P-th power of K positive integers. You are supposed to write a program to find the K−P factorization of N for any positive integers N, K and P.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case which gives in a line the three positive integers N (≤400), K (≤N) and P (1&lt;P≤7). The numbers in a line are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each case, if the solution exists, output in the format:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N = n[1]^P + ... n[K]^P</span><br></pre></td></tr></table></figure>\n\n<p>where <code>n[i]</code> (<code>i</code> &#x3D; 1, …, <code>K</code>) is the <code>i</code>-th factor. All the factors must be printed in non-increasing order.</p>\n<p>Note: the solution may not be unique. For example, the 5-2 factorization of 169 has 9 solutions, such as 122+42+22+22+12, or 112+62+22+22+22, or more. You must output the one with the maximum sum of the factors. If there is a tie, the largest factor sequence must be chosen – sequence $\\{a_1​,a_2​,⋯,a_K​\\}$ is said to be <strong>larger</strong> than $\\{b_1​,b_2​,⋯,b_K​\\}$ if there exists $1≤L≤K$ such that $a_i&#x3D;b_i​$ for $i&lt;L$ and $a_L​&gt;b_L$​.</p>\n<p>If there is no solution, simple output <code>Impossible</code>.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">169 5 2</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">169 = 6^2 + 6^2 + 6^2 + 6^2 + 5^2</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">169 167 3</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$给定$N,K,P$，将$N$分解为$N &#x3D; n[1]^P + \\cdots +n[K]^P$，满足$n[i]\\geq n[j]&gt;0(i&lt;j)$。</p>\n<p>$\\qquad$一开始没什么头绪，就想着枚举呗，但从哪开始枚举呢。</p>\n<p>$\\qquad$首先题目要求如果有多个解则优先选择$\\sum\\limits_{i&#x3D;1}^K n[i]$更大的解，如果$\\sum\\limits_{i&#x3D;1}^K n[i]$也相等则选择第一个不同factor更大的解，我们也认为这个解&gt;另一个解。为了可以少判断一个选择条件，我们直接从最大解开始遍历，这样先遇到的可行解就肯定是更大的。首先可以肯定$n[1]≤\\sqrt[P]{N}$，因此我们可以将$v&#x3D;[\\lfloor\\sqrt[P]{N} \\rfloor,0,\\cdots,(n[K]&#x3D;)0\\ ]$作为最大的初始（不一定可行）解向量，然后向下遍历。</p>\n<p>$\\qquad$我们规定$v.back()$表示解向量中最后一个非零元素的引用，$v.size()$表示解向量中的非零元素的个数， $m&#x3D;N-\\sum\\limits_{i&#x3D;1}^{v.size()}n[i]^P$，$s&#x3D;\\sum\\limits_{i&#x3D;1}^K n[i]$，$s_\\max$表示目前最大的s，$v.add(t)$表示将v的第一个0元素改为t，$\\mathbf{next}(v)$表示将下一个可行解赋给$v$，然后制定如下遍历规则：</p>\n<ul>\n<li><p>$v.size()&#x3D;K$</p>\n<ul>\n<li><p>$m&#x3D;0$</p>\n<ul>\n<li><p>$s&gt;s_\\max$：更新最优解，$s_\\max&#x3D;s$，$\\mathbf{next}(v)$</p>\n</li>\n<li><p>$s\\leq s_\\max$：$\\mathbf{next}(v)$</p>\n</li>\n</ul>\n</li>\n<li><p>$m &gt; 0$：$\\mathbf{next}(v)$</p>\n</li>\n</ul>\n</li>\n<li><p>$v.size()&lt; K$</p>\n<ul>\n<li><p>$m&gt;0$：$v.add(v.back())$</p>\n</li>\n<li><p>$m&#x3D;0$：$\\mathbf{next}(v)$</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>$\\qquad$简单地说，如果没到K个factor就继续加入最大可能的factor$(\\leq v.back())$，到了K个就看factor的P方和是否为N，若m&#x3D;0那么就看这个解是否更优，s更大的话就更新最优解。</p>\n<p>$\\qquad$主体部分已经确定了，那么$\\mathbf{next}(v)$应该如何实现呢。直接的想法就是对最后一个非零元素$v.back()$减1，⚠️如果减到0了就必须对再前一个factor减1，否则将会重新遍历这段过程，陷入死循环。但我们还可以做出一些优化。首先，注意到在$v.size()&#x3D;K$的时候肯定会执行$\\mathbf{next}(v)$，此时最后一个元素$v.back()$不管减多少肯定$m&gt;0$，不可能产生可行解，因此可以直接把$v.back()$删除，对倒数第二个factor减1。而$v.size()&lt;K\\ and\\ m&#x3D;0$时就不能直接把$v.back()$删除，就执行正常减1。同时别忘更新$s,m$。</p>\n<p>$\\qquad$至此就差不多了，接下来做一些优化。注意到这种题目中会用到很多pow函数，但pow函数效率令人堪忧，一种常见的办法是自己实现一下简单的myPow函数，但是这一题我们注意到$n[1]\\leq \\sqrt[P]{N}$，因此我们只会求$\\lfloor\\sqrt[P]{N} \\rfloor$以内整数的P次方，那么就可以直接打表，用一个vector存储1-$\\lfloor\\sqrt[P]{N} \\rfloor$的P次方即可。另外当$v.back()^P\\cdot (K-v.size())&lt;m$时就说明接下来所遍历的解不可能产生可行解，直接跳过，而我们可以用之前的P次方vector外加二分查找快速找到$\\lfloor\\sqrt[P]{m} \\rfloor$。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, k, p, s, s_max = <span class=\"number\">0</span>, m;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; power&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">nth_root</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left = <span class=\"number\">1</span>, right = power.<span class=\"built_in\">size</span>(), mid;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (power[mid] &gt; a) right = mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> left = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eliminate the last factor and minus 1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">next</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;sol)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    s -= sol.<span class=\"built_in\">back</span>(), m += power[sol.<span class=\"built_in\">back</span>()];</span><br><span class=\"line\">    sol.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!sol.<span class=\"built_in\">empty</span>() &amp;&amp; sol.<span class=\"built_in\">back</span>() == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m += <span class=\"number\">1</span>, s -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        sol.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!sol.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sol.<span class=\"built_in\">back</span>() -= <span class=\"number\">1</span>, s -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        m += power[sol.<span class=\"built_in\">back</span>() + <span class=\"number\">1</span>] - power[sol.<span class=\"built_in\">back</span>()];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (power[sol.<span class=\"built_in\">back</span>()] * (k - sol.<span class=\"built_in\">size</span>()) &lt; m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m += power[sol.<span class=\"built_in\">back</span>()];</span><br><span class=\"line\">            s -= sol.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">            sol.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;n, &amp;k, &amp;p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; power.<span class=\"built_in\">back</span>() &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> otc = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; p; ++j) otc *= i;</span><br><span class=\"line\">        power.<span class=\"built_in\">push_back</span>(otc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; opt, tmp&#123;<span class=\"built_in\">nth_root</span>(n)&#125;;</span><br><span class=\"line\">    m = n - power[tmp.<span class=\"built_in\">back</span>()];</span><br><span class=\"line\">    s = tmp.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!tmp.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp.<span class=\"built_in\">size</span>() == k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m == <span class=\"number\">0</span> &amp;&amp; s &gt; s_max)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                s_max = s;</span><br><span class=\"line\">                opt = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (m &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">min</span>(tmp.<span class=\"built_in\">back</span>(), <span class=\"built_in\">nth_root</span>(m)));</span><br><span class=\"line\">            m -= power[tmp.<span class=\"built_in\">back</span>()];</span><br><span class=\"line\">            s += tmp.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp.<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s_max == <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Impossible&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d = %d^%d&quot;</span>, n, opt[<span class=\"number\">0</span>], p);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; opt.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; + %d^%d&quot;</span>, opt[i], p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"The K−P factorization of a positive integer N is to write N as the sum of the P-th power of K positive integers. You are supposed to write a...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1104」Sum of Number Segments","uid":"032852f306632572219a0e57a789cd37","slug":"「1104」Sum-of-Number-Segments","date":"2022-11-02T08:58:20.000Z","updated":"2022-11-02T09:29:56.391Z","comments":true,"path":"api/articles/「1104」Sum-of-Number-Segments.json","keywords":null,"cover":null,"text":"Given a sequence of positive numbers, a segment is defined to be a consecutive subsequence. For example, given the sequence { 0.1, 0.2, 0.3,...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1102」Invert a Binary Tree","uid":"11aaeea099b9cb0ef7fb12c65a5510db","slug":"「1102」Invert-a-Binary-Tree","date":"2022-10-29T12:36:57.000Z","updated":"2022-10-29T12:42:25.841Z","comments":true,"path":"api/articles/「1102」Invert-a-Binary-Tree.json","keywords":null,"cover":null,"text":"The following is from Max Howell @twitter: 1Google: 90% of our engineers use the software you wrote (Homebrew), but you can&#x27;t invert a ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"BFS","slug":"BFS","count":10,"path":"api/tags/BFS.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}