{"title":"「1033」To Fill or Not to Fill","uid":"75a7b4e5def88b644c70f785b7585976","slug":"「1033」To-Fill-or-Not-to-Fill","date":"2022-08-01T14:04:54.000Z","updated":"2022-08-02T02:19:55.469Z","comments":true,"path":"api/articles/「1033」To-Fill-or-Not-to-Fill.json","keywords":null,"cover":null,"content":"<p>With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains 4 positive numbers: Cmax​ (≤ 100), the maximum capacity of the tank; D (≤30000), the distance between Hangzhou and the destination city; Davg​ (≤20), the average distance per unit gas that the car can run; and N (≤ 500), the total number of gas stations. Then N lines follow, each contains a pair of non-negative numbers: $P_i​$, the unit gas price, and $D_i​$ (≤D), the distance between this station and Hangzhou, for $i&#x3D;1,⋯,N$. All the numbers in a line are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print <code>The maximum travel distance = X</code> where <code>X</code> is the maximum possible distance the car can run, accurate up to 2 decimal places.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50 1300 12 8</span><br><span class=\"line\">6.00 1250</span><br><span class=\"line\">7.00 600</span><br><span class=\"line\">7.00 150</span><br><span class=\"line\">7.10 0</span><br><span class=\"line\">7.20 200</span><br><span class=\"line\">7.50 400</span><br><span class=\"line\">7.30 1000</span><br><span class=\"line\">6.85 300</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">749.17</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50 1300 12 2</span><br><span class=\"line\">7.10 0</span><br><span class=\"line\">7.00 600</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The maximum travel distance = 1200.00</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$终于见到需要动点脑子的题目了（然而脑子已生锈。</p>\n<p>$\\qquad$一条直线上有多个加油站，每个加油站的油价不同，给出四元组（最大油量，总路程长度，单位油耗能跑的里程数，加油站个数），以及每个加油站距离起点的距离和油价，计算到达终点时所需的最便宜总油费，若无法到达则输出最远里程。</p>\n<p>$\\qquad$本质上是考虑到达每一个加油站时做出是否加油的决策，如果要加则加多少。</p>\n<ol>\n<li><p>问题❶：加不加。很显然，如果我们能开到前面一个油价更便宜的加油站就可以不加，但如果我们前面能开到的加油站油价都比当前这家高，那没办法我们必须加。</p>\n</li>\n<li><p>问题❷：加多少。很显然，如果在加满油的里程范围内有一家油价更低的加油站，那么我们只要加到能够达到这家加油站的油量即可。另外我们找的不是里程范围内油价最低的那家P，而是第一家油价比当前油站K低的油站Q，否则QP（P比Q远）路程所付的油价就不划算了。如果该范围内没有价格更低的油站，那么直接把油加满将是最优选择，因为加满油的这段路上没有更划算的加油站。</p>\n</li>\n</ol>\n<p>$\\qquad$看透本质后一切都明了了起来，我们首先对得到的油站信息根据到起点的距离进行排序，然后依次便利所有油站，即对每个油站都进行是否加油的决策。根据当前油量计算可行驶里程，在该里程范围中寻找油价更低的油站，若有则不加油。若加油则在加满油的里程范围内寻找第一家油价更低的油站，找到后计算到当该油站还差多少油，根据结果加油付费。</p>\n<p>$\\qquad$<big>弥天大坑</big>：第一个油站如果不在起点，汽车开局就嗝屁了，最大里程：0。（case 2）</p>\n<hr>\n<h2><span id=\"c-d-e\">C ☺ D E</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">double</span>, <span class=\"type\">double</span>&gt; pdd;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t, d, da, n;</span><br><span class=\"line\">    <span class=\"type\">double</span> gas = <span class=\"number\">0</span>, price = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; t &gt;&gt; d &gt;&gt; da &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;pdd&gt; <span class=\"title\">stations</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: stations)</span><br><span class=\"line\">        cin &gt;&gt; k.second &gt;&gt; k.first;</span><br><span class=\"line\">    stations.<span class=\"built_in\">emplace_back</span>(d, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(stations.<span class=\"built_in\">begin</span>(), stations.<span class=\"built_in\">end</span>(), [](pdd &amp;a, pdd &amp;b) &#123; <span class=\"keyword\">return</span> a.first &lt; b.first; &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// ！！！</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stations[<span class=\"number\">0</span>].first != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The maximum travel distance = 0.00&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> crt_d = stations[i].first, gas_d = crt_d + gas * da;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">bool</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; (n + <span class=\"number\">1</span>) &amp;&amp; stations[k].first &lt;= gas_d)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stations[k].second &lt; price)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ++k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> idx = i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (k &lt; (n + <span class=\"number\">1</span>) &amp;&amp; stations[k].first &lt;= crt_d + t * da)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stations[k].second &lt; stations[idx].second)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    idx = k;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ++k;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!flag)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The maximum travel distance = %.2lf&quot;</span>, crt_d + t * da);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (idx == i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                price += (t - gas) * stations[i].second;</span><br><span class=\"line\">                gas = t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                gas += (stations[idx].first - gas_d) / da;</span><br><span class=\"line\">                price += (stations[idx].first - gas_d) / da * stations[i].second;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        gas -= (stations[i + <span class=\"number\">1</span>].first - crt_d) / da;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2lf&quot;</span>, price);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"tips\">Tips</span></h3><ol>\n<li><p>在油站向量<code>stations</code>的最后加入了终点作为一个虚油站，方便最后一个油站的决策</p>\n</li>\n<li><p>crt_d表示当前里程，gas_d表示当前油量最大里程</p>\n</li>\n<li><p>flag二次利用，第二次是检验当前站点加满油后能否行驶到下一个站点</p>\n</li>\n<li><p>每次循环的结束都将行驶到下一个站点的油量进行扣除</p>\n</li>\n</ol>\n","text":"With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to ...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"vector","slug":"vector","count":17,"path":"api/tags/vector.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C ☺ D E</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Tips</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1034」Head of a Gang","uid":"f5b9a425a8b15196437bbb108fb7f4af","slug":"「1034」Head-of-a-Gang","date":"2022-08-02T03:50:15.000Z","updated":"2022-08-05T03:01:08.382Z","comments":true,"path":"api/articles/「1034」Head-of-a-Gang.json","keywords":null,"cover":null,"text":"One way that the police finds the head of a gang is to check people’s phone calls. If there is a phone call between A and B, we say that A a...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1032」Sharing","uid":"2aa4f707763887fd968ccc8e9446d574","slug":"「1032」Sharing","date":"2022-08-01T07:30:35.000Z","updated":"2022-08-01T07:45:42.467Z","comments":true,"path":"api/articles/「1032」Sharing.json","keywords":null,"cover":[],"text":"To store English words, one method is to use linked lists and store a word letter by letter. To save some space, we may let the words share ...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}