{"title":"「1017」Queueing at Bank","uid":"f28bb9815d595dfd2f2742951bf93359","slug":"1017-Queueing-at-Bank","date":"2022-04-08T05:03:29.000Z","updated":"2022-07-04T03:49:11.938Z","comments":true,"path":"api/articles/1017-Queueing-at-Bank.json","keywords":null,"cover":null,"content":"<p>➳<a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805491530579968\">ENTRY</a></p>\n<p>$\\qquad$Suppose a bank has <em>K</em> windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his&#x2F;her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.</p>\n<p>$\\qquad$Now given the arriving time <em>T</em> and the processing time <em>P</em> of each customer, you are supposed to tell the average waiting time of all the customers.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>$\\qquad$Each input file contains one test case. For each case, the first line contains 2 numbers: <em>N</em> (≤104) - the total number of customers, and <em>K</em> (≤100) - the number of windows. Then <em>N</em> lines follow, each contains 2 times: <code>HH:MM:SS</code> - the arriving time, and <em>P</em> - the processing time in minutes of a customer. Here <code>HH</code> is in the range [00, 23], <code>MM</code> and <code>SS</code> are both in [00, 59]. It is assumed that no two customers arrives at the same time.</p>\n<p>$\\qquad$Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>$\\qquad$For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7 3</span><br><span class=\"line\">07:55:00 16</span><br><span class=\"line\">17:00:01 2</span><br><span class=\"line\">07:59:59 15</span><br><span class=\"line\">08:01:00 60</span><br><span class=\"line\">08:00:00 30</span><br><span class=\"line\">08:00:02 2</span><br><span class=\"line\">08:03:00 10</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8.2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$本题算是低配版<a href=\"/post/1014-Waiting-in-Line.html\" title=\"「1014」Waiting in Line\">「1014」Waiting in Line</a>，区别在于每个窗口前不能排队，所有等候的人都在黄线外排成一排，当有窗口空了才能进入。</p>\n<p>$\\qquad$极简翻译：银行有$n$个窗口，每个窗口接待一人。顾客按照到来的先后顺序在黄线外排成一排，当有窗口空闲时依次进入。我们已知每个顾客到达的时间，以及事务所需的处理时间，最终输出所有顾客的平均等待时间。注意，银行营业时间为8:00-17:00，17:00后到达的顾客不计入平均等待时间。</p>\n<p>$\\qquad$这一题相比1014事实上退化了很多，一方面是每个窗口前不能排队，所有人排在一个队伍里；另一方面，最后需要输出的结果并不是针对具体的个体，而是刻画整体的平均等待时间。因此我们也无需给每一个顾客进行编号，直接用<code>pair</code>存储到达时间和处理时长即可：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># pair<span class=\"string\">&lt;arrival time in second, processing time in second&gt;</span></span></span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;&gt; info;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$注意到，顾客信息不是按照到达顺序给出的，因此我们需要先对所有顾客的到达时间进行<code>sort</code>排序，然后遍历每一位顾客，选择时间轴最早的窗口，计算相应的等待时间，同时将顾客的处理时长加到该窗口的时间轴上。当循环到某位顾客的到达时间晚于17:00时则<code>break</code>退出循环，并记录有效顾客数<code>rn</code>。</p>\n<hr>\n<h2><span id=\"cde\">C☺DE</span></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; ptt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k, h, m, s, p, rn, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    vector&lt;ptt&gt; info;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d:%d:%d %d&quot;</span>, &amp;h, &amp;m, &amp;s, &amp;p);</span><br><span class=\"line\">        info.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">move</span>(<span class=\"built_in\">ptt</span>(<span class=\"number\">3600</span> * h + <span class=\"number\">60</span> * m + s, p * <span class=\"number\">60</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(info.<span class=\"built_in\">begin</span>(), info.<span class=\"built_in\">end</span>(), [](<span class=\"type\">const</span> ptt &amp;a, <span class=\"type\">const</span> ptt &amp;b) &#123; <span class=\"keyword\">return</span> a.first &lt; b.first; &#125;);</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">windows</span><span class=\"params\">(k, <span class=\"number\">8</span> * <span class=\"number\">3600</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (rn = <span class=\"number\">0</span>; rn &lt; n; ++rn)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (info[rn].first &gt; <span class=\"number\">17</span> * <span class=\"number\">3600</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      # Count waiting time</span><br><span class=\"line\">        sum += (windows[<span class=\"number\">0</span>] &gt; info[rn].first ? (windows[<span class=\"number\">0</span>] - info[rn].first) : (windows[<span class=\"number\">0</span>] = info[rn].first, <span class=\"number\">0</span>));</span><br><span class=\"line\">      # Add processing time to time line</span><br><span class=\"line\">        windows[<span class=\"number\">0</span>] += info[rn].second;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(windows.<span class=\"built_in\">begin</span>(), windows.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.1f&quot;</span>, (sum % <span class=\"number\">60</span> / <span class=\"number\">60.0</span> + sum / <span class=\"number\">60</span>) / rn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"︎-一些说明\">⚡︎ 一些说明</span></h2><ol>\n<li><p>所有时间都换算成秒</p>\n</li>\n<li><p>窗口的初始时间轴都设置为8:00就无需考虑早到的情况了</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">windows</span><span class=\"params\">(k, <span class=\"number\">8</span> * <span class=\"number\">3600</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当出现窗口空闲而无顾客的时候，需要先将窗口的时间轴拉到顾客到达时间再加上事务处理时长</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(windows[<span class=\"number\">0</span>] = info[rn].first, <span class=\"number\">0</span>) # 逗号表达式返回后者的值</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>每次处理完一个顾客都需要对所有窗口的时间线进行排序，那么<code>windows[0]</code>即为最早空闲窗口。</p>\n</li>\n</ol>\n","text":"➳ENTRY $\\qquad$Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area ...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"pair","slug":"pair","count":6,"path":"api/tags/pair.json"},{"name":"vector","slug":"vector","count":17,"path":"api/tags/vector.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C☺DE</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">⚡︎ 一些说明</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1018」Public Bike Management","uid":"f49316d46cb145f81e643476c18ee695","slug":"1018-Public-Bike-Management","date":"2022-04-13T00:42:21.000Z","updated":"2022-07-04T03:55:46.505Z","comments":true,"path":"api/articles/1018-Public-Bike-Management.json","keywords":null,"cover":[],"text":"$\\qquad$There is a public bike service in Hangzhou City which provides great convenience to the tourists from all over the world. One may re...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"pair","slug":"pair","count":6,"path":"api/tags/pair.json"},{"name":"vector","slug":"vector","count":17,"path":"api/tags/vector.json"},{"name":"Dijkstra","slug":"Dijkstra","count":6,"path":"api/tags/Dijkstra.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1016」Phone Bills","uid":"4cf831a9ea6bfd5b5d2bee7ee829301b","slug":"1016-Phone-Bills","date":"2022-04-04T03:35:13.000Z","updated":"2022-04-04T04:58:35.193Z","comments":true,"path":"api/articles/1016-Phone-Bills.json","keywords":null,"cover":[],"text":"➳ENTRY $\\qquad$A long-distance telephone company charges its customers by the following rules: $\\qquad$Making a long-distance call costs a c...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}