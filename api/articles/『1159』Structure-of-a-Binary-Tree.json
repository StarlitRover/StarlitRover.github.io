{"title":"『1159』Structure of a Binary Tree","uid":"23a26d9dbfb7f35f39b098e97db54754","slug":"『1159』Structure-of-a-Binary-Tree","date":"2022-12-01T09:44:36.000Z","updated":"2022-12-01T10:03:33.611Z","comments":true,"path":"api/articles/『1159』Structure-of-a-Binary-Tree.json","keywords":null,"cover":null,"content":"<p>Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, a binary tree can be uniquely determined.</p>\n<p>Now given a sequence of statements about the structure of the resulting tree, you are supposed to tell if they are correct or not. A statment is one of the following:</p>\n<ul>\n<li>A is the root</li>\n<li>A and B are siblings</li>\n<li>A is the parent of B</li>\n<li>A is the left child of B</li>\n<li>A is the right child of B</li>\n<li>A and B are on the same level</li>\n<li>It is a full tree</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>Two nodes are <strong>on the same level</strong>, means that they have the same depth.</li>\n<li>A <strong>full binary tree</strong> is a tree in which every node other than the leaves has two children.</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the postorder sequence and the third line gives the inorder sequence. All the numbers in a line are no more than $10^3$ and are separated by a space.</p>\n<p>Then another positive integer M (≤30) is given, followed by M lines of statements. It is guaranteed that both <code>A</code> and <code>B</code> in the statements are in the tree.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each statement, print in a line <code>Yes</code> if it is correct, or <code>No</code> if not.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br><span class=\"line\">16 7 11 32 28 2 23 8 15</span><br><span class=\"line\">16 23 7 32 11 2 28 15 8</span><br><span class=\"line\">7</span><br><span class=\"line\">15 is the root</span><br><span class=\"line\">8 and 2 are siblings</span><br><span class=\"line\">32 is the parent of 11</span><br><span class=\"line\">23 is the left child of 16</span><br><span class=\"line\">28 is the right child of 2</span><br><span class=\"line\">7 and 11 are on the same level</span><br><span class=\"line\">It is a full tree</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes</span><br><span class=\"line\">No</span><br><span class=\"line\">Yes</span><br><span class=\"line\">No</span><br><span class=\"line\">Yes</span><br><span class=\"line\">Yes</span><br><span class=\"line\">Yes</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$给出一棵二叉树的后序、中序遍历，然后判断七种陈述模式的对错。</p>\n<p>$\\qquad$树的节点不超过30个，因此直接搞个结构体存储所有信息——父节点、子节点、深度。而且节点编号不会超过1000，因此直接开个数组存储所有节点的结构体。在递归建树的过程中，记录每个节点的信息，同时如果当前节点只有一个孩子则标记notFull为true。</p>\n<p>$\\qquad$另一个难点是判断陈述模式，我们可以先将整行读入（⚠️不要忘记读完$M$后<code>getchar()</code>），然后按照空格将单词压入数组中，根据语句中的关键词进行判断。⚠️判断顺序尽量按照单词数少的模式到单词数多的模式，如果先判断单词数多模式偏后的关键词可能会导致单词数少模式的越界访问。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; post, in;</span><br><span class=\"line\"><span class=\"type\">bool</span> notFull = <span class=\"literal\">false</span>, ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> parent = <span class=\"number\">-1</span>, depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; sons&#123;<span class=\"number\">-1</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;node&gt; <span class=\"title\">tree</span><span class=\"params\">(<span class=\"number\">1001</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> ps, <span class=\"type\">int</span> pe, <span class=\"type\">int</span> is, <span class=\"type\">int</span> ie)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> bias = <span class=\"built_in\">find</span>(in.<span class=\"built_in\">begin</span>() + is, in.<span class=\"built_in\">begin</span>() + ie, post[pe]) - in.<span class=\"built_in\">begin</span>() - is;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bias &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[post[pe]].sons.first = post[ps + bias - <span class=\"number\">1</span>];</span><br><span class=\"line\">        tree[post[ps + bias - <span class=\"number\">1</span>]].parent = post[pe];</span><br><span class=\"line\">        tree[post[ps + bias - <span class=\"number\">1</span>]].depth = tree[post[pe]].depth + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(ps, ps + bias - <span class=\"number\">1</span>, is, is + bias);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is + bias &lt; ie - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[post[pe]].sons.second = post[pe - <span class=\"number\">1</span>];</span><br><span class=\"line\">        tree[post[pe - <span class=\"number\">1</span>]].parent = post[pe];</span><br><span class=\"line\">        tree[post[pe - <span class=\"number\">1</span>]].depth = tree[post[pe]].depth + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(ps + bias, pe - <span class=\"number\">1</span>, is + bias + <span class=\"number\">1</span>, ie);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    notFull |= (bias &lt; ie - is - <span class=\"number\">1</span>) ^ (bias &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    post.<span class=\"built_in\">resize</span>(n), in.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: post) cin &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: in) cin &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    string st;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i, p = <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vector&lt;string&gt; jdg;</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin, st);</span><br><span class=\"line\">        st.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; st.<span class=\"built_in\">size</span>(); ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (st[j] == <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                jdg.<span class=\"built_in\">push_back</span>(st.<span class=\"built_in\">substr</span>(p, j - p));</span><br><span class=\"line\">                p = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jdg[<span class=\"number\">3</span>] == <span class=\"string\">&quot;root&quot;</span>) ans = <span class=\"built_in\">stoi</span>(jdg[<span class=\"number\">0</span>]) == post.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (jdg[<span class=\"number\">0</span>] == <span class=\"string\">&quot;It&quot;</span>) ans = !notFull;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (jdg[<span class=\"number\">1</span>] == <span class=\"string\">&quot;and&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> &amp;a = tree[<span class=\"built_in\">stoi</span>(jdg[<span class=\"number\">0</span>])], &amp;b = tree[<span class=\"built_in\">stoi</span>(jdg[<span class=\"number\">2</span>])];</span><br><span class=\"line\">            ans = (jdg[<span class=\"number\">4</span>] == <span class=\"string\">&quot;on&quot;</span> ? a.depth == b.depth : a.parent == b.parent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (jdg[<span class=\"number\">3</span>] == <span class=\"string\">&quot;parent&quot;</span>) ans = <span class=\"built_in\">stoi</span>(jdg[<span class=\"number\">0</span>]) == tree[<span class=\"built_in\">stoi</span>(jdg[<span class=\"number\">5</span>])].parent;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ans = (jdg[<span class=\"number\">3</span>] == <span class=\"string\">&quot;left&quot;</span> ? tree[<span class=\"built_in\">stoi</span>(jdg.<span class=\"built_in\">back</span>())].sons.first == <span class=\"built_in\">stoi</span>(jdg[<span class=\"number\">0</span>]) :</span><br><span class=\"line\">                   tree[<span class=\"built_in\">stoi</span>(jdg.<span class=\"built_in\">back</span>())].sons.second == <span class=\"built_in\">stoi</span>(jdg[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, ans ? <span class=\"string\">&quot;Yes&quot;</span> : <span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, a binary tre...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1160」Forever","uid":"75be25fcd9a5cd2b923517296b55a3e7","slug":"「1160」Forever","date":"2022-12-01T12:15:21.000Z","updated":"2022-12-02T07:02:27.053Z","comments":true,"path":"api/articles/「1160」Forever.json","keywords":null,"cover":null,"text":"“Forever number” is a positive integer A with K digits, satisfying the following constrains: the sum of all the digits of A is m; the sum of...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"prime","slug":"prime","count":6,"path":"api/tags/prime.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1158」Telefraud Detection","uid":"7369aa2af707a2b4122dd8865d50ba11","slug":"「1158」Telefraud-Detection","date":"2022-12-01T06:53:52.000Z","updated":"2022-12-01T07:32:42.162Z","comments":true,"path":"api/articles/「1158」Telefraud-Detection.json","keywords":null,"cover":null,"text":"Telefraud（电信诈骗） remains a common and persistent problem in our society. In some cases, unsuspecting victims lose their entire life savings. ...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"DFS","slug":"DFS","count":7,"path":"api/tags/DFS.json"},{"name":"bitset","slug":"bitset","count":4,"path":"api/tags/bitset.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}