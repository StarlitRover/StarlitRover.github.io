{"title":"「1064」Complete Binary Search Tree","uid":"fc7708d5c5ede5940549730140fdd222","slug":"「1064」Complete-Binary-Search-Tree","date":"2022-09-22T08:21:20.000Z","updated":"2022-10-19T10:53:59.490Z","comments":true,"path":"api/articles/「1064」Complete-Binary-Search-Tree.json","keywords":null,"cover":null,"content":"<p>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>\n<li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li>\n<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n<p>A Complete Binary Tree (CBT) is a tree that is completely filled, with the possible exception of the bottom level, which is filled from left to right.</p>\n<p>Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains a positive integer N (≤1000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">1 2 3 4 5 6 7 8 9 0</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 3 8 1 5 7 9 0 2 4</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$给出一组数，输出其完全（最后一层节点从左至右无间隔排列）有序二叉数的层次遍历。</p>\n<p>$\\qquad$首先我们对所有数字进行排序得到序列$a_n$，我们只要按照层次遍历的顺序依次求出每个数在$a_n$中的索引即可，而索引值即为小于该数的数字个数。</p>\n<p>$\\qquad$对于根节点很显然其索引值即为左子树的节点个数，而对于其他节点的索引值计算我们可以分为两部分：</p>\n<ol>\n<li><p>以该节点为根节点的子树，其中小于该数的节点个数依然是左子树节点个数</p>\n</li>\n<li><p>其余部分（CBT-上述子树），这里我们需要分两种情况讨论：</p>\n<ul>\n<li><p>该节点P为某节点的左子节点，那么小于该数的节点个数就是其父节点F的Part 2值，即父节点F的其余部分小于父节点值的节点个数。注意到，P和F的其余部分相比仅多了F本身和F的右子树，即P的兄弟子树，而右子树上的节点和F的值都&gt;P，因此两者是相等的</p>\n</li>\n<li><p>该节点是某节点的右子节点，那么小于该数的节点个数是小于其父节点F的节点个数+1。注意到，父节点F的其余部分与该节点其余部分仅相差F本身与F的左子树，而F的左子树是F的Part 1值，因此将其与F的其余部分相加即为小于F的节点个数，最后再算上F本身+1</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>$\\qquad$首先我们可以计算出每个节点中左右子树的节点个数（自底向上，逐层遍历），用<code>pair&lt;int,int&gt;</code>来存储，然后根据上述分析不难发现计算索引时我们只需用到左子树的节点个数，于是pair.second（原本存储右子树节点个数的部分）就可以用存储Part 2的值。注意到Part 2在计算节点本身索引时不需要用到（子节点需要），所以在计算完索引后顺便更新其pair.second。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, level = <span class=\"number\">1</span>, prod = <span class=\"number\">2</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (prod &lt; n + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        prod *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        level += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; node_num;</span><br><span class=\"line\">    node_num.<span class=\"built_in\">resize</span>(prod - <span class=\"number\">1</span>, <span class=\"built_in\">pair</span>(<span class=\"number\">0</span>, <span class=\"number\">-1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = prod / <span class=\"number\">2</span> - <span class=\"number\">1</span>; i &lt; n; ++i)</span><br><span class=\"line\">        node_num[i] = std::<span class=\"built_in\">move</span>(<span class=\"built_in\">pair</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = prod / <span class=\"number\">4</span>; i &gt; <span class=\"number\">0</span>; i /= <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j &lt; <span class=\"number\">2</span> * i - <span class=\"number\">1</span>; ++j)</span><br><span class=\"line\">            node_num[j] = std::<span class=\"built_in\">move</span>(<span class=\"built_in\">pair</span>(node_num[<span class=\"number\">2</span> * j + <span class=\"number\">1</span>].first + node_num[<span class=\"number\">2</span> * j + <span class=\"number\">1</span>].second + <span class=\"number\">1</span>,</span><br><span class=\"line\">                                         node_num[<span class=\"number\">2</span> * j + <span class=\"number\">2</span>].first + node_num[<span class=\"number\">2</span> * j + <span class=\"number\">2</span>].second + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">keys</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: keys)</span><br><span class=\"line\">        cin &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(keys.<span class=\"built_in\">begin</span>(), keys.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    cout &lt;&lt; keys[node_num[<span class=\"number\">0</span>].first];</span><br><span class=\"line\">    node_num[<span class=\"number\">0</span>].second = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> idx = (i % <span class=\"number\">2</span> ? node_num[i / <span class=\"number\">2</span>].first + <span class=\"number\">1</span> : <span class=\"number\">0</span>) + node_num[i / <span class=\"number\">2</span>].second + node_num[i + <span class=\"number\">1</span>].first;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; keys[idx];</span><br><span class=\"line\">        node_num[i + <span class=\"number\">1</span>].second = idx - node_num[i + <span class=\"number\">1</span>].first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"π\">Π</span></h2><p>$\\qquad$上述的思考模式又是一种逆推的过程，多少有点反人类。仔细观察能够发现有序二叉树的中序遍历即为排序结果，那么题目就能转化为已知二叉树的中序遍历如何求其层次遍历的问题。那么我们就顺势而为，模拟一遍中序遍历，然后在模拟过程中顺便计算每个节点在层次遍历中的索引，然后根据索引进行赋值即可。简单地说，就是站在层次遍历的角度去做中序遍历。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; level, keys;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InOrder</span><span class=\"params\">(<span class=\"type\">int</span> node)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node &gt;= n) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">InOrder</span>(<span class=\"number\">2</span> * node + <span class=\"number\">1</span>);</span><br><span class=\"line\">    level[node] = keys[idx++];</span><br><span class=\"line\">    <span class=\"built_in\">InOrder</span>(<span class=\"number\">2</span> * node + <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    keys.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    level.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: keys)</span><br><span class=\"line\">        cin &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(keys.<span class=\"built_in\">begin</span>(), keys.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">InOrder</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; level.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">        cout &lt;&lt; (i == <span class=\"number\">0</span> ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot; &quot;</span>) &lt;&lt; level[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties: The left subtree of a node contains o...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Π</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1065」A+B and C (64bit)","uid":"42e41f54cdd74aae9e65b00439b07d2c","slug":"「1065」A-B-and-C-64bit","date":"2022-09-24T03:10:52.000Z","updated":"2022-09-24T03:25:09.213Z","comments":true,"path":"api/articles/「1065」A-B-and-C-64bit.json","keywords":null,"cover":null,"text":"Given three integers A, B and C in $(−2^{63},2^{63})$, you are supposed to tell whether A+B&gt;C. Input Specification:The first line of the ...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1063」Set Similarity","uid":"70201c87e9f11a4fa65c8ac00911ccba","slug":"「1063」Set-Similarity","date":"2022-09-21T08:11:18.000Z","updated":"2022-09-21T09:21:12.296Z","comments":true,"path":"api/articles/「1063」Set-Similarity.json","keywords":null,"cover":null,"text":"Given two sets of integers, the similarity of the sets is defined to be $N_c​&#x2F;N_t​×100%$, where $N_c$​ is the number of distinct common...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}