{"title":"『1150」Travelling Salesman Problem","uid":"a4815f6ae46beab8c783f42705d05394","slug":"『1150」Travelling-Salesman-Problem","date":"2022-11-28T12:44:21.000Z","updated":"2022-12-02T15:17:27.740Z","comments":true,"path":"api/articles/『1150」Travelling-Salesman-Problem.json","keywords":null,"cover":null,"content":"<p>The “travelling salesman problem” asks the following question: “Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?” It is an NP-hard problem in combinatorial optimization, important in operations research and theoretical computer science. (Quoted from “<a href=\"https://en.wikipedia.org/wiki/Travelling_salesman_problem\">https://en.wikipedia.org/wiki/Travelling_salesman_problem</a>“.)</p>\n<p>In this problem, you are supposed to find, from a given list of cycles, the one that is the closest to the solution of a travelling salesman problem.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains 2 positive integers N (2&lt;N≤200), the number of cities, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format <code>City1 City2 Dist</code>, where the cities are numbered from 1 to N and the distance <code>Dist</code> is positive and is no more than 100. The next line gives a positive integer K which is the number of paths, followed by K lines of paths, each in the format:</p>\n<p>n C1​ C2​ … Cn​</p>\n<p>where n is the number of cities in the list, and Ci​’s are the cities on a path.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each path, print in a line <code>Path X: TotalDist (Description)</code> where <code>X</code> is the index (starting from 1) of that path, <code>TotalDist</code> its total distance (if this distance does not exist, output <code>NA</code> instead), and <code>Description</code> is one of the following:</p>\n<ul>\n<li><code>TS simple cycle</code> if it is a simple cycle that visits every city;</li>\n<li><code>TS cycle</code> if it is a cycle that visits every city, but not a simple cycle;</li>\n<li><code>Not a TS cycle</code> if it is NOT a cycle that visits every city.</li>\n</ul>\n<p>Finally print in a line <code>Shortest Dist(X) = TotalDist</code> where <code>X</code> is the index of the cycle that is the closest to the solution of a travelling salesman problem, and <code>TotalDist</code> is its total distance. It is guaranteed that such a solution is unique.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 10</span><br><span class=\"line\">6 2 1</span><br><span class=\"line\">3 4 1</span><br><span class=\"line\">1 5 1</span><br><span class=\"line\">2 5 1</span><br><span class=\"line\">3 1 8</span><br><span class=\"line\">4 1 6</span><br><span class=\"line\">1 6 1</span><br><span class=\"line\">6 3 1</span><br><span class=\"line\">1 2 1</span><br><span class=\"line\">4 5 1</span><br><span class=\"line\">7</span><br><span class=\"line\">7 5 1 4 3 6 2 5</span><br><span class=\"line\">7 6 1 3 4 5 2 6</span><br><span class=\"line\">6 5 1 4 3 6 2</span><br><span class=\"line\">9 6 2 1 6 3 4 5 2 6</span><br><span class=\"line\">4 1 2 5 1</span><br><span class=\"line\">7 6 1 2 5 4 3 1</span><br><span class=\"line\">7 6 3 2 5 4 1 6</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Path 1: 11 (TS simple cycle)</span><br><span class=\"line\">Path 2: 13 (TS simple cycle)</span><br><span class=\"line\">Path 3: 10 (Not a TS cycle)</span><br><span class=\"line\">Path 4: 8 (TS cycle)</span><br><span class=\"line\">Path 5: 3 (Not a TS cycle)</span><br><span class=\"line\">Path 6: 13 (Not a TS cycle)</span><br><span class=\"line\">Path 7: NA (Not a TS cycle)</span><br><span class=\"line\">Shortest Dist(4) = 8</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$TSP是一个NP难问题，这一题需要你判断给定无向图中的一些路径是以下三种中的哪种：</p>\n<ol>\n<li><p>TS 简单环：每座城市访问过且仅访问过一次</p>\n</li>\n<li><p>TS 环：每座城市都访问过，但部分城市多次$(&gt;1)$访问</p>\n</li>\n<li><p>非TS环：部分城市没有访问，或根本不是环，或路线不存在</p>\n</li>\n</ol>\n<p>$\\qquad$注意如果不是路线不存在，所有的路线都需要输出总长度，而最优路线只能从TS simple cycle和TS cycle中选。用一个<code>bitset&lt;201&gt;</code>来标记城市是否访问过，用整型变量<code>jdg</code>的低两位分别来表示具备TS cycle（重复访问城市）和Not a TS cycle的特征（有城市没访问、不是环路、路线不存在），显然当$jdg&#x3D;(01)_2$时说明是前者的情况，而$jdg&#x3D;(10)_2\\ \\mathrm{or}\\ jdg&#x3D;(11)_2$都是后者。读入路线的过程中，判断是否重复访问，同时检查路线是否存在。读完之后判断起点和终点是否相同，是否所有城市都已访问。最后根据jdg的值输出相应的信息。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, k, a, b, p, d = <span class=\"number\">0</span>, jdg = <span class=\"number\">0</span>, opt = <span class=\"number\">-1</span>, min_d = INT32_MAX;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dist</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; dist[b][a], dist[a][b] = dist[b][a];</span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i, d = <span class=\"number\">0</span>, jdg = <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">bitset&lt;201&gt; <span class=\"title\">flag</span><span class=\"params\">(string(n, <span class=\"string\">&#x27;1&#x27;</span>))</span></span>;</span><br><span class=\"line\">        cin &gt;&gt; k &gt;&gt; a, p = a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; k; ++j, p = b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; b;</span><br><span class=\"line\">            <span class=\"comment\">// if revisit city and visit non-existent road</span></span><br><span class=\"line\">            jdg |= !flag[b - <span class=\"number\">1</span>] + (dist[p][b] ? <span class=\"number\">0</span> : (d = <span class=\"number\">-1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">            d += (d &gt; <span class=\"number\">-1</span>) * dist[p][b], flag[b - <span class=\"number\">1</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// if starting city is same as ending city and all the cities have been visited</span></span><br><span class=\"line\">        jdg |= (a == b &amp;&amp; flag == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (jdg)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Path %d: %d (TS simple cycle)\\n&quot;</span>, i + <span class=\"number\">1</span>, d);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d &lt; min_d) min_d = d, opt = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Path %d: %d (TS cycle)\\n&quot;</span>, i + <span class=\"number\">1</span>, d);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d &lt; min_d) min_d = d, opt = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d &gt; <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Path %d: %d (Not a TS cycle)\\n&quot;</span>, i + <span class=\"number\">1</span>, d);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Path %d: NA (Not a TS cycle)\\n&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Shortest Dist(%d) = %d&quot;</span>, opt, min_d);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"The “travelling salesman problem” asks the following question: “Given a list of cities and the distances between each pair of cities, what i...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"},{"name":"TSP","slug":"TSP","count":2,"path":"api/tags/TSP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1151』LCA in a Binary Tree","uid":"1e6798c1367bb43a43c504bc91548d12","slug":"「1151』LCA-in-a-Binary-Tree","date":"2022-11-28T14:12:07.000Z","updated":"2022-11-28T14:29:58.570Z","comments":true,"path":"api/articles/「1151』LCA-in-a-Binary-Tree.json","keywords":null,"cover":null,"text":"The lowest common ancestor (LCA) of two nodes U and V in a tree is the deepest node that has both U and V as descendants. Given any two node...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"『1149』Dangerous Goods Packaging","uid":"ff3134335de30a822a5e1c46f95fdfc6","slug":"『1149』Dangerous-Goods-Packaging","date":"2022-11-28T10:26:29.000Z","updated":"2022-11-28T14:36:11.446Z","comments":true,"path":"api/articles/『1149』Dangerous-Goods-Packaging.json","keywords":null,"cover":null,"text":"When shipping goods with containers, we have to be careful not to pack some incompatible goods into the same container, or we might get ours...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"bitset","slug":"bitset","count":4,"path":"api/tags/bitset.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}