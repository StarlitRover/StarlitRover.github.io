{"title":"「1051」Pop Sequence","uid":"78ee87089723b81f295cec55a974e19f","slug":"「1051」Pop-Sequence","date":"2022-09-01T13:57:33.000Z","updated":"2022-09-01T15:23:28.639Z","comments":true,"path":"api/articles/「1051」Pop-Sequence.json","keywords":null,"cover":null,"content":"<p>Given a stack which can keep M numbers at most. Push N numbers in the order of 1, 2, 3, …, N and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. For example, if M is 5 and N is 7, we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, but not 3, 2, 1, 7, 5, 6, 4.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains 3 numbers (all no more than 1000): M (the maximum capacity of the stack), N (the length of push sequence), and K (the number of pop sequences to be checked). Then K lines follow, each contains a pop sequence of N numbers. All the numbers in a line are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each pop sequence, print in one line “YES” if it is indeed a possible pop sequence of the stack, or “NO” if not.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 7 5</span><br><span class=\"line\">1 2 3 4 5 6 7</span><br><span class=\"line\">3 2 1 7 5 6 4</span><br><span class=\"line\">7 6 5 4 3 2 1</span><br><span class=\"line\">5 6 4 3 7 2 1</span><br><span class=\"line\">1 7 6 5 4 3 2</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES</span><br><span class=\"line\">NO</span><br><span class=\"line\">NO</span><br><span class=\"line\">YES</span><br><span class=\"line\">NO</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2><span id=\"ω\">Ω</span></h2><hr>\n<p>$\\qquad$难得见到的栈题，数字1-N依次入栈，给出K组出栈序列和栈的最大容量$m$，判断它们是否可行。</p>\n<p>$\\qquad$首先分析$k$出栈意味着所有比$k$小的数字都已入过栈，由此为突破口切入。我们可以用pair$(m,n)$来表示栈中的一串连续数字$m,m+1,\\cdots,n-1,n$，然后我们设立一个模拟栈sim和两个变量：top——当前栈顶元素；exp——还未进栈的最小元素，接下来根据读入的数字$s$判断是压入数字串还是出栈：</p>\n<ul>\n<li><p>$top&#x3D;&#x3D;s$：出栈</p>\n</li>\n<li><p>$s&gt;exp$：压入数字串$(exp,s-1)$（因为是出栈序列，所以$s$已出栈，但考虑栈此时的容量时必须算上$s$），更新$top、exp$</p>\n</li>\n<li><p>$s&#x3D;&#x3D;exp$：无需改变栈sim，但需要更新$exp$</p>\n</li>\n<li><p>$else$：不存在的出栈情况，如果一开始没有读入全部的出栈序列就不能直接break，因为后面还没读完</p>\n</li>\n</ul>\n<br>\n\n<p>$\\qquad$事实上，上述算法是一种逆向模拟过程，思考起来相对反人类，还有一种正向思路。由于入栈顺序肯定是1-N，那么就模拟入栈过程，将1-N逐一压栈，在压栈的过程中顺便比对出栈序列，当发现压栈数字和出栈序列当前数字吻合时，开始出栈，并将出栈序列的索引号向后移动直到栈顶元素与出栈序列当前索引元素不符，另外每次压栈时都要检查栈容量是否符合要求。最后若栈空就说明“YES”。</p>\n<br>\n\n<h2><span id>🐎</span></h2><hr>\n<h3><span id>⥂⥂⥂</span></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, k, s;</span><br><span class=\"line\">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        stack&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; sim;</span><br><span class=\"line\">        <span class=\"type\">int</span> top = <span class=\"number\">0</span>, exp = <span class=\"number\">1</span>, size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!flag) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (top == s)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sim.<span class=\"built_in\">top</span>().first == sim.<span class=\"built_in\">top</span>().second)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    sim.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    top = sim.<span class=\"built_in\">empty</span>() ? <span class=\"number\">0</span> : sim.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    sim.<span class=\"built_in\">top</span>().second = (--top);</span><br><span class=\"line\">                size -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s &gt; exp)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sim.<span class=\"built_in\">emplace</span>(exp, s - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((size + s - exp + <span class=\"number\">1</span>) &gt; m)</span><br><span class=\"line\">                    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> size += (s - exp);</span><br><span class=\"line\">                top = s - <span class=\"number\">1</span>;</span><br><span class=\"line\">                exp = s + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s == exp)</span><br><span class=\"line\">                exp += <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; (flag ? <span class=\"string\">&quot;YES&quot;</span> : <span class=\"string\">&quot;NO&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id>⥬⥬⥬</span></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, k;</span><br><span class=\"line\">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">seq</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; sim;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;s: seq)</span><br><span class=\"line\">            cin &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"type\">int</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sim.<span class=\"built_in\">push</span>(j + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sim.<span class=\"built_in\">size</span>() &gt; m) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!sim.<span class=\"built_in\">empty</span>() &amp;&amp; sim.<span class=\"built_in\">top</span>() == seq[idx])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sim.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                ++idx;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; (sim.<span class=\"built_in\">empty</span>() ? <span class=\"string\">&quot;YES&quot;</span> : <span class=\"string\">&quot;NO&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Given a stack which can keep M numbers at most. Push N numbers in the order of 1, 2, 3, …, N and pop randomly. You are supposed to tell if a...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"stack","slug":"stack","count":3,"path":"api/tags/stack.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">⥂⥂⥂</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">⥬⥬⥬</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1052」Linked List Sorting","uid":"3f7468577cc2a85a47786082d8825b1f","slug":"「1052」Linked-List-Sorting","date":"2022-09-02T01:38:56.000Z","updated":"2022-09-03T14:16:28.092Z","comments":true,"path":"api/articles/「1052」Linked-List-Sorting.json","keywords":null,"cover":null,"text":"A linked list consists of a series of structures, which are not necessarily adjacent in memory. We assume that each structure contains an in...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"list","slug":"list","count":5,"path":"api/tags/list.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1050」String Subtraction","uid":"2b81f5e1a24a7a3ee74c167bb705ac9b","slug":"「1050」String-Subtraction","date":"2022-09-01T09:19:53.000Z","updated":"2022-09-01T09:26:57.340Z","comments":true,"path":"api/articles/「1050」String-Subtraction.json","keywords":null,"cover":null,"text":"Given two strings S1​ and S2​, S&#x3D;S1​−S2​ is defined to be the remaining string after taking all the characters in S2​ from S1​. Your ta...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}