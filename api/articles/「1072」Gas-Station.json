{"title":"「1072」Gas Station","uid":"74ba177c21feee6c064587dc81699431","slug":"「1072」Gas-Station","date":"2022-10-05T10:12:26.000Z","updated":"2022-10-11T06:44:55.702Z","comments":true,"path":"api/articles/「1072」Gas-Station.json","keywords":null,"cover":[],"content":"<p>A gas station has to be built at such a location that the minimum distance between the station and any of the residential housing is as far away as possible. However it must guarantee that all the houses are in its service range.</p>\n<p>Now given the map of the city and several candidate locations for the gas station, you are supposed to give the best recommendation. If there are more than one solution, output the one with the smallest average distance to all the houses. If such a solution is still not unique, output the one with the smallest index number.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains 4 positive integers: $N (≤10^3)$, the total number of houses; M (≤10), the total number of the candidate locations for the gas stations; $K (≤10^4)$, the number of roads connecting the houses and the gas stations; and DS​, the maximum service range of the gas station. It is hence assumed that all the houses are numbered from 1 to N, and all the candidate locations are numbered from <code>G</code>1 to <code>G</code>M.</p>\n<p>Then K lines follow, each describes a road in the format</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P1 P2 Dist</span><br></pre></td></tr></table></figure>\n\n<p>where <code>P1</code> and <code>P2</code> are the two ends of a road which can be either house numbers or gas station numbers, and <code>Dist</code> is the integer length of the road.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in the first line the index number of the best location. In the next line, print the minimum and the average distances between the solution and all the houses. The numbers in a line must be separated by a space and be accurate up to 1 decimal place. If the solution does not exist, simply output <code>No Solution</code>.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 3 11 5</span><br><span class=\"line\">1 2 2</span><br><span class=\"line\">1 4 2</span><br><span class=\"line\">1 G1 4</span><br><span class=\"line\">1 G2 3</span><br><span class=\"line\">2 3 2</span><br><span class=\"line\">2 G2 1</span><br><span class=\"line\">3 4 2</span><br><span class=\"line\">3 G3 2</span><br><span class=\"line\">4 G1 3</span><br><span class=\"line\">G2 G1 1</span><br><span class=\"line\">G3 G2 2</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G1</span><br><span class=\"line\">2.0 3.3</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 1 2 10</span><br><span class=\"line\">1 G1 9</span><br><span class=\"line\">2 G1 20</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No Solution</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$加油站选址问题，给出一个房子和加油站备选地点的有权无向图，我们需要从可选地点中选择一个最优地点，使加油站到所有房子的最小距离最大（可能不希望来往车辆噪声影响居民），但也需要所有房子在服务距离$D_S$内（同时不忘获利最大）。如果有多个最优解则选择与房子之间平均距离最短的解，若依然有多个就选择序号最小的地点。</p>\n<p>$\\qquad$第一个麻烦鬼是输入中的加油站处理，对于$Gx$直接把G叉出去转成数字后+N。然后对每个加油站选址采取Dijkstra算法，一旦有节点的最短距离$&gt;D_S$就break并直接进入下一个选址。如果所有房子都在服务范围内，那么再与最优解依次比较最短距离（bigger）和平均距离（smaller）。</p>\n<p>$\\qquad$其实整体思路不难，但Sample就搞人心态。注意到Sample 1中的3.3，其实本来是3.25，这里进行了四舍五入。于是乎我在最后输出平均距离的时候加了个0.05，结果case 4炸了，把0.05去掉却过了，而Sample 1输出3.2。是不是有什么大病？</p>\n<hr>\n<h4><span id=\"106-续\">10.6 续</span></h4><p>$\\qquad$ummm我知道原因了家人们。跑了下网上前几个题解，大部分Sample 1的运行结果是3.2，有一个是3.3。Amazing，我赶忙看了波他的四舍五入，他用了cmath库中的round函数：<code>round(avg*10)/10</code>，确实也通过了所有测试点。</p>\n<p>$\\qquad$我不禁陷入了沉思，莫非…按照我的思路做了个测试：</p>\n<img title src=\"/images/PAT(Advanced%20level)%20Practice/1072/1.png\" alt data-align=\"center\" width=\"399\">\n\n<p>$\\qquad$果不其然，是因为浮点数运算的精度误差导致的。另外浮点数运算时都是转成double参与运算的，因此double结果也一样。看来0.05还是不靠谱啊，四舍五入就得round。</p>\n<hr>\n<h4><span id=\"1011-续\">10.11 续</span></h4><p>$\\qquad$蚌埠住了家人们，<code>&quot;%.nf&quot;</code>也是四舍五入，见<a href=\"/post/%E3%80%8C1079%E3%80%8DTotal-Sales-of-Supply-Chain.html\" title=\"「1079」Total Sales of Supply Chain\">「1079」Total Sales of Supply Chain</a>，补课去了。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, k, ds, p1, p2, d;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; ds;</span><br><span class=\"line\">    vector&lt;map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dist</span>(n + m + <span class=\"number\">1</span>);</span><br><span class=\"line\">    string a, b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; d;</span><br><span class=\"line\">        p1 = a[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;G&#x27;</span> ? <span class=\"built_in\">stoi</span>(a.<span class=\"built_in\">substr</span>(<span class=\"number\">1</span>, a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>)) + n : <span class=\"built_in\">stoi</span>(a);</span><br><span class=\"line\">        p2 = b[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;G&#x27;</span> ? <span class=\"built_in\">stoi</span>(b.<span class=\"built_in\">substr</span>(<span class=\"number\">1</span>, b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>)) + n : <span class=\"built_in\">stoi</span>(b);</span><br><span class=\"line\">        dist[p1][p2] = dist[p2][p1] = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tuple&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">float</span>&gt; ans&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, INT32_MAX&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n + <span class=\"number\">1</span>; i &lt; m + n + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">min_dist</span><span class=\"params\">(n + m + <span class=\"number\">1</span>, INT32_MAX)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">isVisited</span><span class=\"params\">(n + m + <span class=\"number\">1</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">        isVisited[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v: dist[i])</span><br><span class=\"line\">            min_dist[v.first] = v.second;</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = n, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cnt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> min = INT32_MAX, idx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; n + m + <span class=\"number\">1</span>; ++j)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isVisited[j] &amp;&amp; min_dist[j] &lt; min)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    min = min_dist[j];</span><br><span class=\"line\">                    idx = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (min &gt; ds) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v: dist[idx])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isVisited[v.first] &amp;&amp; v.second + min &lt; min_dist[v.first])</span><br><span class=\"line\">                    min_dist[v.first] = v.second + min;</span><br><span class=\"line\">            isVisited[idx] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            cnt -= (idx &lt;= n ? (sum += min, <span class=\"number\">1</span>) : <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cnt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> dmin = *<span class=\"built_in\">min_element</span>(min_dist.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>, min_dist.<span class=\"built_in\">begin</span>() + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">float</span> avg = <span class=\"number\">1.0</span> * sum / n;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dmin &gt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(ans) || dmin == <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(ans) &amp;&amp; avg &lt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(ans))</span><br><span class=\"line\">                ans = &#123;i - n, dmin, avg&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(ans))</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;G%d\\n%.1f %.1f&quot;</span>, <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(ans), <span class=\"built_in\">float</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(ans)), <span class=\"built_in\">round</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(ans) * <span class=\"number\">10</span>) / <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No Solution&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"A gas station has to be built at such a location that the minimum distance between the station and any of the residential housing is as far ...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"},{"name":"Dijkstra","slug":"Dijkstra","count":6,"path":"api/tags/Dijkstra.json"},{"name":"min_element","slug":"min-element","count":2,"path":"api/tags/min-element.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">10.6 续</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">10.11 续</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1073」Scientific Notation","uid":"489d94365958188264d5e930f4f52aca","slug":"「1073」Scientific-Notation","date":"2022-10-05T15:29:56.000Z","updated":"2022-10-06T07:12:29.808Z","comments":true,"path":"api/articles/「1073」Scientific-Notation.json","keywords":null,"cover":null,"text":"Scientific notation is the way that scientists easily handle very large numbers or very small numbers. The notation matches the regular expr...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1071」Speech Patterns","uid":"7e7e82299d0e2e6bf939755399447a21","slug":"「1071」Speech-Patterns","date":"2022-09-29T06:36:48.000Z","updated":"2022-10-05T11:24:04.554Z","comments":true,"path":"api/articles/「1071」Speech-Patterns.json","keywords":null,"cover":null,"text":"People often have a preference among synonyms of the same word. For example, some may prefer “the police”, while others may prefer “the cops...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}