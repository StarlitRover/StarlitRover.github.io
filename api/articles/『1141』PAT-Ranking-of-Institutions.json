{"title":"『1141』PAT Ranking of Institutions","uid":"324ab5351ee7cff7d5b7ed1cb7ec626b","slug":"『1141』PAT-Ranking-of-Institutions","date":"2022-11-26T07:20:45.000Z","updated":"2022-11-26T07:33:43.168Z","comments":true,"path":"api/articles/『1141』PAT-Ranking-of-Institutions.json","keywords":null,"cover":null,"content":"<p>After each PAT, the PAT Center will announce the ranking of institutions based on their students’ performances. Now you are asked to generate the ranklist.</p>\n<span id=\"more\"></span>\n\n<!--more-->\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤105), which is the number of testees. Then N lines follow, each gives the information of a testee in the following format:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID Score School</span><br></pre></td></tr></table></figure>\n\n<p>where <code>ID</code> is a string of 6 characters with the first one representing the test level: <code>B</code> stands for the basic level, <code>A</code> the advanced level and <code>T</code> the top level; <code>Score</code> is an integer in [0, 100]; and <code>School</code> is the institution code which is a string of no more than 6 English letters (case insensitive). Note: it is guaranteed that <code>ID</code> is unique for each testee.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each case, first print in a line the total number of institutions. Then output the ranklist of institutions in nondecreasing order of their ranks in the following format:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rank School TWS Ns</span><br></pre></td></tr></table></figure>\n\n<p>where <code>Rank</code> is the rank (start from 1) of the institution; <code>School</code> is the institution code (all in lower case); ; <code>TWS</code> is the <strong>total weighted score</strong> which is defined to be the integer part of <code>ScoreB/1.5 + ScoreA + ScoreT*1.5</code>, where <code>ScoreX</code> is the total score of the testees belong to this institution on level <code>X</code>; and <code>Ns</code> is the total number of testees who belong to this institution.</p>\n<p>The institutions are ranked according to their <code>TWS</code>. If there is a tie, the institutions are supposed to have the same rank, and they shall be printed in ascending order of <code>Ns</code>. If there is still a tie, they shall be printed in alphabetical order of their codes.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">A57908 85 Au</span><br><span class=\"line\">B57908 54 LanX</span><br><span class=\"line\">A37487 60 au</span><br><span class=\"line\">T28374 67 CMU</span><br><span class=\"line\">T32486 24 hypu</span><br><span class=\"line\">A66734 92 cmu</span><br><span class=\"line\">B76378 71 AU</span><br><span class=\"line\">A47780 45 lanx</span><br><span class=\"line\">A72809 100 pku</span><br><span class=\"line\">A03274 45 hypu</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1 cmu 192 2</span><br><span class=\"line\">1 au 192 3</span><br><span class=\"line\">3 pku 100 1</span><br><span class=\"line\">4 hypu 81 2</span><br><span class=\"line\">4 lanx 81 2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$为PAT的团体成绩进行排序，给出每个考生的准考证号、成绩、学校代号，最终学校团体成绩按照$Score_B&#x2F;1.5 + Score_A + 1.5Score_T$，ABT代表三个不同的考试等级，$Score_X$表示这个学校参加X等级考试的考生成绩总和。最终结果按团体成绩降序排列，并给出相应名次，如果总成绩相同就按照参与人数的升序排列，如果人数也一致就按照学校代码升序排列。</p>\n<p>$\\qquad$先用一个<code>map&lt;string, tuple&lt;int, int, int, int&gt;&gt;</code>建立学校代码到BAT考试成绩总和以及考生人数的映射。然后计算每个学校的团体成绩，并将学校代码、考生人数一并存入<code>vector&lt;tuple&lt;string, int, int&gt;&gt;</code>，然后根据排序要求给定cmp函数进行sort。最后依次输出相关信息。如果团体成绩与上一个学校一样，那么名次不变，否则&#x3D;下标+1。</p>\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> tuple&lt;string, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; tsii;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string id, school;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, s, r = <span class=\"number\">0</span>, p = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    map&lt;string, tuple&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; score;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; id &gt;&gt; s &gt;&gt; school;</span><br><span class=\"line\">        <span class=\"built_in\">transform</span>(school.<span class=\"built_in\">begin</span>(), school.<span class=\"built_in\">end</span>(), school.<span class=\"built_in\">begin</span>(), ::tolower);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (id[<span class=\"number\">0</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(score[school]) += s;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(score[school]) += s;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;T&#x27;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(score[school]) += s;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++<span class=\"built_in\">get</span>&lt;<span class=\"number\">3</span>&gt;(score[school]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;tsii&gt; tws;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t: score)</span><br><span class=\"line\">        tws.<span class=\"built_in\">emplace_back</span>(t.first, <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(t.second) / <span class=\"number\">1.5</span> + <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(t.second) + <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(t.second) * <span class=\"number\">1.5</span>, <span class=\"built_in\">get</span>&lt;<span class=\"number\">3</span>&gt;(t.second));</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(tws.<span class=\"built_in\">begin</span>(), tws.<span class=\"built_in\">end</span>(), [](tsii &amp;a, tsii &amp;b) &#123;<span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(a) == <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(b) ?</span><br><span class=\"line\">          <span class=\"built_in\">make_pair</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(a), <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(a)) &lt; <span class=\"built_in\">make_pair</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(b), <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(b)) : <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(a) &gt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(b);&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%zu\\n&quot;</span>, tws.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; tws.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r = (<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(tws[i]) == p) ? r : (p = <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(tws[i]), i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %s %d %d\\n&quot;</span>, r, <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(tws[i]).<span class=\"built_in\">c_str</span>(), <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(tws[i]), <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(tws[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"After each PAT, the PAT Center will announce the ranking of institutions based on their students’ performances. Now you are asked to generat...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1142」Maximal Clique","uid":"fd7ce911047e09d73f8229b416cde491","slug":"「1142」Maximal-Clique","date":"2022-11-27T07:38:11.000Z","updated":"2022-11-27T07:51:21.941Z","comments":true,"path":"api/articles/「1142」Maximal-Clique.json","keywords":null,"cover":null,"text":"A clique is a subset of vertices of an undirected graph such that every two distinct vertices in the clique are adjacent. A maximal clique i...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1140」Look-and-say Sequence","uid":"7df29c755cdde6fc07511e582be256da","slug":"「1140」Look-and-say-Sequence","date":"2022-11-26T05:03:10.000Z","updated":"2022-11-26T07:23:43.651Z","comments":true,"path":"api/articles/「1140」Look-and-say-Sequence.json","keywords":null,"cover":null,"text":"Look-and-say sequence is a sequence of integers as the following: 1D, D1, D111, D113, D11231, D112213111, ... where D is in [0, 9] except 1....","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}