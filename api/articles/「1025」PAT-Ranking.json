{"title":"「1025」PAT Ranking","uid":"9d68ae743a5d7221c7dc3eed3cb529a9","slug":"「1025」PAT-Ranking","date":"2022-07-17T15:53:20.000Z","updated":"2022-07-17T16:12:03.064Z","comments":true,"path":"api/articles/「1025」PAT-Ranking.json","keywords":null,"cover":null,"content":"<p><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805474338127872\">➳ENTRY</a></p>\n<p>Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is supposed to run simultaneously in several places, and the ranklists will be merged immediately after the test. Now it is your job to write a program to correctly merge all the ranklists and generate the final rank.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains a positive number N (≤100), the number of test locations. Then N ranklists follow, each starts with a line containing a positive integer K (≤300), the number of testees, and then K lines containing the registration number (a 13-digit number) and the total score of each testee. All the numbers in a line are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, first print in one line the total number of testees. Then print the final ranklist in the following format:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">registration_number final_rank location_number local_rank<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>The locations are numbered from 1 to N. The output must be sorted in nondecreasing order of the final ranks. The testees with the same score must have the same rank, and the output must be sorted in nondecreasing order of their registration numbers.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><pre class=\"line-numbers language-in\" data-language=\"in\"><code class=\"language-in\">2\n5\n1234567890001 95\n1234567890005 100\n1234567890003 95\n1234567890002 77\n1234567890004 85\n4\n1234567890013 65\n1234567890011 25\n1234567890014 100\n1234567890012 85<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><pre class=\"line-numbers language-out\" data-language=\"out\"><code class=\"language-out\">9\n1234567890005 1 1 1\n1234567890014 1 2 1\n1234567890001 3 1 2\n1234567890003 3 1 2\n1234567890004 5 1 4\n1234567890012 5 2 2\n1234567890002 7 1 5\n1234567890013 8 2 3\n1234567890011 9 2 4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>PAT考试有多个考场，现给出考场个数以及每个考场内考生的考号与成绩，需要你输出考生总数并按名次从高到低输出考生的考号、总排名、考场号、考场排名，分数相同则按学号升序排列。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>注意到考场内排名和总排名计算方式是一致的，只需要考虑数据结构如何设计。最后既然是按照分数降序排列，那么我们可以用<code>map&lt;score(int),set&lt;registration number(string)&gt; &gt;</code>来存储，即以分数为键值索引得到获得该分数的考生学号集合。对于考场内排名的获取，我们只需先存在一个小<code>map</code>中，计算出排名后将其加入大<code>map</code>中，最后在大<code>map</code>中计算总排名即可。</p>\n<hr>\n<h2><span id=\"c-d-e\">C ☺ D E</span></h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">;</span>\n    string s<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> n<span class=\"token punctuation\">;</span>\n    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> set<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;&gt;</span> score<span class=\"token punctuation\">,</span> loc_score<span class=\"token punctuation\">;</span>\n    map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> loc<span class=\"token punctuation\">,</span> loc_rank<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">&gt;&gt;</span> k<span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">+=</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">&gt;&gt;</span> s <span class=\"token operator\">&gt;&gt;</span> r<span class=\"token punctuation\">;</span>\n            loc<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            loc_score<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        rank <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>u<span class=\"token operator\">:</span> loc_score<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>v<span class=\"token operator\">:</span> u<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span>\n                loc_rank<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">;</span>\n            rank <span class=\"token operator\">+=</span> u<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">:</span> loc_score<span class=\"token punctuation\">)</span>\n            score<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        loc_score<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    rank <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>u<span class=\"token operator\">:</span> score<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>v<span class=\"token operator\">:</span> u<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> rank <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> loc<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> loc_rank<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        rank <span class=\"token operator\">+=</span> u<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3><span id=\"tips\">∅ Tips</span></h3><ol>\n<li><p><code>map&lt;key,value,greater&lt;&gt;&gt;</code>可以使<code>map</code>中的键值按照降序存储</p>\n</li>\n<li><p><code>map1.insert(map2.begin(),map2.end())</code>可以将两个map合并，本质只会将map2中存在map1中不存在的键值补充到map1，对于两者共有的键值，map1保持原值。</p>\n<p>这里我们需要合并键值相同的两个集合，因此不能直接用<code>insert</code></p>\n</li>\n</ol>\n","text":"➳ENTRY Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is su...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C ☺ D E</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">∅ Tips</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1026」Table Tennis","uid":"410d655c4b8c89722b8e2a9076e1f7ed","slug":"「1026」Table-Tennis","date":"2022-07-19T14:49:11.000Z","updated":"2022-07-19T15:36:14.284Z","comments":true,"path":"api/articles/「1026」Table-Tennis.json","keywords":null,"cover":null,"text":"➳ENTRY A table tennis club has N tables available to the public. The tables are numbered from 1 to N. For any pair of players, if there are ...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"vector","slug":"vector","count":17,"path":"api/tags/vector.json"},{"name":"min_element","slug":"min-element","count":2,"path":"api/tags/min-element.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1024」Palindromic Number","uid":"0aa37f9889d7930f068072177d0f0eba","slug":"「1024」Palindromic-Number","date":"2022-07-17T11:27:49.000Z","updated":"2022-07-17T15:55:29.037Z","comments":true,"path":"api/articles/「1024」Palindromic-Number.json","keywords":null,"cover":null,"text":"➳ENTRY A number that will be the same when it is written forwards or backwards is known as a Palindromic Number. For example, 1234321 is a p...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"reverse","slug":"reverse","count":4,"path":"api/tags/reverse.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}