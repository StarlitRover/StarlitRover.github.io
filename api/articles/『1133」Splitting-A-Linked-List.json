{"title":"『1133」Splitting A Linked List","uid":"25908c90d75c97f6d5f5af144716999a","slug":"『1133」Splitting-A-Linked-List","date":"2022-11-24T17:28:48.000Z","updated":"2022-11-24T17:39:18.134Z","comments":true,"path":"api/articles/『1133」Splitting-A-Linked-List.json","keywords":null,"cover":null,"content":"<p>Given a singly linked list, you are supposed to rearrange its elements so that all the negative values appear before all of the non-negatives, and all the values in [0, K] appear before all those greater than K. The order of the elements inside each class must not be changed. For example, given the list being 18→7→-4→0→5→-6→10→11→-2 and K being 10, you must output -4→-6→-2→7→0→5→10→18→11.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains the address of the first node, a positive $N (≤10^5)$ which is the total number of nodes, and a positive $K (≤10^3)$. The address of a node is a 5-digit nonnegative integer, and NULL is represented by −1.</p>\n<p>Then N lines follow, each describes a node in the format:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Address Data Next</span><br></pre></td></tr></table></figure>\n\n<p>where <code>Address</code> is the position of the node, <code>Data</code> is an integer in $[−10^5,10^5]$, and <code>Next</code> is the position of the next node. It is guaranteed that the list is not empty.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each case, output in order (from beginning to the end of the list) the resulting linked list. Each node occupies a line, and is printed in the same format as in the input.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00100 9 10</span><br><span class=\"line\">23333 10 27777</span><br><span class=\"line\">00000 0 99999</span><br><span class=\"line\">00100 18 12309</span><br><span class=\"line\">68237 -6 23333</span><br><span class=\"line\">33218 -4 00000</span><br><span class=\"line\">48652 -2 -1</span><br><span class=\"line\">99999 5 68237</span><br><span class=\"line\">27777 11 48652</span><br><span class=\"line\">12309 7 33218</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">33218 -4 68237</span><br><span class=\"line\">68237 -6 48652</span><br><span class=\"line\">48652 -2 12309</span><br><span class=\"line\">12309 7 00000</span><br><span class=\"line\">00000 0 99999</span><br><span class=\"line\">99999 5 23333</span><br><span class=\"line\">23333 10 00100</span><br><span class=\"line\">00100 18 27777</span><br><span class=\"line\">27777 11 -1</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$链表题，给出一个链表，将所有节点按值分为$(-\\infty,0),[0,K],(K,+\\infty)$三部分，同时每一部分内的节点顺序必须按照原先链表内的顺序。</p>\n<p>$\\qquad$最直接的做法，就是用三个vector分别存储，最后按顺序输出，不过我想试试<code>stable_sort</code>，即稳定排序函数，保证值相等的元素按照原先顺序排列。用法与sort函数类似，⚠️不过在用lambda函数时注意传入参数类型需要const保证！</p>\n<p>$\\qquad$注意题目给出的节点不一定全部用上，先根据头节点地址找出链表，然后根据节点的值在哪个区间范围内分别赋值-1，0，1，最后调用<code>stable_sort</code>即可。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">const</span> pair&lt;string, <span class=\"type\">int</span>&gt; psi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    map&lt;string, pair&lt;<span class=\"type\">int</span>, string&gt;&gt; info;</span><br><span class=\"line\">    string start, addr;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; start &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        cin &gt;&gt; addr &gt;&gt; info[addr].first &gt;&gt; info[addr].second;</span><br><span class=\"line\">    vector&lt;pair&lt;string, <span class=\"type\">int</span>&gt;&gt; node;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start != <span class=\"string\">&quot;-1&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        node.<span class=\"built_in\">emplace_back</span>(start, info[start].first &gt; k ? <span class=\"number\">1</span> : info[start].first &lt; <span class=\"number\">0</span> ? <span class=\"number\">-1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\">        start = info[start].second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">stable_sort</span>(node.<span class=\"built_in\">begin</span>(), node.<span class=\"built_in\">end</span>(), [](psi &amp;a, psi &amp;b) &#123; <span class=\"keyword\">return</span> a.second &lt; b.second; &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; node.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %s\\n&quot;</span>, node[i].first.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d&quot;</span>, node[i].first.<span class=\"built_in\">c_str</span>(), info[node[i].first].first);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; -1\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$还发现一件比较神奇的事情：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    cin &gt;&gt; addr &gt;&gt; info[addr].first &gt;&gt; info[addr].second;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$强迫症重度患者表示不用分两行写很赞👍🏼</p>\n","text":"Given a singly linked list, you are supposed to rearrange its elements so that all the negative values appear before all of the non-negative...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"list","slug":"list","count":5,"path":"api/tags/list.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1134」Vertex Cover","uid":"1e867ab5e03f286a58fad122534ef050","slug":"「1134」Vertex-Cover","date":"2022-11-25T02:50:33.000Z","updated":"2022-11-25T03:09:05.490Z","comments":true,"path":"api/articles/「1134」Vertex-Cover.json","keywords":null,"cover":null,"text":"A vertex cover of a graph is a set of vertices such that each edge of the graph is incident to at least one vertex of the set. Now given a g...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"bitset","slug":"bitset","count":4,"path":"api/tags/bitset.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"『1132』Cut Integer","uid":"358e1bd298e98daf2cbd6662a57fb65a","slug":"『1132』Cut-Integer","date":"2022-11-24T16:28:21.000Z","updated":"2022-11-24T16:34:15.030Z","comments":true,"path":"api/articles/『1132』Cut-Integer.json","keywords":null,"cover":null,"text":"Cutting an integer means to cut a K digits lone integer Z into two integers of (K&#x2F;2) digits long integers A and B. For example, after c...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}