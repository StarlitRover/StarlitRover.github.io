{"title":"Lab3: page tables","uid":"65d0a1b9a75654efd6950a77e52b0ae4","slug":"Lab3-page-tables","date":"2022-11-17T16:34:38.000Z","updated":"2022-11-19T10:11:48.601Z","comments":true,"path":"api/articles/Lab3-page-tables.json","keywords":null,"cover":[],"content":"<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>兄弟们，我XV6又回来啦，这个栏目的灰都能把人埋了，鸽子王实锤（当然不是因为懒(⁎⁍̴̛ᴗ⁍̴̛⁎)）。不过虽迟但到！主要有时候看完文档和课程后又去搞其他飞机了，回来时，发现一切回到原点。这周发现再不搞真搞不完了，Lab3是关于页表的，文档<a href=\"https://pdos.csail.mit.edu/6.828/2021/labs/pgtbl.html\">戳这</a>。 </p>\n<img src=\"/images/操作系统/5.png\" title alt data-align=\"center\">\n\n<span id=\"more\"></span>\n\n<br>\n\n<h2><span id=\"coding\">❖ Coding</span></h2><hr>\n<h4><span id=\"︎-speed-up-system-calls-easy\">☑︎ Speed up system calls (easy)</span></h4><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>由于用户在使用系统调用时需要从用户空间跳转到内核空间，存在一定的时间开销。我们可以通过建立一段用户（只读）和内核共享的内存空间来避免空间跳转的时间，从而加速系统调用。这是一些操作系统的常见优化方法，本实验就是希望你以此来优化getpid系统调用。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>我们知道每个用户进程都拥有自己的虚拟空间，通过页表查找到物理地址后再进行相应的操作。因此这段共享空间的起始地址也需要记录在进程的页表上。实验文档指出，每个进程在创建时都需要新建一个只读页（shared memory），并将其物理地址映射到虚拟地址USYSCALL（一个已经存在的宏定义），然后在这一页的开头存储一个<code>struct usyscall</code>（memlayout.h），并把进程pid存入这个结构体中：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">76</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">usyscall</span> <span class=\"token punctuation\">{</span>                       \n<span class=\"token number\">77</span>   <span class=\"token keyword\">int</span> pid<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Process ID</span>\n<span class=\"token number\">78</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>接着我们再来瞅瞅user/ulib.c中ugetpid的具体实现：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">144</span>   │ #ifdef LAB_PGTBL\n<span class=\"token number\">145</span>   │ <span class=\"token keyword\">int</span>\n<span class=\"token number\">146</span>   │ <span class=\"token function\">ugetpid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">147</span>   │ <span class=\"token punctuation\">{</span>\n<span class=\"token number\">148</span>   │   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">usyscall</span> <span class=\"token operator\">*</span>u <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">usyscall</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>USYSCALL<span class=\"token punctuation\">;</span>\n<span class=\"token number\">149</span>   │   <span class=\"token keyword\">return</span> u<span class=\"token operator\">-&gt;</span>pid<span class=\"token punctuation\">;</span>\n<span class=\"token number\">150</span>   │ <span class=\"token punctuation\">}</span>\n<span class=\"token number\">151</span>   │ #endif<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个函数直接访问USYSCALL地址，通过我们设置好的页表就可以直接到相应的usyscall结构体取得pid，从而可以替代原先需要进入内核空间的getpid函数。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>页表相关操作基本都在kernel/proc.c文件中，我们先找到实现主要地址映射的proc_pagetable函数，可以看到这个函数通过mappages函数完成了<strong>Trampoline</strong>（系统调用返回地址，也是用户虚拟空间中的最高地址）和<strong>Trapframe</strong>（当中断来临时存储当前寄存器值的地址，就位于Trampoline的下方）的映射。显然，我们也需要用mappages来实现USYSCALL虚拟地址的映射，但问题是我们需要知道相应的物理地址。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>由于这个只读页是在进程创建时产生的，那么我们来到创建进程的allocproc函数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">100</span>   │ <span class=\"token comment\">// Look in the process table for an UNUSED proc.</span>\n<span class=\"token number\">101</span>   │ <span class=\"token comment\">// If found, initialize state required to run in the kernel,</span>\n<span class=\"token number\">102</span>   │ <span class=\"token comment\">// and return with p-&gt;lock held.</span>\n<span class=\"token number\">103</span>   │ <span class=\"token comment\">// If there are no free procs, or a memory allocation fails, return 0.</span>\n<span class=\"token number\">104</span>   │ <span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span><span class=\"token operator\">*</span>\n<span class=\"token number\">105</span>   │ <span class=\"token function\">allocproc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">106</span>   │ <span class=\"token punctuation\">{</span>\n<span class=\"token number\">107</span>   │   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token number\">108</span>   │ \n<span class=\"token number\">109</span>   │   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token number\">110</span>   │     <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">111</span>   │     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>state <span class=\"token operator\">==</span> UNUSED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token number\">112</span>   │       <span class=\"token keyword\">goto</span> found<span class=\"token punctuation\">;</span>\n<span class=\"token number\">113</span>   │     <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token number\">114</span>   │       <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">115</span>   │     <span class=\"token punctuation\">}</span>\n<span class=\"token number\">116</span>   │   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">117</span>   │   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">118</span>   │ \n<span class=\"token number\">119</span>   │ found<span class=\"token operator\">:</span>\n<span class=\"token number\">120</span>   │     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>allocproc函数从进程表中找到一个未使用的进程块然后为它分配相应的页表空间（kalloc：分配一块页大小512B的空间），那么我们就在此仿照trapframe的做法新建只读页，并存入pid：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">130</span> <span class=\"token operator\">+</span> │  <span class=\"token comment\">// ADD</span>\n<span class=\"token number\">131</span> <span class=\"token operator\">+</span> │  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>usys <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">usyscall</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">kalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">132</span> <span class=\"token operator\">+</span> │  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">133</span> <span class=\"token operator\">+</span> │     <span class=\"token comment\">// kfree((void*)p-&gt;trapframe);</span>\n<span class=\"token number\">134</span> <span class=\"token operator\">+</span> │     <span class=\"token function\">freeproc</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">135</span> <span class=\"token operator\">+</span> │     <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-&gt;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">136</span> <span class=\"token operator\">+</span> │     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">137</span> <span class=\"token operator\">+</span> │  <span class=\"token punctuation\">}</span>\n<span class=\"token number\">138</span> <span class=\"token operator\">+</span> │   p<span class=\"token operator\">-&gt;</span>usys<span class=\"token operator\">-&gt;</span>pid<span class=\"token operator\">=</span>p<span class=\"token operator\">-&gt;</span>pid<span class=\"token punctuation\">;</span>\n<span class=\"token number\">139</span> <span class=\"token operator\">+</span> │ \n<span class=\"token number\">140</span>   │   <span class=\"token comment\">// An empty user page table.</span>\n<span class=\"token number\">141</span>   │   p<span class=\"token operator\">-&gt;</span>pagetable <span class=\"token operator\">=</span> <span class=\"token function\">proc_pagetable</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">142</span>   │   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于只读页的物理地址还要在proc_pagetable中使用，因此我们需要在proc结构体（kernel/proc.h）中加入<code>struct usyscall *usys</code>。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>⚠️ 新建只读页必须在调用proc_pagetable（141）之前，因为需要用物理地址做映射。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>然后我们就可以在proc_pagetable里建立映射了：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">210</span> <span class=\"token operator\">+</span> │   <span class=\"token comment\">// ADD</span>\n<span class=\"token number\">211</span> <span class=\"token operator\">+</span> │   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mappages</span><span class=\"token punctuation\">(</span>pagetable<span class=\"token punctuation\">,</span> USYSCALL<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>uint64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>usys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_R <span class=\"token operator\">|</span> PTE_U<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">212</span> <span class=\"token operator\">+</span> │   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">213</span> <span class=\"token operator\">+</span> │     <span class=\"token function\">uvmunmap</span><span class=\"token punctuation\">(</span>pagetable<span class=\"token punctuation\">,</span> TRAMPOLINE<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">214</span> <span class=\"token operator\">+</span> │     <span class=\"token function\">uvmunmap</span><span class=\"token punctuation\">(</span>pagetable<span class=\"token punctuation\">,</span> TRAPFRAME<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">215</span> <span class=\"token operator\">+</span> │     <span class=\"token function\">uvmfree</span><span class=\"token punctuation\">(</span>pagetable<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">216</span> <span class=\"token operator\">+</span> │     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">217</span> <span class=\"token operator\">+</span> │   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">218</span> <span class=\"token operator\">+</span> │\n<span class=\"token number\">219</span>   │   <span class=\"token keyword\">return</span> pagetable<span class=\"token punctuation\">;</span>\n<span class=\"token number\">220</span>   │ <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>⚠️权限是只读（PTE_R），同时在用户空间内运行（PTE_U）。如果map失败就需要解除前面TRAMPOLINE和TRAPFRAME的映射。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>最后不要忘记在freeproc中释放分配来的物理空间：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">168</span> <span class=\"token operator\">+</span> │   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>usys<span class=\"token punctuation\">)</span>\n<span class=\"token number\">169</span> <span class=\"token operator\">+</span> │     <span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token operator\">-&gt;</span>usys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">170</span> <span class=\"token operator\">+</span> │   p<span class=\"token operator\">-&gt;</span>usys <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>还有很重要的一点是解除映射，否则会panic——“freewalk: leaf”：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">224</span>   │ <span class=\"token keyword\">void</span> <span class=\"token function\">proc_freepagetable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pagetable_t</span> pagetable<span class=\"token punctuation\">,</span> uint64 sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token number\">225</span>   │   <span class=\"token function\">uvmunmap</span><span class=\"token punctuation\">(</span>pagetable<span class=\"token punctuation\">,</span> TRAMPOLINE<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">226</span>   │   <span class=\"token function\">uvmunmap</span><span class=\"token punctuation\">(</span>pagetable<span class=\"token punctuation\">,</span> TRAPFRAME<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">227</span> <span class=\"token operator\">+</span> │   <span class=\"token function\">uvmunmap</span><span class=\"token punctuation\">(</span>pagetable<span class=\"token punctuation\">,</span> USYSCALL<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">228</span>   │   <span class=\"token function\">uvmfree</span><span class=\"token punctuation\">(</span>pagetable<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">229</span>   │ <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在释放页表空间后会调用freewalk函数来检查该页表中的所有<strong>叶子pte</strong>（三级映射最后的物理地址）是否有效（PTE_V是否为1），如果存在物理地址有效就会panic。</p>\n<br>\n\n<h4><span id=\"︎-print-a-page-tableeasy\">☑︎ Print a page table（easy）</span></h4><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>实现函数vmprint打印出页表树。页表是三级查找结构，把所有PTE条目看作一个节点，物理地址所对应的PTE条目为其子节点，那么从宏观上来看每个L2 page directory的物理地址都对应一个深度不超过3的树。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>只要知道了如何判断PTE（page table entry）和PT就能写出递归函数了。我们可以参考freewalk函数（kernel/vm.c），对就是上面刚刚出现的那位老哥，它就是通过递归遍历整棵树来检查物理地址是否还有效的：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">266</span>   │ <span class=\"token keyword\">void</span>\n<span class=\"token number\">267</span>   │ <span class=\"token function\">freewalk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pagetable_t</span> pagetable<span class=\"token punctuation\">)</span>\n<span class=\"token number\">268</span>   │ <span class=\"token punctuation\">{</span>\n<span class=\"token number\">269</span>   │   <span class=\"token comment\">// there are 2^9 = 512 PTEs in a page table.</span>\n<span class=\"token number\">270</span>   │   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token number\">271</span>   │     <span class=\"token class-name\">pte_t</span> pte <span class=\"token operator\">=</span> pagetable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">272</span>   │     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pte <span class=\"token operator\">&amp;</span> PTE_V<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>pte <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_R<span class=\"token operator\">|</span>PTE_W<span class=\"token operator\">|</span>PTE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token number\">273</span>   │       <span class=\"token comment\">// this PTE points to a lower-level page table.</span>\n<span class=\"token number\">274</span>   │       uint64 child <span class=\"token operator\">=</span> <span class=\"token function\">PTE2PA</span><span class=\"token punctuation\">(</span>pte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">275</span>   │       <span class=\"token function\">freewalk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pagetable_t</span><span class=\"token punctuation\">)</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">276</span>   │       pagetable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">277</span>   │     <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pte <span class=\"token operator\">&amp;</span> PTE_V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token number\">278</span>   │       <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"freewalk: leaf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">279</span>   │     <span class=\"token punctuation\">}</span>\n<span class=\"token number\">280</span>   │   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">281</span>   │   <span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pagetable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">282</span>   │ <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可见如果PTE_V是有效的，没有任何权限则说明这是一个PTE，需要继续递归，反之则说明是叶子节点，即虚拟地址对应的真实物理地址。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>由于我们需要用【 ..】的个数来表示深度，因此在vmprint中设置一个<code>static int depth</code>，递归进入子函数前+1，退出时-1。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>首先在kernel/exec.c的exec函数中加入</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">143</span> <span class=\"token operator\">+</span> │     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>pid<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">144</span> <span class=\"token operator\">+</span> │     <span class=\"token function\">vmprint</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>pagetable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">145</span> <span class=\"token operator\">+</span> │ \n<span class=\"token number\">146</span>   │     <span class=\"token keyword\">return</span> argc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this ends up in a0, the first argument to main(argc, argv)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>对于vmprint的实现，我是直接在exec函数前插入的，实验文档推荐在kernel/vm.c里实现，那就别忘了在kernel/defs.h里声明。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">12</span> <span class=\"token operator\">+</span> │ <span class=\"token keyword\">void</span> <span class=\"token function\">vmprint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pagetable_t</span> pg<span class=\"token punctuation\">)</span>\n<span class=\"token number\">13</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">{</span>\n<span class=\"token number\">14</span> <span class=\"token operator\">+</span> │     <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> depth <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span> <span class=\"token operator\">+</span> │     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">16</span> <span class=\"token operator\">+</span> │         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page table %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">17</span> <span class=\"token operator\">+</span> │     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token number\">18</span> <span class=\"token operator\">+</span> │     <span class=\"token punctuation\">{</span>\n<span class=\"token number\">19</span> <span class=\"token operator\">+</span> │         <span class=\"token class-name\">pte_t</span> pte <span class=\"token operator\">=</span> pg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">20</span> <span class=\"token operator\">+</span> │         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pte <span class=\"token operator\">&amp;</span> PTE_V<span class=\"token punctuation\">)</span>\n<span class=\"token number\">21</span> <span class=\"token operator\">+</span> │         <span class=\"token punctuation\">{</span>\n<span class=\"token number\">22</span> <span class=\"token operator\">+</span> │             uint64 child <span class=\"token operator\">=</span> <span class=\"token function\">PTE2PA</span><span class=\"token punctuation\">(</span>pte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">23</span> <span class=\"token operator\">+</span> │             <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> depth<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n<span class=\"token number\">24</span> <span class=\"token operator\">+</span> │                 <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" ..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">25</span> <span class=\"token operator\">+</span> │             <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d: pte %p pa %p\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> pte<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">26</span> <span class=\"token operator\">+</span> │             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pte <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_R <span class=\"token operator\">|</span> PTE_W <span class=\"token operator\">|</span> PTE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">27</span> <span class=\"token operator\">+</span> │             <span class=\"token punctuation\">{</span>\n<span class=\"token number\">28</span> <span class=\"token operator\">+</span> │                 depth <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">29</span> <span class=\"token operator\">+</span> │                 <span class=\"token function\">vmprint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pagetable_t</span><span class=\"token punctuation\">)</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">30</span> <span class=\"token operator\">+</span> │             <span class=\"token punctuation\">}</span>\n<span class=\"token number\">31</span> <span class=\"token operator\">+</span> │         <span class=\"token punctuation\">}</span>\n<span class=\"token number\">32</span> <span class=\"token operator\">+</span> │     <span class=\"token punctuation\">}</span>\n<span class=\"token number\">33</span> <span class=\"token operator\">+</span> │     depth <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">34</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>然后启动qemu后就会输出</p>\n<pre class=\"line-numbers language-output\" data-language=\"output\"><code class=\"language-output\">hart 2 starting\nhart 1 starting\npage table 0x0000000021fda801\n ..0: pte 0x0000000021fda801 pa 0x0000000087f6a000\n .. ..0: pte 0x0000000021fda401 pa 0x0000000087f69000\n .. .. ..0: pte 0x0000000021fdac1f pa 0x0000000087f6b000\n .. .. ..1: pte 0x0000000021fda00f pa 0x0000000087f68000\n .. .. ..2: pte 0x0000000021fd9c1f pa 0x0000000087f67000\n ..255: pte 0x0000000021fdb401 pa 0x0000000087f6d000\n .. ..511: pte 0x0000000021fdb001 pa 0x0000000087f6c000\n .. .. ..509: pte 0x0000000021fdd813 pa 0x0000000087f76000\n .. .. ..510: pte 0x0000000021fddc07 pa 0x0000000087f77000\n .. .. ..511: pte 0x0000000020001c0b pa 0x0000000080007000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<br>\n\n<h4><span id=\"︎-detecting-which-pages-have-been-accessed-hard\">☑︎ Detecting which pages have been accessed (hard)</span></h4><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>这里我们需要实现一个系统调用pgaccess，来检查给定物理页们是否被访问过（accessed：read or write），用one bit来表示一个物理页的结果，并将结果拷贝至用户空间。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>pgaccess会接受三个参数——第一个是起始页的虚拟地址，第二个是需要往后检查的页数，最后一个是需要将结果拷贝到用户空间的物理地址。文档中说最后用户空间会用一个bitmask的数据结构存储结果，其中a bit代表1页且第一页位于最低有效位，另外可以自行设置一个页数上限。在内核中运行时，我们可以用一个uint64来存储结果，那么页数上限即为64。另外我们需要自己在kernel/risv.h中定义PTE_A，至于这一位在物理地址中的哪一位则需要查询<a href=\"https://riscv.org/wp-content/uploads/2017/05/riscv-privileged-v1.10.pdf\">riscv手册</a>（P70）：</p>\n<img title src=\"/images/操作系统/6.png\" alt data-align=\"center\" width=\"582\">\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>你可能会问PTE_A不是我们自行定义的吗。事实上，pgaccess只是实现一个检查的功能，真正置位的是riscv硬件。文档中指出“The RISC-V hardware page walker marks these bits in the PTE whenever it resolves a TLB miss”，当CPU需要那一物理页时，发现Translation Look-aside Buffer未命中（cache中没有），就会去access这一页，然后将其PTE_A置1，因此PTE_A的位置是由硬件规定的。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>根据上图可知PTE_A位于倒数第6位，那么就在kernel/riscv.h中加入</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">346</span> <span class=\"token operator\">+</span> │ #define <span class=\"token function\">PTE_A</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// access bit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>准确地来讲，页表中存储的并不是物理地址，而是0(10 bits)+PPN(44 bits)+flags(10 bits)=PTE(64 bits)，因此我们可以看到kernel/riscv.h中很多转换宏定义：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">348</span>   │ <span class=\"token comment\">// shift a physical address to the right place for a PTE.</span>\n<span class=\"token number\">349</span>   │ #define <span class=\"token function\">PA2PTE</span><span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint64<span class=\"token punctuation\">)</span>pa<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">350</span>   │ \n<span class=\"token number\">351</span>   │ #define <span class=\"token function\">PTE2PA</span><span class=\"token punctuation\">(</span>pte<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pte<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">352</span>   │ \n<span class=\"token number\">353</span>   │ #define <span class=\"token function\">PTE_FLAGS</span><span class=\"token punctuation\">(</span>pte<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pte<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3FF</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>想要获取PTE_A只需要<code>(PTE&amp;PTE_A)&gt;&gt;6</code>  即可。另外由于参数是从用户空间传入，因此我们需要将这些参数通过argaddr（64 bits）和argint（32 bits）拷贝过来。由于传入的是虚拟地址，因此我们需要用walk函数找到实际的物理地址。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>kernel/sysproc.c中已经指明了函数的实现位置，直接撸就完事：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"> <span class=\"token number\">79</span>   │#ifdef LAB_PGTBL\n <span class=\"token number\">80</span>   │<span class=\"token keyword\">int</span>\n <span class=\"token number\">81</span>   │<span class=\"token function\">sys_pgaccess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n <span class=\"token number\">82</span>   │<span class=\"token punctuation\">{</span>\n <span class=\"token number\">83</span>   │    <span class=\"token comment\">// lab pgtbl: your code here.</span>\n <span class=\"token number\">84</span> <span class=\"token operator\">+</span> │    uint64 sa<span class=\"token punctuation\">,</span> ua<span class=\"token punctuation\">,</span> buf <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token number\">85</span> <span class=\"token operator\">+</span> │    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n <span class=\"token number\">86</span> <span class=\"token operator\">+</span> │    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">argaddr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sa<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">argint</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">argaddr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ua<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n <span class=\"token number\">87</span> <span class=\"token operator\">+</span> │        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token number\">88</span> <span class=\"token operator\">+</span> │\n <span class=\"token number\">89</span> <span class=\"token operator\">+</span> │    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token number\">90</span> <span class=\"token operator\">+</span> │\n <span class=\"token number\">91</span> <span class=\"token operator\">+</span> │    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token number\">92</span> <span class=\"token operator\">+</span> │    uint64 pg <span class=\"token operator\">=</span> sa<span class=\"token punctuation\">;</span>\n <span class=\"token number\">93</span> <span class=\"token operator\">+</span> │    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n <span class=\"token number\">94</span> <span class=\"token operator\">+</span> │    <span class=\"token punctuation\">{</span>\n <span class=\"token number\">95</span> <span class=\"token operator\">+</span> │        <span class=\"token class-name\">pte_t</span> <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>pagetable<span class=\"token punctuation\">,</span> pg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token number\">96</span> <span class=\"token operator\">+</span> │        buf <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte <span class=\"token operator\">&amp;</span> PTE_A<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">;</span>\n <span class=\"token number\">97</span> <span class=\"token operator\">+</span> │        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>PTE_A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token number\">98</span> <span class=\"token operator\">+</span> │        pg <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n <span class=\"token number\">99</span> <span class=\"token operator\">+</span> │    <span class=\"token punctuation\">}</span>\n<span class=\"token number\">100</span> <span class=\"token operator\">+</span> │\n<span class=\"token number\">101</span> <span class=\"token operator\">+</span> │    <span class=\"token keyword\">return</span> <span class=\"token function\">copyout</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>pagetable<span class=\"token punctuation\">,</span> ua<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">102</span>   │<span class=\"token punctuation\">}</span>\n<span class=\"token number\">103</span>   │#endif<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>文档中指出我们检查完后还需要将PTE_A置0，因为硬件只顾着在访问时置1，如果不复位那么PTE_A就永远是1了。因此别忘记<code>(*pte) &amp;= (~PTE_A)</code>，另外别写出<code>(*pte &amp; PTE_A &gt; 0)</code>，【&amp;】的优先级比【&gt;】低。</p>\n<br>\n\n<h2><span id=\"references\">❖ References</span></h2><hr>\n<ul>\n<li><p>[1] <a href=\"https://zhuanlan.zhihu.com/p/429304672\">MIT 6.S081 2021: Lab page tables</a></p>\n</li>\n<li><p>[2] <a href=\"https://www.cnblogs.com/duile/p/16087757.html\">MIT6.S081-Lab3 Pgtbl [2021Fall]</a></p>\n</li>\n</ul>\n","text":"兄弟们，我XV6又回来啦，这个栏目的灰都能把人埋了，鸽子王实锤（当然不是因为懒(⁎⁍̴̛ᴗ⁍̴̛⁎)）。不过虽迟但到！主要有时候看完文档和课程后又去搞其他飞机了，回来时，发现一切回到原点。这周发现再不搞真搞不完了，Lab3是关于页表的，文档戳这。 ❖ Coding ☑︎ Speed up ...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/categories/操作系统.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"xv6","slug":"xv6","count":3,"path":"api/tags/xv6.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">❖ Coding</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">☑︎ Speed up system calls (easy)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">☑︎ Print a page table（easy）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">☑︎ Detecting which pages have been accessed (hard)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">❖ References</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1115」Counting Nodes in a Binary Search Tree","uid":"4fd53e230858db5e382512fd3cfbd1a2","slug":"「1115」Counting-Nodes-in-a-Binary-Search-Tree","date":"2022-11-20T11:34:27.000Z","updated":"2022-11-20T11:43:17.664Z","comments":true,"path":"api/articles/「1115」Counting-Nodes-in-a-Binary-Search-Tree.json","keywords":null,"cover":null,"text":"A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties: The left subtree of a node contains o...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"binary search","slug":"binary-search","count":7,"path":"api/tags/binary-search.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1114」Family Property","uid":"7239e6ffaff5533d5d38121f0a34ad8b","slug":"「1114」Family-Property","date":"2022-11-16T02:09:36.000Z","updated":"2022-11-16T02:19:44.538Z","comments":true,"path":"api/articles/「1114」Family-Property.json","keywords":null,"cover":null,"text":"This time, you are supposed to help us collect the data for family-owned property. Given each person’s family members, and the estate（房产）inf...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"},{"name":"BFS","slug":"BFS","count":10,"path":"api/tags/BFS.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}