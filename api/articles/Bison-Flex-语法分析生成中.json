{"title":"Bison^Flex=语法分析生成中","uid":"1ebcc2044e1859de323771c4cf459a30","slug":"Bison-Flex-语法分析生成中","date":"2022-05-05T14:23:51.000Z","updated":"2022-05-22T11:37:41.903Z","comments":true,"path":"api/articles/Bison-Flex-语法分析生成中.json","keywords":null,"cover":[],"content":"<p>$\\qquad$上古时代的时候（前一段时间参加了些些小竞赛，状态有点迷糊，五一又浪里个浪，所以…虽迟但到！），我们有讲解过<a href=\"/post/%E5%80%9F%E5%8A%A9flex%E5%AE%9E%E7%8E%B0SysY%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html\" title=\"借助Flex实现SysY词法分析\">借助Flex实现SysY词法分析</a>。词法分析是编译的第一阶段，仅仅只是将代码进行切块归类，得到的只是些零散的tokens。现在我们进入第二阶段，对这些token进行整理排序，以便后面可以方便地解读每句code的含义，即语义分析——构建<strong>抽象语法树AST</strong>。</p>\n<p>$\\qquad$本文将阐述如何使用Bison联合Flex来生成语法分析器，并输出抽象语法树。</p>\n<span id=\"more\"></span>\n\n<hr>\n<p>$\\qquad$抽象语法树用树的数据结构将token们进行关联，非常抽象地展现了整体与部分的关系，就好似为一句话断句，使其结构一览无余。既然要为代码块进行“断句”，那么我们势必需要先清楚代码块拥有哪些结构层次。但结构层次并不是死板的，例如英语中正常的句子结构都是主谓宾，但并不是所有句子只有这种模式，句子中还可以有状语、补语等。代码也是如此，那么如何来描述一种编程语言所有可能的结构层次呢，就是所谓的文法。</p>\n<img src=\"/images/编译原理/2.png\" style=\"zoom:40%;\">\n\n<p>$\\qquad$栗子胜千言，例如下面这个简单的文法$G[S]$</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S → aSb | aAb</span><br><span class=\"line\">A → bAa | ba</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$其中$S$是<strong>开始符号</strong>，即文法推导中的第一个非终结符，也就是说这个文法描述的所有句子都可以由$S$推导而来。一般大写字母表示的都是非终结符，即还可以继续推导的符号，小写字母就相对应的终结符。那么很显然，这个文法描述的所有句子可以用集合$\\{a^mb^na^nb^m|m,n\\in \\mathbb{N}_+\\}$来表示。</p>\n<p>$\\qquad$可以看到有限的推导式足以描述无穷的句子，但这些句子是具有一定语法规则的。而一种编程语言本身就是一些具有特定语法规则的句子，因此也可以用一个文法来表示，只不过推导式的数量稍微多了亿些。</p>\n<p>$\\qquad$在不借助任何工具的情况下，要实现一个语法分析器就会有两种思路，其一是自底向上，就是将读入的token不断<strong>归约</strong>（推导的逆过程）为非终结符，直到剩下开始符号$S$；另一种则是自顶向下，即从开始符号$S$找到生成当前代码的推导过程，这里其实就是选择哪一条产生式的问题。两种思路本质上就是选择树的根还是叶子结点作为分析的起点来考虑的，但这并不是本文的重点，你只需知道Bison生成的语法分析器代码采用的是自底向上的思路，而我们只要提供给Bison相应的文法即可得到该文法对应语言的语法分析器。</p>\n<p>$\\qquad$不过，带着一点语法分析原理的学习来阅读本文体验会更好哦</p>\n<hr>\n<p>$\\qquad$GNU Bison是一款用于自动生成语法分析器的程序，基于并兼容yacc，可用于所有常见的操作系统。Bison把LALR形式的上下文无关文法描述转换为可做语法分析的C或C++程序。</p>\n<p>$\\qquad$Bison的输入文件<code>*.y</code>的基本格式如下，使用者需要将文法的一些基本信息写入该文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%start CompUnit</span><br><span class=\"line\">%expect 1</span><br><span class=\"line\"></span><br><span class=\"line\">%&#123;</span><br><span class=\"line\">    #include &quot;parser.h&quot;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">%union</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int     num;</span><br><span class=\"line\">    char*   str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*声明Flex产生的token有三种格式，其中&lt;type&gt;不是必须的*/</span><br><span class=\"line\">%token &lt;type1&gt; tokens1 /*类型为type1的token们*/</span><br><span class=\"line\">%right &lt;type2&gt; tokens2 /*类型为type2的右结合token们*/</span><br><span class=\"line\">%left &lt;type3&gt; tokens3  /*类型为type3的左结合token们*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*声明非终结符的类型*/</span><br><span class=\"line\">%type&lt;num&gt; Number CompUnit Decl ...</span><br><span class=\"line\"></span><br><span class=\"line\">%%</span><br><span class=\"line\">/*Grammar Productions and Corresponding Actions*/</span><br><span class=\"line\">CompUnit:       CompUnit Decl                     &#123;$$=$1+$2;&#125;</span><br><span class=\"line\">                | CompUnit FuncDef                &#123;$$=$1-$2;&#125;</span><br><span class=\"line\">Decl:           ConstDecl    %prec    token3      &#123;$$=$1*10;&#125;</span><br><span class=\"line\">                | /*ε*/                                &#123;&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">%%</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    yyparse();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>第一句<code>%start ...</code>是声明文法的开始符号，后面紧跟一个非终结符</p>\n</li>\n<li><p><code>%expect n</code>表示你知道这个文法中存在n个<strong>移入&#x2F;归约冲突</strong>（在某一个时刻既可以选择归约为非终结符也可以选择读入下一个token），并且认同Bison默认的处理方式，那么在生成语法分析器时若Bison确实发现了n个冲突就不会提醒你，否则会有提示（不加也没有关系，这句不是必要的）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.y: conflicts: n shift/reduce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>%&#123;...&#125;%</code>中间则和Flex类似，可以放一些头文件，这一部分会被直接添入生成代码的靠前部分</p>\n</li>\n<li><p><code>%union&#123;...&#125;</code>则是对之后需要用到的类型声明，即后面<strong>token</strong>和<strong>非终结符</strong>的类型都只能取自union中声明的符号，在上面的文件中只能用<code>num</code>、<code>str</code>来声明类型</p>\n</li>\n<li><p>对Flex生成的token进行声明，使Bison知道有哪些token存在，另外可以通过<code>&lt;type&gt;</code>对token的类型进行声明（默认为<code>int</code>），这样当Flex返回token时我们可以认为返回的是一个type类型的变量，而对于token的赋值则是在Flex中完成的，如此可以使Bison和Flex之间存在信息交互</p>\n</li>\n<li><p><code>%right</code>和<code>%left</code>也是token的一种声明方式，分别表示右结合和左结合，多用于运算符token的声明上</p>\n</li>\n<li><p>token的声明顺序决定了语法优先级，从上至下优先级逐渐升高，同一行的token优先级相同，多用于运算符token的声明，优先级高的token先进行归约</p>\n</li>\n<li><p><code>%type&lt;&gt; ...</code>则是声明非终结符的类型，类型依然只能取自<code>%union&#123;...&#125;</code>中，token的值是在Flex与Bison之间传递，而非终结符的值则是在产生式之间传递，即当一个非终结符A被归约出来后，我们可以对其进行相应类型的赋值，随后在A被归约时则会带着之前的赋值从产生式左部转移到另一个产生式的右部，那么我们就可以用A的值来定义新归约出来的非终结符的值</p>\n</li>\n<li><p><code>%%...%%</code>之间则是最重要的语法规则以及相应的动作，只不过产生式中的【→】变成了【:】</p>\n</li>\n<li><p>每一个产生式的右部可能有好几种推导结果（由【｜】进行分隔），我们认为不同的右部代表着不同的产生式，而每一个产生式后面都可以跟相应的一系列操作【{…}】，表示发生这一个产生式的归约时会执行的相应动作</p>\n</li>\n<li><p>操作中我们可以用【\\$】来引用产生式中的每一个token以及终结符，其中【\\$\\$】表示产生式左部的非终结符（冒号左边的非终结符），【$n】表示产生式右部第n个<strong>非终结符&#x2F;token&#x2F;字符串</strong>的值</p>\n<p>⚠️当【\\$n】是一个字符串常量时，Bison会提示这个【\\$n】没有声明类型，但不会影响程序的运行，当然你觉得难受的话可以直接将其替换成字符串的字面值</p>\n</li>\n<li><p>产生式的右部是可以为空的，这就相当于文法中的空串$\\epsilon$</p>\n</li>\n<li><p>产生式中<code>%prec token_name</code>可以使<code>%prec</code>左边的产生式具有和<code>token_name</code>相同的优先级</p>\n</li>\n<li><p>最下面的部分也跟Flex类似，会被直接复制到生成代码的底部，函数<code>yyparse()</code>会执行语法分析过程，接下来你可以增加一些输出分析结果的代码</p>\n</li>\n<li><p>以上只是Bison最基础的规则，希望更加全面系统地学习可以参阅<a href=\"http://home.ustc.edu.cn/~guoxing/ebooks/flex%E4%B8%8Ebison%E4%B8%AD%E6%96%87%E7%89%88.pdf\">《flex与bison》</a>.</p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"parserh\">∫  “parser.h”</span></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> yylineno;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">char</span>* yytext;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> <span class=\"title function_\">yylex</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span>NUM,TEXT&#125; TYPE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">yyerror</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* msg)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;31m%s at line %d\\033[0m: %s\\n&quot;</span>,msg,yylineno,yytext);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">OCT2DEC</span><span class=\"params\">(<span class=\"type\">char</span>* text)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"built_in\">strlen</span>(text);++i)</span><br><span class=\"line\">        sum=sum*<span class=\"number\">8</span>+(text[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">HEX2DEC</span><span class=\"params\">(<span class=\"type\">char</span>* text)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;<span class=\"built_in\">strlen</span>(text);++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(text[i]&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;text[i]&lt;=<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">            sum=sum*<span class=\"number\">16</span>+(text[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(text[i]&gt;=<span class=\"string\">&#x27;a&#x27;</span>&amp;&amp;text[i]&lt;=<span class=\"string\">&#x27;f&#x27;</span>)</span><br><span class=\"line\">            sum=sum*<span class=\"number\">16</span>+(text[i]-<span class=\"string\">&#x27;a&#x27;</span>+<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            sum=sum*<span class=\"number\">16</span>+(text[i]-<span class=\"string\">&#x27;A&#x27;</span>+<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ASTnode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    TYPE type;</span><br><span class=\"line\">    <span class=\"type\">char</span>* text;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ASTnode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ASTnode</span>* <span class=\"title\">child</span>;</span></span><br><span class=\"line\">&#125;ASTnode;</span><br><span class=\"line\"></span><br><span class=\"line\">ASTnode* ASThead=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//generate new node</span></span><br><span class=\"line\">ASTnode* <span class=\"title function_\">newASTnode</span><span class=\"params\">(TYPE type, <span class=\"type\">char</span>* text, <span class=\"type\">int</span> num, ASTnode* nxt, ASTnode* child)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ASTnode* node=(ASTnode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(ASTnode)); <span class=\"comment\">//不是sizeof(ASTnode*)!!!</span></span><br><span class=\"line\">    node-&gt;type=type;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type==TEXT)</span><br><span class=\"line\">        node-&gt;text=strdup(text);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        node-&gt;num=num;</span><br><span class=\"line\">    node-&gt;next=nxt;</span><br><span class=\"line\">    node-&gt;child=child;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//connect sibling nodes</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">connectASTnode</span><span class=\"params\">(<span class=\"type\">int</span> num,...)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    va_list valist;</span><br><span class=\"line\">    va_start(valist,num);</span><br><span class=\"line\">    ASTnode* node=va_arg(valist,ASTnode*);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;num;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ASTnode* next=va_arg(valist,ASTnode*);</span><br><span class=\"line\">        node-&gt;next=next;</span><br><span class=\"line\">        node=next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    va_end(valist);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">outputAST</span><span class=\"params\">(ASTnode* head,<span class=\"type\">int</span> tab)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (head-&gt;type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> NUM:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;35m%d\\033[0m\\n&quot;</span>,head-&gt;num);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TEXT:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(head-&gt;child!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;32m%s\\033[0m\\n&quot;</span>,head-&gt;text);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;34m%s\\033[0m\\n&quot;</span>,head-&gt;text);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ASTnode* node=head-&gt;child;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(node!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;tab;++i)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;└───────&quot;</span>);</span><br><span class=\"line\">        outputAST(node,tab+<span class=\"number\">1</span>);</span><br><span class=\"line\">        node=node-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">freeAST</span><span class=\"params\">(ASTnode *head)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ASTnode *node=head-&gt;child;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        freeAST(node);</span><br><span class=\"line\">        node=node-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head-&gt;type==TEXT)</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(head-&gt;text);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(head);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>这个头文件中主要包括了AST的构建、输出、释放等函数，还有8进制、16进制转十进制数的函数</p>\n</li>\n<li><p>节点<code>ASTnode</code>中既可以存字符串也可以存整型，<code>TYPE type</code>指明了这个节点存储的数据类型，其中<code>TYPE</code>是一个枚举类型</p>\n</li>\n<li><p>前面3个<code>extern</code>声明了Flex（lex.yy.c）中自带的三个变量，从而可以在Bison中使用</p>\n</li>\n<li><p><code>yyerror</code>是Bison无法归约时会调用的报错函数，这里它会输出出错信息、出错行数以及出错字符串</p>\n</li>\n<li><p><code>connectASTnode</code>函数使用了C语言中多参数函数的机制，可以连接任意个数的兄弟节点，每天一个<code>make bug</code>小魔法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// num is number of parameters in ...</span></span><br><span class=\"line\">type <span class=\"title function_\">func_name</span><span class=\"params\">(<span class=\"type\">int</span> num,...)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 声明参数列表</span></span><br><span class=\"line\">    va_list valist;</span><br><span class=\"line\">    va_start(valist,num);</span><br><span class=\"line\">  <span class=\"comment\">// 以TYPE类型取出参数</span></span><br><span class=\"line\">    TYPE val=va_arg(valist,TYPE);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;num;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TYPE next=va_arg(valist,TYPE);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    va_end(valist);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>C语言不知道怎么输出树，所以采用了文件树的形式，以tab数表示该节点所处的深度，每个节点的父节点都是其上方最近的tab-1节点</p>\n</li>\n<li><p>用全局变量<code>ASThead</code>来存储AST的头节点，我们只需要在每次执行<strong>归约到开始符号</strong>（即左部是开始符号）的产生式时将开始符号的节点赋值给<code>ASThead</code>，那么最后一次赋值（即最后一次归约）的必然是AST的头节点</p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"sysyl\">∬ SysY.l</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%option yylineno</span><br><span class=\"line\"></span><br><span class=\"line\">%&#123;</span><br><span class=\"line\">    #include &quot;SysY.tab.h&quot;</span><br><span class=\"line\">    #define UNEXPECTED 0</span><br><span class=\"line\">%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">INT                 int</span><br><span class=\"line\">VOID                void</span><br><span class=\"line\">CONST               const</span><br><span class=\"line\">IF                  if</span><br><span class=\"line\">ELSE                else</span><br><span class=\"line\">WHILE               while</span><br><span class=\"line\">BREAK               break</span><br><span class=\"line\">CONTINUE            continue</span><br><span class=\"line\">RETURN              return</span><br><span class=\"line\">MULDIVSUR           &quot;*&quot;|&quot;/&quot;|&quot;%&quot;</span><br><span class=\"line\">ADDSUB              &quot;+&quot;|&quot;-&quot;</span><br><span class=\"line\">CMP                 &quot;&lt;&quot;|&quot;&gt;&quot;|&quot;&lt;=&quot;|&quot;&gt;=&quot;</span><br><span class=\"line\">EQNEQ               &quot;==&quot;|&quot;!=&quot;</span><br><span class=\"line\">ASSIGN              &quot;=&quot;</span><br><span class=\"line\">NONZERO             [1-9]</span><br><span class=\"line\">DIGIT               [0-9]</span><br><span class=\"line\">LETTER              [A-Za-z]</span><br><span class=\"line\">OCTAL_DIGIT         [0-7]</span><br><span class=\"line\">OCTAL_CONST         0&#123;OCTAL_DIGIT&#125;*</span><br><span class=\"line\">ILLEGAL_OCTAL_CONST 0[0-9a-wy-zA-WY-Z](&#123;LETTER&#125;|&#123;DIGIT&#125;)*</span><br><span class=\"line\">HEX_PREFIX          0x|0X</span><br><span class=\"line\">HEX_DIGIT           [0-9a-fA-F]</span><br><span class=\"line\">HEX_CONST           &#123;HEX_PREFIX&#125;&#123;HEX_DIGIT&#125;+</span><br><span class=\"line\">ILLEGAL_HEX_CONST   &#123;HEX_PREFIX&#125;(&#123;LETTER&#125;|&#123;DIGIT&#125;)*</span><br><span class=\"line\">NONDIGIT            &#123;LETTER&#125;|&quot;_&quot;</span><br><span class=\"line\">ID                  &#123;NONDIGIT&#125;(&#123;DIGIT&#125;|&#123;NONDIGIT&#125;)*</span><br><span class=\"line\">DEC_CONST           &#123;NONZERO&#125;&#123;DIGIT&#125;*  </span><br><span class=\"line\">COMMENT1            &quot;/*&quot;[^*]*&quot;*&quot;+([^*/][^*]*&quot;*&quot;+)*&quot;/&quot;</span><br><span class=\"line\">COMMENT2            &quot;//&quot;.*                                                                                </span><br><span class=\"line\"></span><br><span class=\"line\">%%</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;INT&#125;                   &#123; yylval.str=strdup(yytext); return INT; &#125;</span><br><span class=\"line\">&#123;VOID&#125;                  &#123; yylval.str=strdup(yytext); return VOID; &#125;</span><br><span class=\"line\">&#123;OCTAL_CONST&#125;           &#123; yylval.str=strdup(yytext); return OCTAL_CONST; &#125;</span><br><span class=\"line\">&#123;ILLEGAL_OCTAL_CONST&#125;   &#123; yylval.str=strdup(yytext); return HEX_CONST; &#125;</span><br><span class=\"line\">&#123;HEX_CONST&#125;             &#123; yylval.str=strdup(yytext); return HEX_CONST; &#125;</span><br><span class=\"line\">&#123;ILLEGAL_HEX_CONST&#125;     &#123; yylval.str=strdup(yytext); return DEC_CONST; &#125;</span><br><span class=\"line\">&#123;DEC_CONST&#125;             &#123; yylval.str=strdup(yytext); return DEC_CONST; &#125;</span><br><span class=\"line\">&#123;CONST&#125;                 &#123; yylval.str=strdup(yytext); return CONST; &#125;</span><br><span class=\"line\">&#123;IF&#125;                    &#123; yylval.str=strdup(yytext); return IF; &#125;</span><br><span class=\"line\">&#123;ELSE&#125;                  &#123; yylval.str=strdup(yytext); return ELSE; &#125;</span><br><span class=\"line\">&#123;WHILE&#125;                 &#123; yylval.str=strdup(yytext); return WHILE; &#125;</span><br><span class=\"line\">&#123;BREAK&#125;                 &#123; yylval.str=strdup(yytext); return BREAK; &#125;</span><br><span class=\"line\">&#123;CONTINUE&#125;              &#123; yylval.str=strdup(yytext); return CONTINUE; &#125;</span><br><span class=\"line\">&#123;RETURN&#125;                &#123; yylval.str=strdup(yytext); return RETURN; &#125;</span><br><span class=\"line\">&#123;MULDIVSUR&#125;             &#123; yylval.str=strdup(yytext); return MULDIVSUR; &#125; </span><br><span class=\"line\">&#123;ADDSUB&#125;                &#123; yylval.str=strdup(yytext); return ADDSUB; &#125; </span><br><span class=\"line\">&#123;CMP&#125;                   &#123; yylval.str=strdup(yytext); return CMP; &#125; </span><br><span class=\"line\">&#123;EQNEQ&#125;                 &#123; yylval.str=strdup(yytext); return EQNEQ; &#125; </span><br><span class=\"line\">&#123;ASSIGN&#125;                &#123; yylval.str=strdup(yytext); return ASSIGN; &#125;</span><br><span class=\"line\">&#123;ID&#125;                    &#123; yylval.str=strdup(yytext); return ID; &#125;</span><br><span class=\"line\">&quot;(&quot;                     &#123; yylval.str=strdup(yytext); return yytext[0]; &#125;</span><br><span class=\"line\">&quot;)&quot;                     &#123; yylval.str=strdup(yytext); return yytext[0]; &#125;</span><br><span class=\"line\">&quot;[&quot;                     &#123; yylval.str=strdup(yytext); return yytext[0]; &#125;</span><br><span class=\"line\">&quot;]&quot;                     &#123; yylval.str=strdup(yytext); return yytext[0]; &#125;</span><br><span class=\"line\">&quot;&#123;&quot;                     &#123; yylval.str=strdup(yytext); return yytext[0]; &#125;</span><br><span class=\"line\">&quot;&#125;&quot;                     &#123; yylval.str=strdup(yytext); return yytext[0]; &#125;</span><br><span class=\"line\">&quot;;&quot;                     &#123; yylval.str=strdup(yytext); return yytext[0]; &#125;</span><br><span class=\"line\">&quot;,&quot;                     &#123; yylval.str=strdup(yytext); return yytext[0]; &#125;</span><br><span class=\"line\">&quot;&amp;&amp;&quot;                    &#123; yylval.str=strdup(yytext); return AND; &#125;</span><br><span class=\"line\">&quot;||&quot;                    &#123; yylval.str=strdup(yytext); return OR; &#125;</span><br><span class=\"line\">&#123;COMMENT1&#125;|&#123;COMMENT2&#125;   &#123; &#125;</span><br><span class=\"line\">[ \\t\\n]                 &#123; &#125;</span><br><span class=\"line\">.                       &#123; yylval.str=strdup(yytext); return UNEXPECTED; &#125;</span><br><span class=\"line\">%%</span><br><span class=\"line\"></span><br><span class=\"line\">int yywrap(void) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>“SysY.tab.h”是<code>bison -d SysY.y</code>产生的，Bison会将你声明的token进行enum放在生成的头文件”SysY.tab.h”中，所以你无需自己再写一个”translator.h”</li>\n<li>注意在Flex中需要完成对token的赋值，如果token的类型为TYPE（取自<code>%union</code>），那么你需要以<code>yylval.TYPE=...</code>的形式进行赋值，然后<code>return token_name;</code></li>\n<li><code>char* strdup(char *s)</code>函数会开辟一段新的空间并复制字符串s的值，然后返回新空间的指针（需要<code>free</code>）</li>\n</ol>\n<hr>\n<h2><span id=\"sysyy\">∭ SysY.y</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%start CompUnit</span><br><span class=\"line\">%expect 1</span><br><span class=\"line\"></span><br><span class=\"line\">%&#123;</span><br><span class=\"line\">    #include &quot;parser.h&quot;</span><br><span class=\"line\">%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">%union</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int     num;</span><br><span class=\"line\">    char*   str;</span><br><span class=\"line\">    struct ASTnode* node; /*&quot;struct&quot; is indispensable*/</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">%token &lt;str&gt; INT VOID CONST IF ELSE WHILE BREAK CONTINUE RETURN ID OCTAL_CONST HEX_CONST DEC_CONST</span><br><span class=\"line\">%right &lt;str&gt; ASSIGN</span><br><span class=\"line\">%left &lt;str&gt; OR</span><br><span class=\"line\">%left &lt;str&gt; AND</span><br><span class=\"line\">%left &lt;str&gt; EQNEQ</span><br><span class=\"line\">%left &lt;str&gt; CMP</span><br><span class=\"line\">%left &lt;str&gt; ADDSUB</span><br><span class=\"line\">%left &lt;str&gt; MULDIVSUR</span><br><span class=\"line\"></span><br><span class=\"line\">%type&lt;node&gt; Number CompUnit Decl FuncDef ConstDecl VarDecl ConstDef ConstDefBlock ConstExpBlock ConstInitVal ConstExp ConstInitFlag ConstValBlock VarDef</span><br><span class=\"line\">    VarDefFlag InitVal Exp InitValFlag InitValBlock FuncFParams Block FuncFParam FuncFParamBlock ExpBlockFlag ExpBlock BlockItemBlock BlockItem </span><br><span class=\"line\">    Stmt LVal ExpFlag StmtFlag Cond AddExp LOrExp PrimaryExp UnaryExp FuncFParamsFlag FuncRParams UNARYOP CommaExpBlock MulExp RelExp EqExp LAndExp</span><br><span class=\"line\"></span><br><span class=\"line\">%%</span><br><span class=\"line\">CompUnit:       CompUnit Decl                           &#123;</span><br><span class=\"line\">                                                            connectASTnode(2,$1,$2);</span><br><span class=\"line\">                                                            ASThead=$$=newASTnode(TEXT,&quot;CompUnit&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | CompUnit FuncDef                      &#123;</span><br><span class=\"line\">                                                            connectASTnode(2,$1,$2);</span><br><span class=\"line\">                                                            ASThead=$$=newASTnode(TEXT,&quot;CompUnit&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | Decl                                  &#123;ASThead=$$=newASTnode(TEXT,&quot;CompUnit&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | FuncDef                               &#123;ASThead=$$=newASTnode(TEXT,&quot;CompUnit&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">Decl:           ConstDecl                               &#123;$$=newASTnode(TEXT,&quot;Decl&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | VarDecl                               &#123;$$=newASTnode(TEXT,&quot;Decl&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">ConstDecl:      CONST INT ConstDef ConstDefBlock &#x27;;&#x27;    &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n2=newASTnode(TEXT,$2,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n5=newASTnode(TEXT,&quot;;&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(5,n1,n2,$3,$4,n5);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ConstDecl&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">ConstDefBlock:  ConstDefBlock &#x27;,&#x27; ConstDef              &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;,&quot;,0,$3,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,$1,n,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ConstDefBlock&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ConstDefBlock&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">ConstDef:       ID ConstExpBlock ASSIGN ConstInitVal    &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n3=newASTnode(TEXT,$3,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(4,n1,$2,n3,$4);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ConstDef&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">ConstExpBlock:  ConstExpBlock &#x27;[&#x27; ConstExp &#x27;]&#x27;          &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,&quot;[&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n4=newASTnode(TEXT,&quot;]&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(4,$1,n2,$3,n4);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ConstExpBlock&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ConstExpBlock&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">ConstInitVal:   ConstExp                                &#123;$$=newASTnode(TEXT,&quot;ConstInitVal&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                |&#x27;&#123;&#x27;ConstInitFlag&#x27;&#125;&#x27;                    &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,&quot;&#123;&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n3=newASTnode(TEXT,&quot;&#125;&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,n1,$2,n3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ConstInitVal&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">ConstInitFlag:  ConstInitVal ConstValBlock              &#123;</span><br><span class=\"line\">                                                            connectASTnode(2,$1,$2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ConstInitFlag&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ConstInitFlag&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">ConstValBlock:  ConstValBlock &#x27;,&#x27; ConstInitVal          &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,&quot;,&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,$1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ConstValBlock&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ConstValBlock&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">VarDecl:        INT VarDef VarDefFlag &#x27;;&#x27;               &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n4=newASTnode(TEXT,&quot;;&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(4,n1,$2,$3,n4);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;VarDecl&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">VarDefFlag:    &#x27;,&#x27; VarDef VarDefFlag                    &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,&quot;,&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,n1,$2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;VarDefFlag&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;VarDefFlag&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">VarDef:         ID ConstExpBlock                        &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(2,n1,$2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;VarDef&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | ID ConstExpBlock ASSIGN InitVal       &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n3=newASTnode(TEXT,$3,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(4,n1,$2,n3,$4);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;VarDef&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">InitVal:          Exp                                   &#123;$$=newASTnode(TEXT,&quot;InitVal&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | &#x27;&#123;&#x27;InitValFlag&#x27;&#125;&#x27;                     &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,&quot;&#123;&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n3=newASTnode(TEXT,&quot;&#125;&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,n1,$2,n3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;InitVal&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">InitValFlag:    InitVal InitValBlock                    &#123;</span><br><span class=\"line\">                                                            connectASTnode(2,$1,$2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;InitValFlag&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;InitValFlag&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">InitValBlock:   InitValBlock &#x27;,&#x27; InitVal                &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,&quot;,&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,$1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;InitValBlock&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;InitValFlag&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">FuncDef:        INT ID &#x27;(&#x27; FuncFParams&#x27;)&#x27; Block         &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n2=newASTnode(TEXT,$2,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n3=newASTnode(TEXT,&quot;(&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n5=newASTnode(TEXT,&quot;)&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(6,n1,n2,n3,$4,n5,$6);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;FuncDef&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | VOID ID &#x27;(&#x27; FuncFParams&#x27;)&#x27; Block      &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n2=newASTnode(TEXT,$2,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n3=newASTnode(TEXT,&quot;(&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n5=newASTnode(TEXT,&quot;)&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(6,n1,n2,n3,$4,n5,$6);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;FuncDef&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">FuncFParams:    FuncFParam FuncFParamBlock              &#123;</span><br><span class=\"line\">                                                            connectASTnode(2,$1,$2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;FuncFParams&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;FuncFParams&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">FuncFParamBlock:FuncFParamBlock &#x27;,&#x27; FuncFParam          &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,&quot;,&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,$1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;FuncFParamBlock&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;FuncFParamBlock&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">FuncFParam:     INT ID ExpBlockFlag                     &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n2=newASTnode(TEXT,$2,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,n1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;FuncFParam&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">ExpBlockFlag:   &#x27;[&#x27;&#x27;]&#x27; ExpBlock                         &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,&quot;[&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n2=newASTnode(TEXT,&quot;]&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,n1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ExpBlockFlag&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">ExpBlock:       ExpBlock &#x27;[&#x27;Exp&#x27;]&#x27;                      &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,&quot;[&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n4=newASTnode(TEXT,&quot;]&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(4,$1,n2,$3,n4);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;FuncDef&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ExpBlock&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">Block:          &#x27;&#123;&#x27; BlockItemBlock &#x27;&#125;&#x27;                  &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,&quot;&#123;&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n3=newASTnode(TEXT,&quot;&#125;&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,n1,$2,n3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;Block&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">BlockItemBlock: BlockItemBlock BlockItem                &#123;</span><br><span class=\"line\">                                                            connectASTnode(2,$1,$2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;BlockItemBlock&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;BlockItemBlock&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">BlockItem:        Decl                                  &#123;$$=newASTnode(TEXT,&quot;BlockItem&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | Stmt                                  &#123;$$=newASTnode(TEXT,&quot;BlockItem&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">Stmt:           LVal ASSIGN Exp &#x27;;&#x27; %prec ASSIGN        &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n4=newASTnode(TEXT,&quot;;&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(4,$1,n2,$3,n4);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;Stmt&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | ExpFlag&#x27;;&#x27;                            &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,&quot;;&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(2,$1,n2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;Stmt&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | Block                                 &#123;$$=newASTnode(TEXT,&quot;Stmt&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | IF&#x27;(&#x27;Cond&#x27;)&#x27; Stmt StmtFlag            &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n2=newASTnode(TEXT,&quot;(&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n4=newASTnode(TEXT,&quot;)&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(6,n1,n2,$3,n4,$5,$6);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;Stmt&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | WHILE&#x27;(&#x27;Cond&#x27;)&#x27; Stmt                  &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n2=newASTnode(TEXT,&quot;(&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n4=newASTnode(TEXT,&quot;)&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(5,n1,n2,$3,n4,$5);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;Stmt&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | BREAK&#x27;;&#x27;                              &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n2=newASTnode(TEXT,&quot;;&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(2,n1,n2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;Stmt&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | CONTINUE&#x27;;&#x27;                           &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n2=newASTnode(TEXT,&quot;;&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(2,n1,n2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;Stmt&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | RETURN ExpFlag&#x27;;&#x27;                     &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n3=newASTnode(TEXT,&quot;;&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,n1,$2,n3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;Stmt&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">ExpFlag:          Exp                                   &#123;$$=newASTnode(TEXT,&quot;ExpFlag&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;ExpFlag&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">StmtFlag:       ELSE Stmt                               &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(2,n1,$2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;StmtFlag&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;StmtFlag&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">Exp:            AddExp                                  &#123;$$=newASTnode(TEXT,&quot;Exp&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">Cond:           LOrExp                                  &#123;$$=newASTnode(TEXT,&quot;Cond&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">LVal:           ID ExpBlock                             &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(2,n1,$2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;LVal&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">PrimaryExp:     &#x27;(&#x27;Exp&#x27;)&#x27;                               &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,&quot;(&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n3=newASTnode(TEXT,&quot;)&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,n1,$2,n3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;PrimaryExp&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | LVal                                  &#123;$$=newASTnode(TEXT,&quot;PrimaryExp&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | Number                                &#123;$$=newASTnode(TEXT,&quot;PrimaryExp&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">Number:         OCTAL_CONST                             &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(NUM,NULL,OCT2DEC($1),NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;Number&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | HEX_CONST                             &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(NUM,NULL,HEX2DEC($1),NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;Number&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | DEC_CONST                             &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(NUM,NULL,atoi($1),NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;Number&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">UnaryExp:       PrimaryExp                              &#123;$$=newASTnode(TEXT,&quot;UnaryExp&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | ID &#x27;(&#x27; FuncFParamsFlag &#x27;)&#x27;            &#123;</span><br><span class=\"line\">                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n2=newASTnode(TEXT,&quot;(&quot;,0,NULL,NULL),</span><br><span class=\"line\">                                                                    *n4=newASTnode(TEXT,&quot;)&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(4,n1,n2,$3,n4);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;PrimaryExp&quot;,0,NULL,n1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | UNARYOP UnaryExp                      &#123;</span><br><span class=\"line\">                                                            connectASTnode(2,$1,$2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;UnaryExp&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">FuncFParamsFlag:FuncRParams                             &#123;$$=newASTnode(TEXT,&quot;FuncFParamsFlag&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;FuncFParamsFlag&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">FuncRParams:    Exp CommaExpBlock                       &#123;</span><br><span class=\"line\">                                                            connectASTnode(2,$1,$2);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;FuncRParams&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">CommaExpBlock:  CommaExpBlock &#x27;,&#x27; Exp                   &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,&quot;,&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,$1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;CommaExpBlock&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | /*ε*/                                 &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;ε&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;CommaExpBlock&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">UNARYOP:        ADDSUB                                  &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,$1,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;UNARYOP&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                | &#x27;!&#x27;                                   &#123;</span><br><span class=\"line\">                                                            ASTnode *n=newASTnode(TEXT,&quot;!&quot;,0,NULL,NULL);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;UNARYOP&quot;,0,NULL,n);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">MulExp:         UnaryExp                                &#123;$$=newASTnode(TEXT,&quot;MulExp&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | MulExp MULDIVSUR UnaryExp             &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,$1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;MulExp&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">AddExp:         MulExp                                  &#123;$$=newASTnode(TEXT,&quot;AddExp&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | AddExp ADDSUB MulExp                  &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,$1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;MulExp&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">RelExp:         AddExp                                  &#123;$$=newASTnode(TEXT,&quot;RelExp&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | RelExp CMP AddExp                     &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,$1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;RelExp&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">EqExp:          RelExp                                  &#123;$$=newASTnode(TEXT,&quot;EqExp&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | EqExp EQNEQ RelExp                    &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,$1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;EqExp&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">LAndExp:        EqExp                                   &#123;$$=newASTnode(TEXT,&quot;LAndExp&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | LAndExp AND EqExp                     &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,$1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;LAndExp&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">LOrExp:         LAndExp                                 &#123;$$=newASTnode(TEXT,&quot;LOrExp&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">                | LOrExp OR LAndExp                     &#123;</span><br><span class=\"line\">                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);</span><br><span class=\"line\">                                                            connectASTnode(3,$1,n2,$3);</span><br><span class=\"line\">                                                            $$=newASTnode(TEXT,&quot;LOrExp&quot;,0,NULL,$1);</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">ConstExp:       AddExp                                  &#123;$$=newASTnode(TEXT,&quot;ConstExp&quot;,0,NULL,$1);&#125;</span><br><span class=\"line\">%%</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    yyparse();</span><br><span class=\"line\">    outputAST(ASThead,0);</span><br><span class=\"line\">    freeAST(ASThead);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3><span id=\"testc\">Test.c</span></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> bb = <span class=\"number\">0x12d23</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (abc &gt;= bb) <span class=\"comment\">// hello</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*This is a test</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"cast-magic\">Cast Magic 🪄</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex SysY.l</span><br><span class=\"line\">bison -d SysY.y</span><br><span class=\"line\">clang SysY.tab.c lex.yy.c</span><br><span class=\"line\">cat test.c|./a.out</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"output\">Output</span></h3><p><img src=\"/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.png\"></p>\n","text":"$\\qquad$上古时代的时候（前一段时间参加了些些小竞赛，状态有点迷糊，五一又浪里个浪，所以…虽迟但到！），我们有讲解过借助Flex实现SysY词法分析。词法分析是编译的第一阶段，仅仅只是将代码进行切块归类，得到的只是些零散的tokens。现在我们进入第二阶段，对这些token...","link":"","photos":[],"count_time":{"symbolsCount":"46k","symbolsTime":"42 mins."},"categories":[{"name":"编译原理","slug":"编译原理","count":7,"path":"api/categories/编译原理.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">∫  “parser.h”</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">∬ SysY.l</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">∭ SysY.y</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Test.c</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Cast Magic 🪄</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output</span></a></li></ol></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"YOLOv5说明书","uid":"4eb946cc0edf20ceda9a686ce0927f5a","slug":"Yolov5说明书","date":"2022-05-07T03:54:21.000Z","updated":"2022-06-06T16:32:40.579Z","comments":true,"path":"api/articles/Yolov5说明书.json","keywords":null,"cover":[],"text":"$\\qquad$YOLO 的全称是 You Only Look Once，指只需要浏览一次就可以识别出图中的物体的类别和位置。YOLOv5 是由 Ultralytics LLC 公司于 2020 年 5 月所提出，其图像推理速度最快达 0.007 s，即每秒可处理 140 帧，满...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Machine Learning","slug":"Machine-Learning","count":3,"path":"api/categories/Machine-Learning.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1018」Public Bike Management","uid":"f49316d46cb145f81e643476c18ee695","slug":"1018-Public-Bike-Management","date":"2022-04-13T00:42:21.000Z","updated":"2022-07-04T03:55:46.505Z","comments":true,"path":"api/articles/1018-Public-Bike-Management.json","keywords":null,"cover":[],"text":"$\\qquad$There is a public bike service in Hangzhou City which provides great convenience to the tourists from all over the world. One may re...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"pair","slug":"pair","count":6,"path":"api/tags/pair.json"},{"name":"vector","slug":"vector","count":17,"path":"api/tags/vector.json"},{"name":"Dijkstra","slug":"Dijkstra","count":6,"path":"api/tags/Dijkstra.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}