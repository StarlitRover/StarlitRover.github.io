{"title":"Bison^Flex=语法分析生成中","uid":"1ebcc2044e1859de323771c4cf459a30","slug":"Bison-Flex-语法分析生成中","date":"2022-05-05T14:23:51.000Z","updated":"2022-05-22T11:37:41.903Z","comments":true,"path":"api/articles/Bison-Flex-语法分析生成中.json","keywords":null,"cover":[],"content":"<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>上古时代的时候（前一段时间参加了些些小竞赛，状态有点迷糊，五一又浪里个浪，所以…虽迟但到！），我们有讲解过<a href=\"/post/%E5%80%9F%E5%8A%A9flex%E5%AE%9E%E7%8E%B0SysY%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html\" title=\"借助Flex实现SysY词法分析\">借助Flex实现SysY词法分析</a>。词法分析是编译的第一阶段，仅仅只是将代码进行切块归类，得到的只是些零散的tokens。现在我们进入第二阶段，对这些token进行整理排序，以便后面可以方便地解读每句code的含义，即语义分析——构建<strong>抽象语法树AST</strong>。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>本文将阐述如何使用Bison联合Flex来生成语法分析器，并输出抽象语法树。</p>\n<span id=\"more\"></span>\n\n<hr>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>抽象语法树用树的数据结构将token们进行关联，非常抽象地展现了整体与部分的关系，就好似为一句话断句，使其结构一览无余。既然要为代码块进行“断句”，那么我们势必需要先清楚代码块拥有哪些结构层次。但结构层次并不是死板的，例如英语中正常的句子结构都是主谓宾，但并不是所有句子只有这种模式，句子中还可以有状语、补语等。代码也是如此，那么如何来描述一种编程语言所有可能的结构层次呢，就是所谓的文法。</p>\n<img src=\"/images/编译原理/2.png\" style=\"zoom:40%;\">\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>栗子胜千言，例如下面这个简单的文法<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.495ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 1987 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43A\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(786,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1064,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1709,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"/></g></g></g></svg></mjx-container></p>\n<pre class=\"line-numbers language-Grammar\" data-language=\"Grammar\"><code class=\"language-Grammar\">S → aSb | aAb\nA → bAa | ba<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>其中<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.459ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 645 727\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"/></g></g></g></svg></mjx-container>是<strong>开始符号</strong>，即文法推导中的第一个非终结符，也就是说这个文法描述的所有句子都可以由<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.459ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 645 727\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"/></g></g></g></svg></mjx-container>推导而来。一般大写字母表示的都是非终结符，即还可以继续推导的符号，小写字母就相对应的终结符。那么很显然，这个文法描述的所有句子可以用集合<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22.888ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 10116.6 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"7B\" d=\"M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(500,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(562,363) scale(0.707)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(1732.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(462,363) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(2669.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(562,363) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(3705.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(462,363) scale(0.707)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4838.2,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5116.2,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5994.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(6438.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(7316.7,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(8261.4,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"2115\" d=\"M20 664Q20 666 31 683H142Q256 683 258 681Q259 680 279 653T342 572T422 468L582 259V425Q582 451 582 490T583 541Q583 611 573 628T522 648Q500 648 493 654Q484 665 493 679L500 683H691Q702 676 702 666Q702 657 698 652Q688 648 680 648Q633 648 627 612Q624 601 624 294V-8Q616 -20 607 -20Q601 -20 596 -15Q593 -13 371 270L156 548L153 319Q153 284 153 234T152 167Q152 103 156 78T172 44T213 34Q236 34 242 28Q253 17 242 3L236 -1H36Q24 6 24 16Q24 34 56 34Q58 35 69 36T86 40T100 50T109 72Q111 83 111 345V603L96 619Q72 643 44 648Q20 648 20 664ZM413 419L240 648H120L136 628Q137 626 361 341T587 54L589 68Q589 78 589 121V192L413 419Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(755,-150) scale(0.707)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(9616.6,0)\"><path data-c=\"7D\" d=\"M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z\"/></g></g></g></svg></mjx-container>来表示。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>可以看到有限的推导式足以描述无穷的句子，但这些句子是具有一定语法规则的。而一种编程语言本身就是一些具有特定语法规则的句子，因此也可以用一个文法来表示，只不过推导式的数量稍微多了亿些。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>在不借助任何工具的情况下，要实现一个语法分析器就会有两种思路，其一是自底向上，就是将读入的token不断<strong>归约</strong>（推导的逆过程）为非终结符，直到剩下开始符号<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.459ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 645 727\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"/></g></g></g></svg></mjx-container>；另一种则是自顶向下，即从开始符号<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.459ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 645 727\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"/></g></g></g></svg></mjx-container>找到生成当前代码的推导过程，这里其实就是选择哪一条产生式的问题。两种思路本质上就是选择树的根还是叶子结点作为分析的起点来考虑的，但这并不是本文的重点，你只需知道Bison生成的语法分析器代码采用的是自底向上的思路，而我们只要提供给Bison相应的文法即可得到该文法对应语言的语法分析器。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>不过，带着一点语法分析原理的学习来阅读本文体验会更好哦</p>\n<hr>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>GNU Bison是一款用于自动生成语法分析器的程序，基于并兼容yacc，可用于所有常见的操作系统。Bison把LALR形式的上下文无关文法描述转换为可做语法分析的C或C++程序。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>Bison的输入文件<code>*.y</code>的基本格式如下，使用者需要将文法的一些基本信息写入该文件</p>\n<pre class=\"line-numbers language-Bison\" data-language=\"Bison\"><code class=\"language-Bison\">%start CompUnit\n%expect 1\n\n%{\n    #include \"parser.h\"\n    ...\n%}\n\n%union\n{\n    int     num;\n    char*   str;\n}\n\n/*声明Flex产生的token有三种格式，其中&lt;type&gt;不是必须的*/\n%token &lt;type1&gt; tokens1 /*类型为type1的token们*/\n%right &lt;type2&gt; tokens2 /*类型为type2的右结合token们*/\n%left &lt;type3&gt; tokens3  /*类型为type3的左结合token们*/\n\n/*声明非终结符的类型*/\n%type&lt;num&gt; Number CompUnit Decl ...\n\n%%\n/*Grammar Productions and Corresponding Actions*/\nCompUnit:       CompUnit Decl                     {$$=$1+$2;}\n                | CompUnit FuncDef                {$$=$1-$2;}\nDecl:           ConstDecl    %prec    token3      {$$=$1*10;}\n                | /*ε*/                                {}\n...\n%%\n\nint main()\n{\n    yyparse();\n    ...\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><p>第一句<code>%start ...</code>是声明文法的开始符号，后面紧跟一个非终结符</p>\n</li>\n<li><p><code>%expect n</code>表示你知道这个文法中存在n个<strong>移入/归约冲突</strong>（在某一个时刻既可以选择归约为非终结符也可以选择读入下一个token），并且认同Bison默认的处理方式，那么在生成语法分析器时若Bison确实发现了n个冲突就不会提醒你，否则会有提示（不加也没有关系，这句不是必要的）</p>\n<pre class=\"line-numbers language-Bison\" data-language=\"Bison\"><code class=\"language-Bison\">*.y: conflicts: n shift/reduce<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><code>%{...}%</code>中间则和Flex类似，可以放一些头文件，这一部分会被直接添入生成代码的靠前部分</p>\n</li>\n<li><p><code>%union{...}</code>则是对之后需要用到的类型声明，即后面<strong>token</strong>和<strong>非终结符</strong>的类型都只能取自union中声明的符号，在上面的文件中只能用<code>num</code>、<code>str</code>来声明类型</p>\n</li>\n<li><p>对Flex生成的token进行声明，使Bison知道有哪些token存在，另外可以通过<code>&lt;type&gt;</code>对token的类型进行声明（默认为<code>int</code>），这样当Flex返回token时我们可以认为返回的是一个type类型的变量，而对于token的赋值则是在Flex中完成的，如此可以使Bison和Flex之间存在信息交互</p>\n</li>\n<li><p><code>%right</code>和<code>%left</code>也是token的一种声明方式，分别表示右结合和左结合，多用于运算符token的声明上</p>\n</li>\n<li><p>token的声明顺序决定了语法优先级，从上至下优先级逐渐升高，同一行的token优先级相同，多用于运算符token的声明，优先级高的token先进行归约</p>\n</li>\n<li><p><code>%type&lt;&gt; ...</code>则是声明非终结符的类型，类型依然只能取自<code>%union{...}</code>中，token的值是在Flex与Bison之间传递，而非终结符的值则是在产生式之间传递，即当一个非终结符A被归约出来后，我们可以对其进行相应类型的赋值，随后在A被归约时则会带着之前的赋值从产生式左部转移到另一个产生式的右部，那么我们就可以用A的值来定义新归约出来的非终结符的值</p>\n</li>\n<li><p><code>%%...%%</code>之间则是最重要的语法规则以及相应的动作，只不过产生式中的【→】变成了【:】</p>\n</li>\n<li><p>每一个产生式的右部可能有好几种推导结果（由【｜】进行分隔），我们认为不同的右部代表着不同的产生式，而每一个产生式后面都可以跟相应的一系列操作【{…}】，表示发生这一个产生式的归约时会执行的相应动作</p>\n</li>\n<li><p>操作中我们可以用【<span>$</span>】来引用产生式中的每一个token以及终结符，其中【<span>$</span><span>$</span>】表示产生式左部的非终结符（冒号左边的非终结符），【$n】表示产生式右部第n个<strong>非终结符/token/字符串</strong>的值</p>\n<p>⚠️当【<span>$</span>n】是一个字符串常量时，Bison会提示这个【<span>$</span>n】没有声明类型，但不会影响程序的运行，当然你觉得难受的话可以直接将其替换成字符串的字面值</p>\n</li>\n<li><p>产生式的右部是可以为空的，这就相当于文法中的空串<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.919ex\" height=\"1ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -431 406 442\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"/></g></g></g></svg></mjx-container></p>\n</li>\n<li><p>产生式中<code>%prec token_name</code>可以使<code>%prec</code>左边的产生式具有和<code>token_name</code>相同的优先级</p>\n</li>\n<li><p>最下面的部分也跟Flex类似，会被直接复制到生成代码的底部，函数<code>yyparse()</code>会执行语法分析过程，接下来你可以增加一些输出分析结果的代码</p>\n</li>\n<li><p>以上只是Bison最基础的规则，希望更加全面系统地学习可以参阅<a href=\"http://home.ustc.edu.cn/~guoxing/ebooks/flex%E4%B8%8Ebison%E4%B8%AD%E6%96%87%E7%89%88.pdf\">《flex与bison》</a>.</p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"parserh\">∫  “parser.h”</span></h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdarg.h&gt;</span></span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> yylineno<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> yytext<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">yylex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{</span>NUM<span class=\"token punctuation\">,</span>TEXT<span class=\"token punctuation\">}</span> TYPE<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">yyerror</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[1;31m%s at line %d\\033[0m: %s\\n\"</span><span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">,</span>yylineno<span class=\"token punctuation\">,</span>yytext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">OCT2DEC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">HEX2DEC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;=</span><span class=\"token char\">'0'</span><span class=\"token operator\">&amp;&amp;</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span>\n            sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;=</span><span class=\"token char\">'a'</span><span class=\"token operator\">&amp;&amp;</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span><span class=\"token char\">'f'</span><span class=\"token punctuation\">)</span>\n            sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'a'</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'A'</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ASTnode</span>\n<span class=\"token punctuation\">{</span>\n    TYPE type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> text<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ASTnode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ASTnode</span><span class=\"token operator\">*</span> child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>ASTnode<span class=\"token punctuation\">;</span>\n\nASTnode<span class=\"token operator\">*</span> ASThead<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//generate new node</span>\nASTnode<span class=\"token operator\">*</span> <span class=\"token function\">newASTnode</span><span class=\"token punctuation\">(</span>TYPE type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> ASTnode<span class=\"token operator\">*</span> nxt<span class=\"token punctuation\">,</span> ASTnode<span class=\"token operator\">*</span> child<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    ASTnode<span class=\"token operator\">*</span> node<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ASTnode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ASTnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//不是sizeof(ASTnode*)!!!</span>\n    node<span class=\"token operator\">-&gt;</span>type<span class=\"token operator\">=</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">==</span>TEXT<span class=\"token punctuation\">)</span>\n        node<span class=\"token operator\">-&gt;</span>text<span class=\"token operator\">=</span><span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        node<span class=\"token operator\">-&gt;</span>num<span class=\"token operator\">=</span>num<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>nxt<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-&gt;</span>child<span class=\"token operator\">=</span>child<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//connect sibling nodes</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">connectASTnode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    va_list valist<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>valist<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ASTnode<span class=\"token operator\">*</span> node<span class=\"token operator\">=</span><span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>valist<span class=\"token punctuation\">,</span>ASTnode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        ASTnode<span class=\"token operator\">*</span> next<span class=\"token operator\">=</span><span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>valist<span class=\"token punctuation\">,</span>ASTnode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span>next<span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">=</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    node<span class=\"token operator\">-&gt;</span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>valist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">outputAST</span><span class=\"token punctuation\">(</span>ASTnode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> tab<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>head<span class=\"token operator\">-&gt;</span>type<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> NUM<span class=\"token operator\">:</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[1;35m%d\\033[0m\\n\"</span><span class=\"token punctuation\">,</span>head<span class=\"token operator\">-&gt;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> TEXT<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">-&gt;</span>child<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[1;32m%s\\033[0m\\n\"</span><span class=\"token punctuation\">,</span>head<span class=\"token operator\">-&gt;</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[1;34m%s\\033[0m\\n\"</span><span class=\"token punctuation\">,</span>head<span class=\"token operator\">-&gt;</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ASTnode<span class=\"token operator\">*</span> node<span class=\"token operator\">=</span>head<span class=\"token operator\">-&gt;</span>child<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>tab<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"└───────\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">outputAST</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>tab<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">=</span>node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">freeAST</span><span class=\"token punctuation\">(</span>ASTnode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    ASTnode <span class=\"token operator\">*</span>node<span class=\"token operator\">=</span>head<span class=\"token operator\">-&gt;</span>child<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">freeAST</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">=</span>node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">-&gt;</span>type<span class=\"token operator\">==</span>TEXT<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">-&gt;</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><p>这个头文件中主要包括了AST的构建、输出、释放等函数，还有8进制、16进制转十进制数的函数</p>\n</li>\n<li><p>节点<code>ASTnode</code>中既可以存字符串也可以存整型，<code>TYPE type</code>指明了这个节点存储的数据类型，其中<code>TYPE</code>是一个枚举类型</p>\n</li>\n<li><p>前面3个<code>extern</code>声明了Flex（lex.yy.c）中自带的三个变量，从而可以在Bison中使用</p>\n</li>\n<li><p><code>yyerror</code>是Bison无法归约时会调用的报错函数，这里它会输出出错信息、出错行数以及出错字符串</p>\n</li>\n<li><p><code>connectASTnode</code>函数使用了C语言中多参数函数的机制，可以连接任意个数的兄弟节点，每天一个<code>make bug</code>小魔法</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">#include &lt;stdarg.h&gt;\n// num is number of parameters in ...\ntype func_name(int num,...)\n{\n  // 声明参数列表\n    va_list valist;\n    va_start(valist,num);\n  // 以TYPE类型取出参数\n    TYPE val=va_arg(valist,TYPE);\n    for(int i=1;i&lt;num;++i)\n    {\n        TYPE next=va_arg(valist,TYPE);\n        ...\n    }\n    va_end(valist);\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>C语言不知道怎么输出树，所以采用了文件树的形式，以tab数表示该节点所处的深度，每个节点的父节点都是其上方最近的tab-1节点</p>\n</li>\n<li><p>用全局变量<code>ASThead</code>来存储AST的头节点，我们只需要在每次执行<strong>归约到开始符号</strong>（即左部是开始符号）的产生式时将开始符号的节点赋值给<code>ASThead</code>，那么最后一次赋值（即最后一次归约）的必然是AST的头节点</p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"sysyl\">∬ SysY.l</span></h2><pre class=\"line-numbers language-Flex\" data-language=\"Flex\"><code class=\"language-Flex\">%option yylineno\n\n%{\n    #include \"SysY.tab.h\"\n    #define UNEXPECTED 0\n%}\n\nINT                 int\nVOID                void\nCONST               const\nIF                  if\nELSE                else\nWHILE               while\nBREAK               break\nCONTINUE            continue\nRETURN              return\nMULDIVSUR           \"*\"|\"/\"|\"%\"\nADDSUB              \"+\"|\"-\"\nCMP                 \"&lt;\"|\"&gt;\"|\"&lt;=\"|\"&gt;=\"\nEQNEQ               \"==\"|\"!=\"\nASSIGN              \"=\"\nNONZERO             [1-9]\nDIGIT               [0-9]\nLETTER              [A-Za-z]\nOCTAL_DIGIT         [0-7]\nOCTAL_CONST         0{OCTAL_DIGIT}*\nILLEGAL_OCTAL_CONST 0[0-9a-wy-zA-WY-Z]({LETTER}|{DIGIT})*\nHEX_PREFIX          0x|0X\nHEX_DIGIT           [0-9a-fA-F]\nHEX_CONST           {HEX_PREFIX}{HEX_DIGIT}+\nILLEGAL_HEX_CONST   {HEX_PREFIX}({LETTER}|{DIGIT})*\nNONDIGIT            {LETTER}|\"_\"\nID                  {NONDIGIT}({DIGIT}|{NONDIGIT})*\nDEC_CONST           {NONZERO}{DIGIT}*  \nCOMMENT1            \"/*\"[^*]*\"*\"+([^*/][^*]*\"*\"+)*\"/\"\nCOMMENT2            \"//\".*                                                                                \n\n%%\n\n{INT}                   { yylval.str=strdup(yytext); return INT; }\n{VOID}                  { yylval.str=strdup(yytext); return VOID; }\n{OCTAL_CONST}           { yylval.str=strdup(yytext); return OCTAL_CONST; }\n{ILLEGAL_OCTAL_CONST}   { yylval.str=strdup(yytext); return HEX_CONST; }\n{HEX_CONST}             { yylval.str=strdup(yytext); return HEX_CONST; }\n{ILLEGAL_HEX_CONST}     { yylval.str=strdup(yytext); return DEC_CONST; }\n{DEC_CONST}             { yylval.str=strdup(yytext); return DEC_CONST; }\n{CONST}                 { yylval.str=strdup(yytext); return CONST; }\n{IF}                    { yylval.str=strdup(yytext); return IF; }\n{ELSE}                  { yylval.str=strdup(yytext); return ELSE; }\n{WHILE}                 { yylval.str=strdup(yytext); return WHILE; }\n{BREAK}                 { yylval.str=strdup(yytext); return BREAK; }\n{CONTINUE}              { yylval.str=strdup(yytext); return CONTINUE; }\n{RETURN}                { yylval.str=strdup(yytext); return RETURN; }\n{MULDIVSUR}             { yylval.str=strdup(yytext); return MULDIVSUR; } \n{ADDSUB}                { yylval.str=strdup(yytext); return ADDSUB; } \n{CMP}                   { yylval.str=strdup(yytext); return CMP; } \n{EQNEQ}                 { yylval.str=strdup(yytext); return EQNEQ; } \n{ASSIGN}                { yylval.str=strdup(yytext); return ASSIGN; }\n{ID}                    { yylval.str=strdup(yytext); return ID; }\n\"(\"                     { yylval.str=strdup(yytext); return yytext[0]; }\n\")\"                     { yylval.str=strdup(yytext); return yytext[0]; }\n\"[\"                     { yylval.str=strdup(yytext); return yytext[0]; }\n\"]\"                     { yylval.str=strdup(yytext); return yytext[0]; }\n\"{\"                     { yylval.str=strdup(yytext); return yytext[0]; }\n\"}\"                     { yylval.str=strdup(yytext); return yytext[0]; }\n\";\"                     { yylval.str=strdup(yytext); return yytext[0]; }\n\",\"                     { yylval.str=strdup(yytext); return yytext[0]; }\n\"&amp;&amp;\"                    { yylval.str=strdup(yytext); return AND; }\n\"||\"                    { yylval.str=strdup(yytext); return OR; }\n{COMMENT1}|{COMMENT2}   { }\n[ \\t\\n]                 { }\n.                       { yylval.str=strdup(yytext); return UNEXPECTED; }\n%%\n\nint yywrap(void) \n{ \n    return 1;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>“SysY.tab.h”是<code>bison -d SysY.y</code>产生的，Bison会将你声明的token进行enum放在生成的头文件”SysY.tab.h”中，所以你无需自己再写一个”translator.h”</li>\n<li>注意在Flex中需要完成对token的赋值，如果token的类型为TYPE（取自<code>%union</code>），那么你需要以<code>yylval.TYPE=...</code>的形式进行赋值，然后<code>return token_name;</code></li>\n<li><code>char* strdup(char *s)</code>函数会开辟一段新的空间并复制字符串s的值，然后返回新空间的指针（需要<code>free</code>）</li>\n</ol>\n<hr>\n<h2><span id=\"sysyy\">∭ SysY.y</span></h2><pre class=\"line-numbers language-Bison\" data-language=\"Bison\"><code class=\"language-Bison\">%start CompUnit\n%expect 1\n\n%{\n    #include \"parser.h\"\n%}\n\n%union\n{\n    int     num;\n    char*   str;\n    struct ASTnode* node; /*\"struct\" is indispensable*/\n}\n\n%token &lt;str&gt; INT VOID CONST IF ELSE WHILE BREAK CONTINUE RETURN ID OCTAL_CONST HEX_CONST DEC_CONST\n%right &lt;str&gt; ASSIGN\n%left &lt;str&gt; OR\n%left &lt;str&gt; AND\n%left &lt;str&gt; EQNEQ\n%left &lt;str&gt; CMP\n%left &lt;str&gt; ADDSUB\n%left &lt;str&gt; MULDIVSUR\n\n%type&lt;node&gt; Number CompUnit Decl FuncDef ConstDecl VarDecl ConstDef ConstDefBlock ConstExpBlock ConstInitVal ConstExp ConstInitFlag ConstValBlock VarDef\n    VarDefFlag InitVal Exp InitValFlag InitValBlock FuncFParams Block FuncFParam FuncFParamBlock ExpBlockFlag ExpBlock BlockItemBlock BlockItem \n    Stmt LVal ExpFlag StmtFlag Cond AddExp LOrExp PrimaryExp UnaryExp FuncFParamsFlag FuncRParams UNARYOP CommaExpBlock MulExp RelExp EqExp LAndExp\n\n%%\nCompUnit:       CompUnit Decl                           {\n                                                            connectASTnode(2,$1,$2);\n                                                            ASThead=$$=newASTnode(TEXT,\"CompUnit\",0,NULL,$1);\n                                                        }\n                | CompUnit FuncDef                      {\n                                                            connectASTnode(2,$1,$2);\n                                                            ASThead=$$=newASTnode(TEXT,\"CompUnit\",0,NULL,$1);\n                                                        }\n                | Decl                                  {ASThead=$$=newASTnode(TEXT,\"CompUnit\",0,NULL,$1);}\n                | FuncDef                               {ASThead=$$=newASTnode(TEXT,\"CompUnit\",0,NULL,$1);}\nDecl:           ConstDecl                               {$$=newASTnode(TEXT,\"Decl\",0,NULL,$1);}\n                | VarDecl                               {$$=newASTnode(TEXT,\"Decl\",0,NULL,$1);}\nConstDecl:      CONST INT ConstDef ConstDefBlock ';'    {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n2=newASTnode(TEXT,$2,0,NULL,NULL),\n                                                                    *n5=newASTnode(TEXT,\";\",0,NULL,NULL);\n                                                            connectASTnode(5,n1,n2,$3,$4,n5);\n                                                            $$=newASTnode(TEXT,\"ConstDecl\",0,NULL,n1);\n                                                        }\nConstDefBlock:  ConstDefBlock ',' ConstDef              {\n                                                            ASTnode *n=newASTnode(TEXT,\",\",0,$3,NULL);\n                                                            connectASTnode(3,$1,n,$3);\n                                                            $$=newASTnode(TEXT,\"ConstDefBlock\",0,NULL,$1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"ConstDefBlock\",0,NULL,n);\n                                                        }\nConstDef:       ID ConstExpBlock ASSIGN ConstInitVal    {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n3=newASTnode(TEXT,$3,0,NULL,NULL);\n                                                            connectASTnode(4,n1,$2,n3,$4);\n                                                            $$=newASTnode(TEXT,\"ConstDef\",0,NULL,n1);\n                                                        }\nConstExpBlock:  ConstExpBlock '[' ConstExp ']'          {\n                                                            ASTnode *n2=newASTnode(TEXT,\"[\",0,NULL,NULL),\n                                                                    *n4=newASTnode(TEXT,\"]\",0,NULL,NULL);\n                                                            connectASTnode(4,$1,n2,$3,n4);\n                                                            $$=newASTnode(TEXT,\"ConstExpBlock\",0,NULL,$1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"ConstExpBlock\",0,NULL,n);\n                                                        }\nConstInitVal:   ConstExp                                {$$=newASTnode(TEXT,\"ConstInitVal\",0,NULL,$1);}\n                |'{'ConstInitFlag'}'                    {\n                                                            ASTnode *n1=newASTnode(TEXT,\"{\",0,NULL,NULL),\n                                                                    *n3=newASTnode(TEXT,\"}\",0,NULL,NULL);\n                                                            connectASTnode(3,n1,$2,n3);\n                                                            $$=newASTnode(TEXT,\"ConstInitVal\",0,NULL,n1);\n                                                        }\nConstInitFlag:  ConstInitVal ConstValBlock              {\n                                                            connectASTnode(2,$1,$2);\n                                                            $$=newASTnode(TEXT,\"ConstInitFlag\",0,NULL,$1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"ConstInitFlag\",0,NULL,n);\n                                                        }\nConstValBlock:  ConstValBlock ',' ConstInitVal          {\n                                                            ASTnode *n2=newASTnode(TEXT,\",\",0,NULL,NULL);\n                                                            connectASTnode(3,$1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"ConstValBlock\",0,NULL,$1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"ConstValBlock\",0,NULL,n);\n                                                        }\nVarDecl:        INT VarDef VarDefFlag ';'               {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n4=newASTnode(TEXT,\";\",0,NULL,NULL);\n                                                            connectASTnode(4,n1,$2,$3,n4);\n                                                            $$=newASTnode(TEXT,\"VarDecl\",0,NULL,n1);\n                                                        }\nVarDefFlag:    ',' VarDef VarDefFlag                    {\n                                                            ASTnode *n1=newASTnode(TEXT,\",\",0,NULL,NULL);\n                                                            connectASTnode(3,n1,$2,$3);\n                                                            $$=newASTnode(TEXT,\"VarDefFlag\",0,NULL,n1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"VarDefFlag\",0,NULL,n);\n                                                        }\nVarDef:         ID ConstExpBlock                        {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL);\n                                                            connectASTnode(2,n1,$2);\n                                                            $$=newASTnode(TEXT,\"VarDef\",0,NULL,n1);\n                                                        }\n                | ID ConstExpBlock ASSIGN InitVal       {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n3=newASTnode(TEXT,$3,0,NULL,NULL);\n                                                            connectASTnode(4,n1,$2,n3,$4);\n                                                            $$=newASTnode(TEXT,\"VarDef\",0,NULL,n1);\n                                                        }\nInitVal:          Exp                                   {$$=newASTnode(TEXT,\"InitVal\",0,NULL,$1);}\n                | '{'InitValFlag'}'                     {\n                                                            ASTnode *n1=newASTnode(TEXT,\"{\",0,NULL,NULL),\n                                                                    *n3=newASTnode(TEXT,\"}\",0,NULL,NULL);\n                                                            connectASTnode(3,n1,$2,n3);\n                                                            $$=newASTnode(TEXT,\"InitVal\",0,NULL,n1);\n                                                        }\nInitValFlag:    InitVal InitValBlock                    {\n                                                            connectASTnode(2,$1,$2);\n                                                            $$=newASTnode(TEXT,\"InitValFlag\",0,NULL,$1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"InitValFlag\",0,NULL,n);\n                                                        }\nInitValBlock:   InitValBlock ',' InitVal                {\n                                                            ASTnode *n2=newASTnode(TEXT,\",\",0,NULL,NULL);\n                                                            connectASTnode(3,$1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"InitValBlock\",0,NULL,$1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"InitValFlag\",0,NULL,n);\n                                                        }\nFuncDef:        INT ID '(' FuncFParams')' Block         {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n2=newASTnode(TEXT,$2,0,NULL,NULL),\n                                                                    *n3=newASTnode(TEXT,\"(\",0,NULL,NULL),\n                                                                    *n5=newASTnode(TEXT,\")\",0,NULL,NULL);\n                                                            connectASTnode(6,n1,n2,n3,$4,n5,$6);\n                                                            $$=newASTnode(TEXT,\"FuncDef\",0,NULL,n1);\n                                                        }\n                | VOID ID '(' FuncFParams')' Block      {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n2=newASTnode(TEXT,$2,0,NULL,NULL),\n                                                                    *n3=newASTnode(TEXT,\"(\",0,NULL,NULL),\n                                                                    *n5=newASTnode(TEXT,\")\",0,NULL,NULL);\n                                                            connectASTnode(6,n1,n2,n3,$4,n5,$6);\n                                                            $$=newASTnode(TEXT,\"FuncDef\",0,NULL,n1);\n                                                        }\nFuncFParams:    FuncFParam FuncFParamBlock              {\n                                                            connectASTnode(2,$1,$2);\n                                                            $$=newASTnode(TEXT,\"FuncFParams\",0,NULL,$1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"FuncFParams\",0,NULL,n);\n                                                        }\nFuncFParamBlock:FuncFParamBlock ',' FuncFParam          {\n                                                            ASTnode *n2=newASTnode(TEXT,\",\",0,NULL,NULL);\n                                                            connectASTnode(3,$1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"FuncFParamBlock\",0,NULL,$1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"FuncFParamBlock\",0,NULL,n);\n                                                        }\nFuncFParam:     INT ID ExpBlockFlag                     {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n2=newASTnode(TEXT,$2,0,NULL,NULL);\n                                                            connectASTnode(3,n1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"FuncFParam\",0,NULL,n1);\n                                                        }\nExpBlockFlag:   '['']' ExpBlock                         {\n                                                            ASTnode *n1=newASTnode(TEXT,\"[\",0,NULL,NULL),\n                                                                    *n2=newASTnode(TEXT,\"]\",0,NULL,NULL);\n                                                            connectASTnode(3,n1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"ExpBlockFlag\",0,NULL,n1);\n                                                        }\nExpBlock:       ExpBlock '['Exp']'                      {\n                                                            ASTnode *n2=newASTnode(TEXT,\"[\",0,NULL,NULL),\n                                                                    *n4=newASTnode(TEXT,\"]\",0,NULL,NULL);\n                                                            connectASTnode(4,$1,n2,$3,n4);\n                                                            $$=newASTnode(TEXT,\"FuncDef\",0,NULL,$1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"ExpBlock\",0,NULL,n);\n                                                        }\nBlock:          '{' BlockItemBlock '}'                  {\n                                                            ASTnode *n1=newASTnode(TEXT,\"{\",0,NULL,NULL),\n                                                                    *n3=newASTnode(TEXT,\"}\",0,NULL,NULL);\n                                                            connectASTnode(3,n1,$2,n3);\n                                                            $$=newASTnode(TEXT,\"Block\",0,NULL,n1);\n                                                        }\nBlockItemBlock: BlockItemBlock BlockItem                {\n                                                            connectASTnode(2,$1,$2);\n                                                            $$=newASTnode(TEXT,\"BlockItemBlock\",0,NULL,$1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"BlockItemBlock\",0,NULL,n);\n                                                        }\nBlockItem:        Decl                                  {$$=newASTnode(TEXT,\"BlockItem\",0,NULL,$1);}\n                | Stmt                                  {$$=newASTnode(TEXT,\"BlockItem\",0,NULL,$1);}\nStmt:           LVal ASSIGN Exp ';' %prec ASSIGN        {\n                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL),\n                                                                    *n4=newASTnode(TEXT,\";\",0,NULL,NULL);\n                                                            connectASTnode(4,$1,n2,$3,n4);\n                                                            $$=newASTnode(TEXT,\"Stmt\",0,NULL,$1);\n                                                        }\n                | ExpFlag';'                            {\n                                                            ASTnode *n2=newASTnode(TEXT,\";\",0,NULL,NULL);\n                                                            connectASTnode(2,$1,n2);\n                                                            $$=newASTnode(TEXT,\"Stmt\",0,NULL,$1);\n                                                        }\n                | Block                                 {$$=newASTnode(TEXT,\"Stmt\",0,NULL,$1);}\n                | IF'('Cond')' Stmt StmtFlag            {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n2=newASTnode(TEXT,\"(\",0,NULL,NULL),\n                                                                    *n4=newASTnode(TEXT,\")\",0,NULL,NULL);\n                                                            connectASTnode(6,n1,n2,$3,n4,$5,$6);\n                                                            $$=newASTnode(TEXT,\"Stmt\",0,NULL,n1);\n                                                        }\n                | WHILE'('Cond')' Stmt                  {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n2=newASTnode(TEXT,\"(\",0,NULL,NULL),\n                                                                    *n4=newASTnode(TEXT,\")\",0,NULL,NULL);\n                                                            connectASTnode(5,n1,n2,$3,n4,$5);\n                                                            $$=newASTnode(TEXT,\"Stmt\",0,NULL,n1);\n                                                        }\n                | BREAK';'                              {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n2=newASTnode(TEXT,\";\",0,NULL,NULL);\n                                                            connectASTnode(2,n1,n2);\n                                                            $$=newASTnode(TEXT,\"Stmt\",0,NULL,n1);\n                                                        }\n                | CONTINUE';'                           {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n2=newASTnode(TEXT,\";\",0,NULL,NULL);\n                                                            connectASTnode(2,n1,n2);\n                                                            $$=newASTnode(TEXT,\"Stmt\",0,NULL,n1);\n                                                        }\n                | RETURN ExpFlag';'                     {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n3=newASTnode(TEXT,\";\",0,NULL,NULL);\n                                                            connectASTnode(3,n1,$2,n3);\n                                                            $$=newASTnode(TEXT,\"Stmt\",0,NULL,n1);\n                                                        }\nExpFlag:          Exp                                   {$$=newASTnode(TEXT,\"ExpFlag\",0,NULL,$1);}\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"ExpFlag\",0,NULL,n);\n                                                        }\nStmtFlag:       ELSE Stmt                               {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL);\n                                                            connectASTnode(2,n1,$2);\n                                                            $$=newASTnode(TEXT,\"StmtFlag\",0,NULL,n1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"StmtFlag\",0,NULL,n);\n                                                        }\nExp:            AddExp                                  {$$=newASTnode(TEXT,\"Exp\",0,NULL,$1);}\nCond:           LOrExp                                  {$$=newASTnode(TEXT,\"Cond\",0,NULL,$1);}\nLVal:           ID ExpBlock                             {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL);\n                                                            connectASTnode(2,n1,$2);\n                                                            $$=newASTnode(TEXT,\"LVal\",0,NULL,n1);\n                                                        }\nPrimaryExp:     '('Exp')'                               {\n                                                            ASTnode *n1=newASTnode(TEXT,\"(\",0,NULL,NULL),\n                                                                    *n3=newASTnode(TEXT,\")\",0,NULL,NULL);\n                                                            connectASTnode(3,n1,$2,n3);\n                                                            $$=newASTnode(TEXT,\"PrimaryExp\",0,NULL,n1);\n                                                        }\n                | LVal                                  {$$=newASTnode(TEXT,\"PrimaryExp\",0,NULL,$1);}\n                | Number                                {$$=newASTnode(TEXT,\"PrimaryExp\",0,NULL,$1);}\nNumber:         OCTAL_CONST                             {\n                                                            ASTnode *n=newASTnode(NUM,NULL,OCT2DEC($1),NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"Number\",0,NULL,n);\n                                                        }\n                | HEX_CONST                             {\n                                                            ASTnode *n=newASTnode(NUM,NULL,HEX2DEC($1),NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"Number\",0,NULL,n);\n                                                        }\n                | DEC_CONST                             {\n                                                            ASTnode *n=newASTnode(NUM,NULL,atoi($1),NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"Number\",0,NULL,n);\n                                                        }\nUnaryExp:       PrimaryExp                              {$$=newASTnode(TEXT,\"UnaryExp\",0,NULL,$1);}\n                | ID '(' FuncFParamsFlag ')'            {\n                                                            ASTnode *n1=newASTnode(TEXT,$1,0,NULL,NULL),\n                                                                    *n2=newASTnode(TEXT,\"(\",0,NULL,NULL),\n                                                                    *n4=newASTnode(TEXT,\")\",0,NULL,NULL);\n                                                            connectASTnode(4,n1,n2,$3,n4);\n                                                            $$=newASTnode(TEXT,\"PrimaryExp\",0,NULL,n1);\n                                                        }\n                | UNARYOP UnaryExp                      {\n                                                            connectASTnode(2,$1,$2);\n                                                            $$=newASTnode(TEXT,\"UnaryExp\",0,NULL,$1);\n                                                        }\nFuncFParamsFlag:FuncRParams                             {$$=newASTnode(TEXT,\"FuncFParamsFlag\",0,NULL,$1);}\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"FuncFParamsFlag\",0,NULL,n);\n                                                        }\nFuncRParams:    Exp CommaExpBlock                       {\n                                                            connectASTnode(2,$1,$2);\n                                                            $$=newASTnode(TEXT,\"FuncRParams\",0,NULL,$1);\n                                                        }\nCommaExpBlock:  CommaExpBlock ',' Exp                   {\n                                                            ASTnode *n2=newASTnode(TEXT,\",\",0,NULL,NULL);\n                                                            connectASTnode(3,$1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"CommaExpBlock\",0,NULL,$1);\n                                                        }\n                | /*ε*/                                 {\n                                                            ASTnode *n=newASTnode(TEXT,\"ε\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"CommaExpBlock\",0,NULL,n);\n                                                        }\nUNARYOP:        ADDSUB                                  {\n                                                            ASTnode *n=newASTnode(TEXT,$1,0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"UNARYOP\",0,NULL,n);\n                                                        }\n                | '!'                                   {\n                                                            ASTnode *n=newASTnode(TEXT,\"!\",0,NULL,NULL);\n                                                            $$=newASTnode(TEXT,\"UNARYOP\",0,NULL,n);\n                                                        }\nMulExp:         UnaryExp                                {$$=newASTnode(TEXT,\"MulExp\",0,NULL,$1);}\n                | MulExp MULDIVSUR UnaryExp             {\n                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);\n                                                            connectASTnode(3,$1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"MulExp\",0,NULL,$1);\n                                                        }\nAddExp:         MulExp                                  {$$=newASTnode(TEXT,\"AddExp\",0,NULL,$1);}\n                | AddExp ADDSUB MulExp                  {\n                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);\n                                                            connectASTnode(3,$1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"MulExp\",0,NULL,$1);\n                                                        }\nRelExp:         AddExp                                  {$$=newASTnode(TEXT,\"RelExp\",0,NULL,$1);}\n                | RelExp CMP AddExp                     {\n                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);\n                                                            connectASTnode(3,$1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"RelExp\",0,NULL,$1);\n                                                        }\nEqExp:          RelExp                                  {$$=newASTnode(TEXT,\"EqExp\",0,NULL,$1);}\n                | EqExp EQNEQ RelExp                    {\n                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);\n                                                            connectASTnode(3,$1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"EqExp\",0,NULL,$1);\n                                                        }\nLAndExp:        EqExp                                   {$$=newASTnode(TEXT,\"LAndExp\",0,NULL,$1);}\n                | LAndExp AND EqExp                     {\n                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);\n                                                            connectASTnode(3,$1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"LAndExp\",0,NULL,$1);\n                                                        }\nLOrExp:         LAndExp                                 {$$=newASTnode(TEXT,\"LOrExp\",0,NULL,$1);}\n                | LOrExp OR LAndExp                     {\n                                                            ASTnode *n2=newASTnode(TEXT,$2,0,NULL,NULL);\n                                                            connectASTnode(3,$1,n2,$3);\n                                                            $$=newASTnode(TEXT,\"LOrExp\",0,NULL,$1);\n                                                        }\nConstExp:       AddExp                                  {$$=newASTnode(TEXT,\"ConstExp\",0,NULL,$1);}\n%%\n\nint main()\n{\n    yyparse();\n    outputAST(ASThead,0);\n    freeAST(ASThead);\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3><span id=\"testc\">Test.c</span></h3><pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int main()\n{\n    int bb = 0x12d23;\n    if (abc &gt;= bb) // hello\n            return 8;\n    /*This is a test\n    */\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3><span id=\"cast-magic\">Cast Magic 🪄</span></h3><pre class=\"line-numbers language-zsh\" data-language=\"zsh\"><code class=\"language-zsh\">flex SysY.l\nbison -d SysY.y\nclang SysY.tab.c lex.yy.c\ncat test.c|./a.out<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3><span id=\"output\">Output</span></h3><p><img src=\"/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.png\"></p>\n","text":"上古时代的时候（前一段时间参加了些些小竞赛，状态有点迷糊，五一又浪里个浪，所以…虽迟但到！），我们有讲解过借助Flex实现SysY词法分析。词法分析是编译的第一阶段，仅仅只是将代码进行切块归类，得到的只是些零散的tokens。现在我们进入第二阶段，对这些token进行整理排序，以...","link":"","photos":[],"count_time":{"symbolsCount":"41k","symbolsTime":"37 mins."},"categories":[{"name":"编译原理","slug":"编译原理","count":7,"path":"api/categories/编译原理.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">∫  “parser.h”</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">∬ SysY.l</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">∭ SysY.y</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Test.c</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Cast Magic 🪄</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output</span></a></li></ol></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"YOLOv5说明书","uid":"4eb946cc0edf20ceda9a686ce0927f5a","slug":"Yolov5说明书","date":"2022-05-07T03:54:21.000Z","updated":"2022-06-06T16:32:40.579Z","comments":true,"path":"api/articles/Yolov5说明书.json","keywords":null,"cover":[],"text":"YOLO 的全称是 You Only Look Once，指只需要浏览一次就可以识别出图中的物体的类别和位置。YOLOv5 是由 Ultralytics LLC 公司于 2020 年 5 月所提出，其图像推理速度最快达 0.007 s，即每秒可处理 140 帧，满足视频图像实时检...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Machine Learning","slug":"Machine-Learning","count":3,"path":"api/categories/Machine-Learning.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1018」Public Bike Management","uid":"f49316d46cb145f81e643476c18ee695","slug":"1018-Public-Bike-Management","date":"2022-04-13T00:42:21.000Z","updated":"2022-07-04T03:55:46.505Z","comments":true,"path":"api/articles/1018-Public-Bike-Management.json","keywords":null,"cover":[],"text":"There is a public bike service in Hangzhou City which provides great convenience to the tourists from all over the world. One may rent a bik...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"pair","slug":"pair","count":6,"path":"api/tags/pair.json"},{"name":"vector","slug":"vector","count":17,"path":"api/tags/vector.json"},{"name":"Dijkstra","slug":"Dijkstra","count":6,"path":"api/tags/Dijkstra.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}