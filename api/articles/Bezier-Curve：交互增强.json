{"title":"Bézier Curve：交互增强","uid":"d3ed745153d9df10022e8be01ae8a15a","slug":"Bezier-Curve：交互增强","date":"2022-04-01T12:20:10.000Z","updated":"2022-05-19T00:16:30.206Z","comments":true,"path":"api/articles/Bezier-Curve：交互增强.json","keywords":null,"cover":[],"content":"<h2><span id=\"︎-preface\">☘︎ Preface</span></h2><p>$\\qquad$在很久很久的以前，我有介绍过Bézier Curve的理论推导以及基本实现过程（<a href=\"/post/Bezier-Curve.html\" title=\"Bézier Curve：小试牛刀\">Bézier Curve：小试牛刀</a>）。但不难看出，这个版本的Bézier Curve绘制程序的交互性极差。$t_0$一旦确定就不能更改，控制点还要一个一个地输入坐标，每次运行还只能画一次，画完之后就什么操作都没了，有时候只想看个曲线却又去不掉花里胡哨的绘制过程（官方吐槽最为致命）。简单地说，除了画得好看简直一无是处。</p>\n<p>$\\qquad$在21世纪的今天，我们怎能容忍这种空有其表的程序呢！于是version 2.0横空出世。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h2><span id=\"readmetxt\">☈ README.txt</span></h2><p>$\\qquad$Version 2.0在Version 1.0的基础上新增以下功能：</p>\n<ol>\n<li>无需事先指定曲线的阶数，更无需输入控制点的坐标，直接在窗口内用鼠标左击确定控制点位置，点击后会出现相应的绿点，并输出相应的世界坐标；</li>\n<li>在确定所有控制顶点位置后，鼠标右击绘制相应的贝塞尔曲线及绘制过程；</li>\n<li>绘制完成后鼠标右击隐藏绘制过程，再次右击显示绘制过程；</li>\n<li>绘制完成后按🆃可以修改$t_0$值（默认为0.5）；</li>\n<li>绘制完成后按住🅳可以拖动改变当前鼠标所在控制点的位置，同时贝塞尔曲线及绘制过程也会相应变化；</li>\n<li>绘制完成后鼠标左击删除当前曲线及控制点，即清空画板回到第1步；</li>\n<li>按␛退出程序.</li>\n</ol>\n<hr>\n<h2><span id=\"︎-tips\">⚖︎ Tips</span></h2><ol>\n<li><p>对于实现点击选择控制顶点，首先我们需要将鼠标坐标转换为画布上的<strong>世界坐标</strong>（原点在中心，$x,y\\in[-1,1]$），函数<code>void glfwGetCursorPos(GLFWwindow *window, double *xpos, double *ypos)</code>得到的鼠标坐标<code>(xpos,ypos)</code>是一个像素坐标，原点位于窗口的左上角，y轴正方向向下，x轴正方向向右，根据窗口的宽高像素值<code>WIDTH,HEIGHT</code>以及简单的映射变换我们可以得到其世界坐标</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glfwGetCursorPos</span>(window, &amp;click_x, &amp;click_y);</span><br><span class=\"line\">click_x = (click_x / WIDTH) * <span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">click_y = <span class=\"number\">1</span> - (click_y / HEIGHT) * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于贝塞尔曲线阶数的获取，我们只要在用户鼠标右击时查看控制顶点的个数即可</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order = control[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>至于如何使鼠标左击和右击时发挥不同的作用，其实是实现了一个简单的DFA。我设了两个布尔变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> start = <span class=\"literal\">false</span>, showLine = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>其中$start$表示是否开始绘制曲线（用户在确定控制点位置时为<code>false</code>），$showLine$表示是否展示绘制过程。我们将自动机的状态定义为有序对$[start,showLine]$，其中1代表<code>true</code>，0代表<code>false</code>，那么其状态转移图可以表示为</p>\n<img src=\"/images/计算机图形学/4/2.png\" style=\"zoom:30%;\">\n\n<p>$L,R$分别表示鼠标左击与右击，初始状态为$[0,1]$，那么上图清楚地展现了每个状态点击鼠标后的跳转方式。</p>\n</li>\n<li><p>清空画布就是上图中$[1,showLine]→[0,showLine]$的情况</p>\n</li>\n<li><p>$t_0$为全局变量，当<code>start=true</code>同时监听到按键🆃的按下时，将输入的值直接赋给$t_0$，然后<code>GeneratePointsViaT0()</code>重新生成绘制过程</p>\n</li>\n<li><p>对于按键🅳的监听，只要在每个循环中查看🅳是否被按下，若处于按下状态，则计算距离当前鼠标最近的控制顶点，另外需要设定一个阈值（DRAG_SENSITIVITY，可以认为是拖动敏感度），只有最近距离小于阈值时才将该控制顶点移动到鼠标位置，并更新绘制过程与曲线细分点，详见<code>void DragProcess(GLFWwindow *window)</code></p>\n</li>\n<li><p><code>vector.resize()</code>方法可以在保留原有数据的基础上扩充空间</p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"cde\">C☺DE</span></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glew.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glfw3.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WIDTH 800</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEIGHT 600</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CURVE_POINTS_NUM 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DRAG_SENSITIVITY 0.01</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    GLfloat x, y;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Point</span>(GLfloat _x, GLfloat _y) : <span class=\"built_in\">x</span>(_x), <span class=\"built_in\">y</span>(_y) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Point <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> GLfloat &amp;t) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;t * <span class=\"keyword\">this</span>-&gt;x, t * <span class=\"keyword\">this</span>-&gt;y&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inline</span> Point <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Point &amp;rhs) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"keyword\">this</span>-&gt;x + rhs.x, <span class=\"keyword\">this</span>-&gt;y + rhs.y&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> order;</span><br><span class=\"line\"><span class=\"type\">bool</span> start = <span class=\"literal\">false</span>, showLine = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> click_x, click_y;</span><br><span class=\"line\">GLfloat t0 = <span class=\"number\">0.5</span>;</span><br><span class=\"line\">vector&lt;vector&lt;Point&gt;&gt; <span class=\"built_in\">control_points</span>(<span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;Point&gt;()), middle_points;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">GeneratePointsViaT0</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    order = control_points[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    control_points.<span class=\"built_in\">resize</span>(order + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; order + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        control_points[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; order + <span class=\"number\">1</span> - i; ++j)</span><br><span class=\"line\">            control_points[i].<span class=\"built_in\">emplace_back</span>(control_points[i - <span class=\"number\">1</span>][j] * (<span class=\"number\">1</span> - t0) + control_points[i - <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] * t0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">GenerateMiddlePoints</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    order = control_points[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    middle_points.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    middle_points.<span class=\"built_in\">resize</span>(order + <span class=\"number\">1</span>);</span><br><span class=\"line\">    middle_points[<span class=\"number\">0</span>] = control_points[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; CURVE_POINTS_NUM + <span class=\"number\">1</span>; ++k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        GLfloat t = k / (<span class=\"number\">1.0</span> * CURVE_POINTS_NUM);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; order; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            middle_points[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; order + <span class=\"number\">1</span> - i; ++j)</span><br><span class=\"line\">                middle_points[i].<span class=\"built_in\">emplace_back</span>(</span><br><span class=\"line\">                        middle_points[i - <span class=\"number\">1</span>][j] * (<span class=\"number\">1</span> - t) + middle_points[i - <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] * t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        middle_points[order].<span class=\"built_in\">emplace_back</span>(middle_points[order - <span class=\"number\">1</span>][<span class=\"number\">0</span>] * (<span class=\"number\">1</span> - t) + middle_points[order - <span class=\"number\">1</span>][<span class=\"number\">1</span>] * t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MouseButtonCallback</span><span class=\"params\">(GLFWwindow *window, <span class=\"type\">int</span> button, <span class=\"type\">int</span> action, <span class=\"type\">int</span> mods)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == GLFW_PRESS)</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (button)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> GLFW_MOUSE_BUTTON_LEFT:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!start)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">glfwGetCursorPos</span>(window, &amp;click_x, &amp;click_y);</span><br><span class=\"line\">                    click_x = (click_x / WIDTH) * <span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">                    click_y = <span class=\"number\">1</span> - (click_y / HEIGHT) * <span class=\"number\">2</span>;</span><br><span class=\"line\">                    control_points[<span class=\"number\">0</span>].<span class=\"built_in\">emplace_back</span>(<span class=\"built_in\">Point</span>(click_x, click_y));</span><br><span class=\"line\">                    cout &lt;&lt; <span class=\"string\">&quot;(&quot;</span> &lt;&lt; click_x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; click_y &lt;&lt; <span class=\"string\">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    order = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    control_points = <span class=\"built_in\">move</span>(vector&lt;vector&lt;Point&gt;&gt;(<span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;Point&gt;()));</span><br><span class=\"line\">                    start = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> GLFW_MOUSE_BUTTON_RIGHT:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!start)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (control_points[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        cerr &lt;&lt; <span class=\"string\">&quot;Control points are not enough!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">GeneratePointsViaT0</span>();</span><br><span class=\"line\">                    <span class=\"built_in\">GenerateMiddlePoints</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                    start = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    cout &lt;&lt; endl;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    showLine = !showLine;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">KeyCallback</span><span class=\"params\">(GLFWwindow *window, <span class=\"type\">int</span> key, <span class=\"type\">int</span> scancode, <span class=\"type\">int</span> action, <span class=\"type\">int</span> mode)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == GLFW_PRESS)</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (key)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> GLFW_KEY_ESCAPE:</span><br><span class=\"line\">                <span class=\"built_in\">glfwSetWindowShouldClose</span>(window, GL_TRUE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> GLFW_KEY_T:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (start)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    showLine = false;</span></span><br><span class=\"line\">                    cout &lt;&lt; <span class=\"string\">&quot;t0(∈(0,1)) = &quot;</span>;</span><br><span class=\"line\">                    cin &gt;&gt; t0;</span><br><span class=\"line\">                    <span class=\"built_in\">GeneratePointsViaT0</span>();</span><br><span class=\"line\"><span class=\"comment\">//                    showLine = true;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DragProcess</span><span class=\"params\">(GLFWwindow *window)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &amp;&amp; <span class=\"built_in\">glfwGetKey</span>(window, GLFW_KEY_D) == GLFW_PRESS)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> closest_idx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> dist, min_dist = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"built_in\">glfwGetCursorPos</span>(window, &amp;click_x, &amp;click_y);</span><br><span class=\"line\">        click_x = (click_x / WIDTH) * <span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">        click_y = <span class=\"number\">1</span> - (click_y / HEIGHT) * <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; order + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dist = (click_x - control_points[<span class=\"number\">0</span>][i].x) * (click_x - control_points[<span class=\"number\">0</span>][i].x) +</span><br><span class=\"line\">                   (click_y - control_points[<span class=\"number\">0</span>][i].y) * (click_y - control_points[<span class=\"number\">0</span>][i].y);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dist &lt; min_dist &amp;&amp; dist &lt; DRAG_SENSITIVITY)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                min_dist = dist;</span><br><span class=\"line\">                closest_idx = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        control_points[<span class=\"number\">0</span>][closest_idx] = <span class=\"built_in\">move</span>(<span class=\"built_in\">Point</span>(click_x, click_y));</span><br><span class=\"line\">        <span class=\"built_in\">GeneratePointsViaT0</span>();</span><br><span class=\"line\">        <span class=\"built_in\">GenerateMiddlePoints</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">glfwInit</span>())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    GLFWwindow *window = <span class=\"built_in\">glfwCreateWindow</span>(WIDTH, HEIGHT, <span class=\"string\">&quot;Bézier Curve&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!window)</span><br><span class=\"line\">        <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwSetKeyCallback</span>(window, KeyCallback);</span><br><span class=\"line\">    <span class=\"built_in\">glfwSetMouseButtonCallback</span>(window, MouseButtonCallback);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">DragProcess</span>(window);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.2</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (showLine)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">glLineWidth</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; order; ++i)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">glColor3f</span>(<span class=\"number\">1.0</span> * (order - <span class=\"number\">1</span> - i) / (order - <span class=\"number\">1</span>), <span class=\"number\">1.0</span> * i / (order - <span class=\"number\">1</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">glBegin</span>(GL_LINE_STRIP);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;p: control_points[i])</span><br><span class=\"line\">                        <span class=\"built_in\">glVertex2f</span>(p.x, p.y);</span><br><span class=\"line\">                    <span class=\"built_in\">glEnd</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">glColor3f</span>(<span class=\"number\">0</span>, <span class=\"number\">0.7</span>, <span class=\"number\">0.7</span>);</span><br><span class=\"line\">                <span class=\"built_in\">glPointSize</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">                <span class=\"built_in\">glEnable</span>(GL_POINT_SMOOTH);</span><br><span class=\"line\">                <span class=\"built_in\">glBegin</span>(GL_POINTS);</span><br><span class=\"line\">                <span class=\"built_in\">glVertex2f</span>(control_points[order][<span class=\"number\">0</span>].x, control_points[order][<span class=\"number\">0</span>].y);</span><br><span class=\"line\">                <span class=\"built_in\">glEnd</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; control_points[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">glColor3f</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"built_in\">glPointSize</span>(<span class=\"number\">15</span>);</span><br><span class=\"line\">                <span class=\"built_in\">glBegin</span>(GL_POINTS);</span><br><span class=\"line\">                <span class=\"built_in\">glVertex2f</span>(control_points[<span class=\"number\">0</span>][i].x, control_points[<span class=\"number\">0</span>][i].y);</span><br><span class=\"line\">                <span class=\"built_in\">glEnd</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">glColor3f</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">glBegin</span>(GL_LINE_STRIP);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;p: middle_points[order])</span><br><span class=\"line\">                <span class=\"built_in\">glVertex2f</span>(p.x, p.y);</span><br><span class=\"line\">            <span class=\"built_in\">glEnd</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; control_points[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">glColor3f</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"built_in\">glPointSize</span>(<span class=\"number\">15</span>);</span><br><span class=\"line\">                <span class=\"built_in\">glEnable</span>(GL_POINT_SMOOTH);</span><br><span class=\"line\">                <span class=\"built_in\">glBegin</span>(GL_POINTS);</span><br><span class=\"line\">                <span class=\"built_in\">glVertex2f</span>(control_points[<span class=\"number\">0</span>][i].x, control_points[<span class=\"number\">0</span>][i].y);</span><br><span class=\"line\">                <span class=\"built_in\">glEnd</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"︎-demo\">☸︎ DEMO</span></h2><iframe src=\"//player.bilibili.com/player.html?aid=895336980&bvid=BV1HP4y1K7t2&cid=565203706&page=1&high_quality=1\" scrolling=\"no\" border=\"0\" width=\"870\" height=\"460\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n<br>\n\n<br>\n\n<hr>\n<h2><span id=\"reference\">❮ Reference ❯</span></h2><ul>\n<li>OpenGL学习笔记——处理键盘输入，<a href=\"https://www.cnblogs.com/saltedreed/p/12321314.html\">https://www.cnblogs.com/saltedreed/p/12321314.html</a></li>\n<li>GLFW Document，<a href=\"https://www.glfw.org/docs/latest/input_guide.html\">https://www.glfw.org/docs/latest/input_guide.html</a></li>\n</ul>\n","text":"☘︎ Preface$\\qquad$在很久很久的以前，我有介绍过Bézier Curve的理论推导以及基本实现过程（Bézier Curve：小试牛刀）。但不难看出，这个版本的Bézier Curve绘制程序的交互性极差。$t_0$一旦确定就不能更改，控制点还要一个一个地输入坐标，...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"计算机图形学","slug":"计算机图形学","count":3,"path":"api/categories/计算机图形学.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"OpenGL","slug":"OpenGL","count":4,"path":"api/tags/OpenGL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">☘︎ Preface</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">☈ README.txt</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">⚖︎ Tips</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C☺DE</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">☸︎ DEMO</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">❮ Reference ❯</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「Section 8」控制器","uid":"9c235338e8419467c57a9cf3dae4161a","slug":"控制器","date":"2022-04-02T11:10:12.000Z","updated":"2022-04-02T13:25:16.028Z","comments":true,"path":"api/articles/控制器.json","keywords":null,"cover":[],"text":" 控制器是整个计算机的指挥中心，协调计算机的各部件进行工作。其实质工作就是解释程序，每次从存储器中读取一条指令，经过分析译码产生一串操作命令，再发给各功能部件，控制各部件的动作，以实现指令和程序的功能。（取指令→分析指令→执行指令→取指令） 总线（bus） 构成 AB（单向）：地...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"计算机组成原理","slug":"计算机组成原理","count":8,"path":"api/categories/计算机组成原理.json"}],"tags":[{"name":"notes","slug":"notes","count":13,"path":"api/tags/notes.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"Naive Bayes","uid":"430d590163d20d4eee403c80b7319692","slug":"Naive-Bayes","date":"2022-03-29T12:46:48.000Z","updated":"2022-05-26T15:30:18.996Z","comments":true,"path":"api/articles/Naive-Bayes.json","keywords":null,"cover":[],"text":"朴素贝叶斯是一个非常经典易懂的分类方法，其核心思想是上式即为概率论中的Bayes定理，描述了两个条件概率之间的关系，那么先让我们来回顾一下概率论的知识。 α Bayes’ theorem对于计算两个事件X和Y同时发生的概率，可以由Y发生的概率与Y已发生时会发生X的概率相乘得到，即...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Machine Learning","slug":"Machine-Learning","count":3,"path":"api/categories/Machine-Learning.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}