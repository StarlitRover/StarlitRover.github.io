{"title":"「1153」Decode Registration Card of PAT","uid":"1dc52340625e6d898b967d568951e86c","slug":"「1153」Decode-Registration-Card-of-PAT","date":"2022-11-29T08:35:11.000Z","updated":"2022-11-29T09:46:09.728Z","comments":true,"path":"api/articles/「1153」Decode-Registration-Card-of-PAT.json","keywords":null,"cover":null,"content":"<p>A registration card number of PAT consists of 4 parts:</p>\n<ul>\n<li>the 1st letter represents the test level, namely, <code>T</code> for the top level, <code>A</code> for advance and <code>B</code> for basic;</li>\n<li>the 2nd - 4th digits are the test site number, ranged from 101 to 999;</li>\n<li>the 5th - 10th digits give the test date, in the form of <code>yymmdd</code>;</li>\n<li>finally the 11th - 13th digits are the testee’s number, ranged from 000 to 999.</li>\n</ul>\n<p>Now given a set of registration card numbers and the scores of the card owners, you are supposed to output the various statistics according to the given queries.</p>\n<span id=\"more\"></span>\n\n<!--more-->\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives two positive integers N (≤104) and M (≤100), the numbers of cards and the queries, respectively.</p>\n<p>Then N lines follow, each gives a card number and the owner’s score (integer in [0,100]), separated by a space.</p>\n<p>After the info of testees, there are M lines, each gives a query in the format <code>Type Term</code>, where</p>\n<ul>\n<li><code>Type</code> being 1 means to output all the testees on a given level, in non-increasing order of their scores. The corresponding <code>Term</code> will be the letter which specifies the level;</li>\n<li><code>Type</code> being 2 means to output the total number of testees together with their total scores in a given site. The corresponding <code>Term</code> will then be the site number;</li>\n<li><code>Type</code> being 3 means to output the total number of testees of every site for a given test date. The corresponding <code>Term</code> will then be the date, given in the same format as in the registration card.</li>\n</ul>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each query, first print in a line <code>Case #: input</code>, where <code>#</code> is the index of the query case, starting from 1; and <code>input</code> is a copy of the corresponding input query. Then output as requested:</p>\n<ul>\n<li>for a type 1 query, the output format is the same as in input, that is, <code>CardNumber Score</code>. If there is a tie of the scores, output in increasing alphabetical order of their card numbers (uniqueness of the card numbers is guaranteed);</li>\n<li>for a type 2 query, output in the format <code>Nt Ns</code> where <code>Nt</code> is the total number of testees and <code>Ns</code> is their total score;</li>\n<li>for a type 3 query, output in the format <code>Site Nt</code> where <code>Site</code> is the site number and <code>Nt</code> is the total number of testees at <code>Site</code>. The output must be in non-increasing order of <code>Nt</code>‘s, or in increasing order of site numbers if there is a tie of <code>Nt</code>.</li>\n</ul>\n<p>If the result of a query is empty, simply print <code>NA</code>.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 4</span><br><span class=\"line\">B123180908127 99</span><br><span class=\"line\">B102180908003 86</span><br><span class=\"line\">A112180318002 98</span><br><span class=\"line\">T107150310127 62</span><br><span class=\"line\">A107180908108 100</span><br><span class=\"line\">T123180908010 78</span><br><span class=\"line\">B112160918035 88</span><br><span class=\"line\">A107180908021 98</span><br><span class=\"line\">1 A</span><br><span class=\"line\">2 107</span><br><span class=\"line\">3 180908</span><br><span class=\"line\">2 999</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case 1: 1 A</span><br><span class=\"line\">A107180908108 100</span><br><span class=\"line\">A107180908021 98</span><br><span class=\"line\">A112180318002 98</span><br><span class=\"line\">Case 2: 2 107</span><br><span class=\"line\">3 260</span><br><span class=\"line\">Case 3: 3 180908</span><br><span class=\"line\">107 2</span><br><span class=\"line\">123 2</span><br><span class=\"line\">102 1</span><br><span class=\"line\">Case 4: 2 999</span><br><span class=\"line\">NA</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$做这种题目的时候总是心惊胆战，生怕哪个地方优化没做好，数据结构没搞好就TLE。</p>\n<p>$\\qquad$给出若干个PAT考试登记码：$1\\cdot level+3\\cdot site+6\\cdot date+3\\cdot testee$，接下来会有多个查询，有三种查询模式：</p>\n<ul>\n<li><p>Type 1：输入level（B、A、T），按照成绩降序输出所有参加这个等级考的学生登记码和成绩，成绩一样按登记码升序排列</p>\n</li>\n<li><p>Type 2：输入考场号，输出在该考场参加考试的总人数以及总成绩</p>\n</li>\n<li><p>Type 3：输入日期，按照当日考试人数降序输出所有有人考试的考场号，以及相应的考试人数，如果考试人数一致则按考场号升序排列</p>\n</li>\n</ul>\n<p>$\\qquad$查询结果为空就输出NA。</p>\n<p>$\\qquad$前两种查询方式都挺好处理。读取完所有登记码和成绩，对三个level的信息分别进行排序；注意到考场号只有三位数，那么直接开一个<code>vector&lt;pair&lt;int,int&gt;&gt; site(1000)</code>，考场号即为索引，来存储人数和总成绩。第三个查询模式就比较棘手了，我的思路是直接开一个<code>map&lt;int,map&lt;int,int&gt;&gt;</code>来存储单个日期下单个考场的人数，在查询时把子map拷贝到一个vector中，然后再进行排序输出。</p>\n<p>$\\qquad$第一次提交，后三个测试点全是TLE，把我看傻了，心态直接崩。不知道还有什么优化手段，于是去网上看了些题解，发现暴力循环遍历都能过，百思不得其解。我试着把三个level的排序部分给注释掉，竟然发现时间骤减。仔细研究一番，发现问题出在lambda表达式中的传参。由于我把登记码和成绩单独存储在一个<code>vector&lt;pair&lt;int,int&gt;&gt; info</code>中，而三个level都只存info的索引，因此在sort的lambda函数中需要将info传入：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[info](<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;<span class=\"keyword\">return</span> info[a].second == info[b].second ? info[a].first &lt; info[b].first : info[a].second &gt; info[b].second;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么就意味着每次调用lambda函数时都会拷贝一遍info，从而造成了大量的时间开销。其实lambda函数是可以传入引用的，只要在变量名前加上&amp;即可：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&amp;info](<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span><br></pre></td></tr></table></figure>\n\n<p>传入所有参数是<code>[=]</code>，⚠️这也是拷贝传参。如果需要传入多个参数就用【,】分隔。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> idx(x) (x==<span class=\"string\">&#x27;B&#x27;</span>?0:x==<span class=\"string\">&#x27;A&#x27;</span>?1:2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">const</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; cpii;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, tp, s, d;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    vector&lt;pair&lt;string, <span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">info</span>(n, &#123;<span class=\"built_in\">string</span>(<span class=\"number\">13</span>, <span class=\"number\">0</span>), <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">site</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; level[<span class=\"number\">3</span>];</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; date;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s %d&quot;</span>, &amp;info[i].first[<span class=\"number\">0</span>], &amp;info[i].second);</span><br><span class=\"line\">        s = <span class=\"built_in\">stoi</span>(info[i].first.<span class=\"built_in\">substr</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>)), d = <span class=\"built_in\">stoi</span>(info[i].first.<span class=\"built_in\">substr</span>(<span class=\"number\">4</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\">        level[<span class=\"built_in\">idx</span>(info[i].first[<span class=\"number\">0</span>])].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        ++site[s].first; site[s].second += info[i].second;</span><br><span class=\"line\">        ++date[d][s];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: level)</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(k.<span class=\"built_in\">begin</span>(), k.<span class=\"built_in\">end</span>(), [&amp;info](<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) </span><br><span class=\"line\">        &#123;<span class=\"keyword\">return</span> info[a].second == info[b].second ? info[a].first &lt; info[b].first : info[a].second &gt; info[b].second;&#125;);</span><br><span class=\"line\">    string st;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; tp &gt;&gt; st;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case %d: %d %s\\n&quot;</span>, i + <span class=\"number\">1</span>, tp, st.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (tp)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (level[<span class=\"built_in\">idx</span>(st[<span class=\"number\">0</span>])].<span class=\"built_in\">empty</span>()) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NA\\n&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: level[<span class=\"built_in\">idx</span>(st[<span class=\"number\">0</span>])])</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d\\n&quot;</span>, info[k].first.<span class=\"built_in\">c_str</span>(), info[k].second);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!site[<span class=\"built_in\">stoi</span>(st)].first) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NA\\n&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, site[<span class=\"built_in\">stoi</span>(st)].first, site[<span class=\"built_in\">stoi</span>(st)].second);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (date[<span class=\"built_in\">stoi</span>(st)].<span class=\"built_in\">empty</span>()) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NA\\n&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">tmp</span>(date[<span class=\"built_in\">stoi</span>(st)].<span class=\"built_in\">begin</span>(), date[<span class=\"built_in\">stoi</span>(st)].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">                    <span class=\"built_in\">sort</span>(tmp.<span class=\"built_in\">begin</span>(), tmp.<span class=\"built_in\">end</span>(), [](cpii &amp;a, cpii &amp;b) </span><br><span class=\"line\">                    &#123;<span class=\"keyword\">return</span> a.second == b.second ? a.first &lt; b.first : a.second &gt; b.second;&#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: tmp)</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%03d %d\\n&quot;</span>, k.first, k.second);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"A registration card number of PAT consists of 4 parts: the 1st letter represents the test level, namely, T for the top level, A for advance ...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1154」Vertex Coloring","uid":"09fcb22b7551ea744c57f07b69e5a972","slug":"「1154」Vertex-Coloring","date":"2022-11-29T10:43:33.000Z","updated":"2022-11-29T14:47:15.803Z","comments":true,"path":"api/articles/「1154」Vertex-Coloring.json","keywords":null,"cover":null,"text":"A proper vertex coloring is a labeling of the graph’s vertices with colors such that no two vertices sharing the same edge have the same col...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1152」Google Recruitment","uid":"1c996a2205f7f5bbcbe287507d181067","slug":"「1152」Google-Recruitment","date":"2022-11-28T15:31:17.000Z","updated":"2022-11-28T15:35:58.411Z","comments":true,"path":"api/articles/「1152」Google-Recruitment.json","keywords":null,"cover":[],"text":"In July 2004, Google posted on a giant billboard along Highway 101 in Silicon Valley (shown in the picture below) for recruitment. The conte...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"prime","slug":"prime","count":6,"path":"api/tags/prime.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}