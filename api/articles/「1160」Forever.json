{"title":"「1160」Forever","uid":"75be25fcd9a5cd2b923517296b55a3e7","slug":"「1160」Forever","date":"2022-12-01T12:15:21.000Z","updated":"2022-12-02T07:02:27.053Z","comments":true,"path":"api/articles/「1160」Forever.json","keywords":null,"cover":null,"content":"<p>“Forever number” is a positive integer A with K digits, satisfying the following constrains:</p>\n<ul>\n<li>the sum of all the digits of A is m;</li>\n<li>the sum of all the digits of A+1 is n; and</li>\n<li>the greatest common divisor of m and n is a prime number which is greater than 2.</li>\n</ul>\n<p>Now you are supposed to find these forever numbers.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each test case, the first line contains a positive integer N (≤5). Then N lines follow, each gives a pair of K (3&lt;K&lt;10) and m (1&lt;m&lt;90), of which the meanings are given in the problem description.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each pair of K and m, first print in a line <code>Case X</code>, where <code>X</code> is the case index (starts from 1). Then print n and A in the following line. The numbers must be separated by a space. If the solution is not unique, output in the ascending order of n. If still not unique, output in the ascending order of A. If there is no solution, output <code>No Solution</code>.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">6 45</span><br><span class=\"line\">7 80</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case 1</span><br><span class=\"line\">10 189999</span><br><span class=\"line\">10 279999</span><br><span class=\"line\">10 369999</span><br><span class=\"line\">10 459999</span><br><span class=\"line\">10 549999</span><br><span class=\"line\">10 639999</span><br><span class=\"line\">10 729999</span><br><span class=\"line\">10 819999</span><br><span class=\"line\">10 909999</span><br><span class=\"line\">Case 2</span><br><span class=\"line\">No Solution</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$长久数A，满足$\\gcd(m,n)$为大于2的质数，其中$m$指的是$A$的各位之和，$n$指的是$A+1$的各位之和，gcd是最大公因数。</p>\n<p>$\\qquad$一开始看是二十分的题，而且限时3000ms，就想着直接枚举，结果前两个测试点都没超1000ms，后面两个测试点炸了。不过$K$每加1时间确实会翻十倍。我很绝望地要开始尝试DFS搜索了，不过注意到Sample中的结果都是以99结尾的，寻思着会不会有什么规律，没想到还真有。</p>\n<p>$\\qquad$从最低位开始，如果$A$的最低位不是9的话，那么$A+1$就不会产生进位，从而$n&#x3D;m+1$，而显然$\\gcd(m,m+1)&#x3D;1$，必然不是质数。Amazing，接着看如果$A$的倒数第二位不是9，这时我们已经确定$A$的最后一位一定是9，那么意味着$A+1$只会在十位产生一次进位，从而$n&#x3D;m+1-9&#x3D;m-8$，注意到$\\gcd(m-8,m)$一定是8的因子，整除8的素数只有2，而题目要求是&gt;2的素数，因此也一定不符合题意。到第三位的时候，$n&#x3D;m+1-18&#x3D;m-17$，$\\gcd(m-17,m)\\mid17$，那么最大公因子只可能是1或者17，是有可能符合题意的。综上可以确定长久数的最后两位一定是99。</p>\n<p>$\\qquad$在确定最后两位后，枚举的工作量直接降两个量级，枚他丫的。</p>\n<p>$\\qquad$当然要是我没注意到这个特性，就必须想办法降低枚举量。首先可以直接构造所有各位数之和为$m$的$K$位数，从最高位开始枚举构造，如果后面所有位都取9都达不到$m$的话，说明前面数字取小了，可以直接跳过，这样能节省大量开销。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &lt; <span class=\"number\">4</span>) <span class=\"keyword\">return</span> r &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">sqrt</span>(r); i += (i == <span class=\"number\">2</span>) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r % i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k, m, u = <span class=\"number\">1</span>, v = <span class=\"number\">1</span>, vv = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i, u = <span class=\"number\">1</span>, v = <span class=\"number\">19</span>, vv = <span class=\"number\">0</span>, flag = <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case %d\\n&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;k, &amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; k - <span class=\"number\">2</span>; ++j) u *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = u; j &lt; <span class=\"number\">10</span> * u; ++j, v = vv + <span class=\"number\">18</span>, vv = <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string s = <span class=\"built_in\">to_string</span>(j + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;c: s)</span><br><span class=\"line\">                vv += c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v == m &amp;&amp; <span class=\"built_in\">isPrime</span>(<span class=\"built_in\">gcd</span>(v, vv)))</span><br><span class=\"line\">                ans.<span class=\"built_in\">emplace_back</span>(vv, j * <span class=\"number\">100</span> + <span class=\"number\">99</span>), flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No Solution\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">sort</span>(ans.<span class=\"built_in\">begin</span>(), ans.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t: ans) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, t.first, t.second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"“Forever number” is a positive integer A with K digits, satisfying the following constrains: the sum of all the digits of A is m; the sum of...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"prime","slug":"prime","count":6,"path":"api/tags/prime.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1161」Merging Linked Lists","uid":"37353806131bb7be8e2475ba5c533abf","slug":"「1161」Merging-Linked-Lists","date":"2022-12-01T15:33:32.000Z","updated":"2022-12-01T15:44:11.205Z","comments":true,"path":"api/articles/「1161」Merging-Linked-Lists.json","keywords":null,"cover":null,"text":"Given two singly linked lists $L_1​&#x3D;a_1​→a_2​→⋯→a_n−1​→a_n$​ and $L_2&#x3D;b_1​→b_2​→⋯→b_m−1​→b_m$​. If $n≥2m$, you are supposed to rev...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"『1159』Structure of a Binary Tree","uid":"23a26d9dbfb7f35f39b098e97db54754","slug":"『1159』Structure-of-a-Binary-Tree","date":"2022-12-01T09:44:36.000Z","updated":"2022-12-01T10:03:33.611Z","comments":true,"path":"api/articles/『1159』Structure-of-a-Binary-Tree.json","keywords":null,"cover":null,"text":"Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, a binary tre...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}