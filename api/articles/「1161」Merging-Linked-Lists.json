{"title":"「1161」Merging Linked Lists","uid":"37353806131bb7be8e2475ba5c533abf","slug":"「1161」Merging-Linked-Lists","date":"2022-12-01T15:33:32.000Z","updated":"2022-12-01T15:44:11.205Z","comments":true,"path":"api/articles/「1161」Merging-Linked-Lists.json","keywords":null,"cover":null,"content":"<p>Given two singly linked lists $L_1​&#x3D;a_1​→a_2​→⋯→a_n−1​→a_n$​ and $L_2&#x3D;b_1​→b_2​→⋯→b_m−1​→b_m$​. If $n≥2m$, you are supposed to reverse and merge the shorter one into the longer one to obtain a list like $a_1​→a_2​→b_m​→a_3​→a_4​→b_m−1$​⋯. For example, given one list being 6→7 and the other one 1→2→3→4→5, you must output 1→2→7→3→4→6→5.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains the two addresses of the first nodes of L1​ and L2​, plus a positive $N (≤10^5)$ which is the total number of nodes given. The address of a node is a 5-digit nonnegative integer, and NULL is represented by <code>-1</code>.</p>\n<p>Then N lines follow, each describes a node in the format:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Address Data Next</span><br></pre></td></tr></table></figure>\n\n<p>where <code>Address</code> is the position of the node, <code>Data</code> is a positive integer no more than $10^5$, and <code>Next</code> is the position of the next node. It is guaranteed that no list is empty, and the longer list is at least twice as long as the shorter one.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each case, output in order the resulting linked list. Each node occupies a line, and is printed in the same format as in the input.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00100 01000 7</span><br><span class=\"line\">02233 2 34891</span><br><span class=\"line\">00100 6 00001</span><br><span class=\"line\">34891 3 10086</span><br><span class=\"line\">01000 1 02233</span><br><span class=\"line\">00033 5 -1</span><br><span class=\"line\">10086 4 00033</span><br><span class=\"line\">00001 7 -1</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01000 1 02233</span><br><span class=\"line\">02233 2 00001</span><br><span class=\"line\">00001 7 34891</span><br><span class=\"line\">34891 3 10086</span><br><span class=\"line\">10086 4 00100</span><br><span class=\"line\">00100 6 00033</span><br><span class=\"line\">00033 5 -1</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$链表水题放松。给出两个链表，长度分别为$m,n(n\\geq 2m)$，需要你将短链表反向隔2插入到长链表中。</p>\n<p>$\\qquad$首先读入所有节点，用map建立地址到节点值以及下一个节点地址的映射。然后通过头节点遍历链表，将每个节点的地址及值存储到<code>vector&lt;pair&lt;int,int&gt;&gt;</code>中。最后每输出两个长链表节点，就反向输出一个短链表节点。短链表输完后需要把长链表剩余节点一次性输出。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">output</span><span class=\"params\">(pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">bool</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %05d\\n&quot;</span>, p.first);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%05d %d&quot;</span>, p.first, p.second);</span><br><span class=\"line\">    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sa, sb, n, a, v, nxt, j;</span><br><span class=\"line\">    cin &gt;&gt; sa &gt;&gt; sb &gt;&gt; n;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; node;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; v &gt;&gt; nxt;</span><br><span class=\"line\">        node[a] = <span class=\"built_in\">make_pair</span>(v, nxt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; l1, l2;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sa != <span class=\"number\">-1</span>)</span><br><span class=\"line\">        l1.<span class=\"built_in\">emplace_back</span>(sa, node[sa].first), sa = node[sa].second;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sb != <span class=\"number\">-1</span>)</span><br><span class=\"line\">        l2.<span class=\"built_in\">emplace_back</span>(sb, node[sb].first), sb = node[sb].second;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1.<span class=\"built_in\">size</span>() &lt; l2.<span class=\"built_in\">size</span>()) <span class=\"built_in\">swap</span>(l1, l2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span> * l2.<span class=\"built_in\">size</span>(); j += <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">output</span>(l1[j]), <span class=\"built_in\">output</span>(l1[j + <span class=\"number\">1</span>]), <span class=\"built_in\">output</span>(l2[l2.<span class=\"built_in\">size</span>() - j / <span class=\"number\">2</span> - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; j &lt; l1.<span class=\"built_in\">size</span>(); ++j) <span class=\"built_in\">output</span>(l1[j]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; -1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Given two singly linked lists $L_1​&#x3D;a_1​→a_2​→⋯→a_n−1​→a_n$​ and $L_2&#x3D;b_1​→b_2​→⋯→b_m−1​→b_m$​. If $n≥2m$, you are supposed to rev...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1162』Postfix Expression","uid":"7d33432dbf79dd8f70b2b1b9bfcc3dbc","slug":"「1162』Postfix-Expression","date":"2022-12-01T16:02:39.000Z","updated":"2022-12-01T16:10:50.838Z","comments":true,"path":"api/articles/「1162』Postfix-Expression.json","keywords":null,"cover":[],"text":"Given a syntax tree (binary), you are supposed to output the corresponding postfix expression, with parentheses reflecting the precedences o...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1160」Forever","uid":"75be25fcd9a5cd2b923517296b55a3e7","slug":"「1160」Forever","date":"2022-12-01T12:15:21.000Z","updated":"2022-12-02T07:02:27.053Z","comments":true,"path":"api/articles/「1160」Forever.json","keywords":null,"cover":null,"text":"“Forever number” is a positive integer A with K digits, satisfying the following constrains: the sum of all the digits of A is m; the sum of...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"prime","slug":"prime","count":6,"path":"api/tags/prime.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}