{"title":"「1100」Mars Numbers","uid":"f3192472433d930fd2273aca0588815b","slug":"「1100」Mars-Numbers","date":"2022-10-28T16:15:14.000Z","updated":"2022-10-28T16:28:30.899Z","comments":true,"path":"api/articles/「1100」Mars-Numbers.json","keywords":null,"cover":null,"content":"<p>People on Mars count their numbers with base 13:</p>\n<ul>\n<li>Zero on Earth is called “tret” on Mars.</li>\n<li>The numbers 1 to 12 on Earth is called “jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec” on Mars, respectively.</li>\n<li>For the next higher digit, Mars people name the 12 numbers as “tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou”, respectively.</li>\n</ul>\n<p>For examples, the number 29 on Earth is called “hel mar” on Mars; and “elo nov” on Mars corresponds to 115 on Earth. In order to help communication between people from these two planets, you are supposed to write a program for mutual translation between Earth and Mars number systems.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;100). Then N lines follow, each contains a number in [0, 169), given either in the form of an Earth number, or that of Mars.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each number, print in a line the corresponding number in the other language.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">29</span><br><span class=\"line\">5</span><br><span class=\"line\">elo nov</span><br><span class=\"line\">tam</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hel mar</span><br><span class=\"line\">may</span><br><span class=\"line\">115</span><br><span class=\"line\">13</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$火星上面不用字母，谢谢。</p>\n<p>$\\qquad$给地球和火星翻译数字，假设火星上的数字是13进制的，而且最多两位，而且每一位的数字表示都不同，另有以下规则：</p>\n<ol>\n<li><p>0需要单独输出“tret”</p>\n</li>\n<li><p>某位上的数字为0时不输出</p>\n</li>\n<li><p>如果两位都输出中间必须有空格</p>\n</li>\n</ol>\n<p>$\\qquad$真的很讨厌这种分类讨论题，一不小心就把所有坑都踩了一遍。首先根据读入的一行字符串第一个字符是否为数字来判断是火星数字还是地球数字。</p>\n<p>$\\qquad$如果是地球数字，分别对13进行除和取余操作，空格需要在两者都不为0时出现，⚠️0需单独输出；如果是火星数字，判断是否含空格，有空格就分别查找对应的数字，无空格时要对两位上的火星数字表示都查找一遍，⚠️“tret”。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;string&gt; high&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;tam&quot;</span>, <span class=\"string\">&quot;hel&quot;</span>, <span class=\"string\">&quot;maa&quot;</span>, <span class=\"string\">&quot;huh&quot;</span>, <span class=\"string\">&quot;tou&quot;</span>, <span class=\"string\">&quot;kes&quot;</span>, <span class=\"string\">&quot;hei&quot;</span>, <span class=\"string\">&quot;elo&quot;</span>, <span class=\"string\">&quot;syy&quot;</span>, <span class=\"string\">&quot;lok&quot;</span>, <span class=\"string\">&quot;mer&quot;</span>, <span class=\"string\">&quot;jou&quot;</span>&#125;,</span><br><span class=\"line\">                   low&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;jan&quot;</span>, <span class=\"string\">&quot;feb&quot;</span>, <span class=\"string\">&quot;mar&quot;</span>, <span class=\"string\">&quot;apr&quot;</span>, <span class=\"string\">&quot;may&quot;</span>, <span class=\"string\">&quot;jun&quot;</span>, <span class=\"string\">&quot;jly&quot;</span>, <span class=\"string\">&quot;aug&quot;</span>, <span class=\"string\">&quot;sep&quot;</span>, <span class=\"string\">&quot;oct&quot;</span>, <span class=\"string\">&quot;nov&quot;</span>, <span class=\"string\">&quot;dec&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin, s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(s[<span class=\"number\">0</span>]))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k = <span class=\"built_in\">stoi</span>(s);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k) cout &lt;&lt; high[k / <span class=\"number\">13</span>] &lt;&lt; (k % <span class=\"number\">13</span> &amp;&amp; k / <span class=\"number\">13</span> ? <span class=\"string\">&quot; &quot;</span> : <span class=\"string\">&quot;&quot;</span>) &lt;&lt; low[k % <span class=\"number\">13</span>] &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> cout &lt;&lt; <span class=\"string\">&quot;tret\\n&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> space = s.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (space == string::npos)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"string\">&quot;tret&quot;</span>) cout &lt;&lt; <span class=\"string\">&quot;0\\n&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> k = <span class=\"built_in\">int</span>(<span class=\"built_in\">find</span>(low.<span class=\"built_in\">begin</span>(), low.<span class=\"built_in\">end</span>(), s) - low.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">                    cout &lt;&lt; (k == low.<span class=\"built_in\">size</span>() ? <span class=\"number\">13</span> * (<span class=\"built_in\">find</span>(high.<span class=\"built_in\">begin</span>(), high.<span class=\"built_in\">end</span>(), s) - high.<span class=\"built_in\">begin</span>()) : k) &lt;&lt; endl;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a = <span class=\"built_in\">int</span>(<span class=\"built_in\">find</span>(high.<span class=\"built_in\">begin</span>(), high.<span class=\"built_in\">end</span>(), s.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, space)) - high.<span class=\"built_in\">begin</span>()),</span><br><span class=\"line\">                        b = <span class=\"built_in\">int</span>(<span class=\"built_in\">find</span>(low.<span class=\"built_in\">begin</span>(), low.<span class=\"built_in\">end</span>(), s.<span class=\"built_in\">substr</span>(space + <span class=\"number\">1</span>, s.<span class=\"built_in\">size</span>() - space - <span class=\"number\">1</span>)) - low.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">                cout &lt;&lt; a * <span class=\"number\">13</span> + b &lt;&lt; endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"People on Mars count their numbers with base 13: Zero on Earth is called “tret” on Mars. The numbers 1 to 12 on Earth is called “jan, feb, m...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1101」Quick Sort","uid":"4d3cc8d027fb9a0d2261e74e193155cc","slug":"「1101」Quick-Sort","date":"2022-10-29T09:44:37.000Z","updated":"2022-10-29T10:02:13.042Z","comments":true,"path":"api/articles/「1101」Quick-Sort.json","keywords":null,"cover":null,"text":"There is a classical process named partition in the famous quick sort algorithm. In this process we typically choose one element as the pivo...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1099」Build A Binary Search Tree","uid":"e3cd66a2f1f386d336b0cf25b87033ab","slug":"「1099」Build-A-Binary-Search-Tree","date":"2022-10-27T12:04:57.000Z","updated":"2022-10-27T12:20:48.347Z","comments":true,"path":"api/articles/「1099」Build-A-Binary-Search-Tree.json","keywords":null,"cover":[],"text":"A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties: The left subtree of a node contains o...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"binary search","slug":"binary-search","count":7,"path":"api/tags/binary-search.json"},{"name":"BFS","slug":"BFS","count":10,"path":"api/tags/BFS.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}