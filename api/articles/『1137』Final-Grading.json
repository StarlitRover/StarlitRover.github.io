{"title":"『1137』Final Grading","uid":"b068c193355ec83faa12b088a84c2501","slug":"『1137』Final-Grading","date":"2022-11-25T09:13:34.000Z","updated":"2022-11-25T09:34:56.531Z","comments":true,"path":"api/articles/『1137』Final-Grading.json","keywords":null,"cover":null,"content":"<p>For a student taking the online course “Data Structures” on China University MOOC (<a href=\"http://www.icourse163.org/\">http://www.icourse163.org/</a>), to be qualified for a certificate, he&#x2F;she must first obtain no less than 200 points from the online programming assignments, and then receive a final grade no less than 60 out of 100. The final grade is calculated by $G&#x3D;(G_{mid−term}​×40\\%+G_{final}​×60\\%)$ if $G_{mid−term}​&gt;G_{final}$​, or $G_{final}$​ will be taken as the final grade G. Here $G_{mid−term}$​ and $G_{final}$​ are the student’s scores of the mid-term and the final exams, respectively.</p>\n<p>The problem is that different exams have different grading sheets. Your job is to write a program to merge all the grading sheets into one.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives three positive integers: P , the number of students having done the online programming assignments; M, the number of students on the mid-term list; and N, the number of students on the final exam list. All the numbers are no more than 10,000.</p>\n<p>Then three blocks follow. The first block contains P online programming scores $G_p$​’s; the second one contains M mid-term scores $G_{mid−term}​$’s; and the last one contains N final exam scores $G_{final}$​’s. Each score occupies a line with the format: <code>StudentID Score</code>, where <code>StudentID</code> is a string of no more than 20 English letters and digits, and <code>Score</code> is a nonnegative integer (the maximum score of the online programming is 900, and that of the mid-term and final exams is 100).</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each case, print the list of students who are qualified for certificates. Each student occupies a line with the format:</p>\n<p><code>StudentID</code> $G_p\\ G_{mid−term}\\ ​G_{final}\\ G$</p>\n<p>$$If some score does not exist, output “−1” instead. The output must be sorted in descending order of their final grades (G must be rounded up to an integer). If there is a tie, output in ascending order of their <code>StudentID</code>‘s. It is guaranteed that the <code>StudentID</code>‘s are all distinct, and there is at least one qullified student.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 6 7</span><br><span class=\"line\">01234 880</span><br><span class=\"line\">a1903 199</span><br><span class=\"line\">ydjh2 200</span><br><span class=\"line\">wehu8 300</span><br><span class=\"line\">dx86w 220</span><br><span class=\"line\">missing 400</span><br><span class=\"line\">ydhfu77 99</span><br><span class=\"line\">wehu8 55</span><br><span class=\"line\">ydjh2 98</span><br><span class=\"line\">dx86w 88</span><br><span class=\"line\">a1903 86</span><br><span class=\"line\">01234 39</span><br><span class=\"line\">ydhfu77 88</span><br><span class=\"line\">a1903 66</span><br><span class=\"line\">01234 58</span><br><span class=\"line\">wehu8 84</span><br><span class=\"line\">ydjh2 82</span><br><span class=\"line\">missing 99</span><br><span class=\"line\">dx86w 81</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">missing 400 -1 99 99</span><br><span class=\"line\">ydjh2 200 98 82 88</span><br><span class=\"line\">dx86w 220 88 81 84</span><br><span class=\"line\">wehu8 300 55 84 84</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$  分三块给出 上机、期中和期末 成绩名单，一个学生的最终成绩$G$计算方式如下：</p>\n<ol>\n<li><p>期末成绩≥期中成绩：取期末成绩为总成绩</p>\n</li>\n<li><p>期末成绩&lt;期中成绩：$G&#x3D;(G_{mid−term}​×40\\%+G_{final}​×60\\%)$</p>\n</li>\n<li><p>如果上机分数没有到200分（包括没参加），或者总成绩G没到60分，则认定该学生成绩无效</p>\n</li>\n</ol>\n<p>$\\qquad$那么最终需要输出所有成绩有效学生的各门分数+总成绩，按照总成绩降序排列，总成绩相同则按照ID升序排列。</p>\n<p>$\\qquad$我们先用一个<code>map&lt;string,tuple&lt;int,int,int&gt;&gt;</code>建立ID到三门成绩的映射，第一轮读入上机分数，如果成绩没到200就不存入。接着读入期中和期末成绩，这里我们只将上机分数有效的同学成绩录入（就是map中能找到ID的）。然后按照上述规则计算这些同学的总成绩，将总成绩也有效（G≥60）的学生ID和G存入一个<code>vector&lt;pair&lt;int,string&gt;&gt;</code>，以便后续的sort。指定cmp函数后直接sort，然后按照顺序输出即可。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>, string&gt; pis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p, m, n, s, f;</span><br><span class=\"line\">    cin &gt;&gt; p &gt;&gt; m &gt;&gt; n;</span><br><span class=\"line\">    string id;</span><br><span class=\"line\">    map&lt;string, tuple&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; score;</span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>, string&gt;&gt; <span class=\"keyword\">final</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; p; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; id &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s &gt;= <span class=\"number\">200</span>) score[id] = <span class=\"built_in\">make_tuple</span>(s, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; id &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = score.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((it = score.<span class=\"built_in\">find</span>(id)) != score.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">            <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(it-&gt;second) = s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; id &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = score.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((it = score.<span class=\"built_in\">find</span>(id)) != score.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">            <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(it-&gt;second) = s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t: score)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f = <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(t.second) &gt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(t.second) ? <span class=\"built_in\">round</span>(<span class=\"number\">0.4</span> * <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(t.second) + <span class=\"number\">0.6</span> * <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(t.second))</span><br><span class=\"line\">                                                : <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(t.second);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f &gt;= <span class=\"number\">60</span>) <span class=\"keyword\">final</span>.<span class=\"built_in\">emplace_back</span>(f, t.first);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"keyword\">final</span>.<span class=\"built_in\">begin</span>(), <span class=\"keyword\">final</span>.<span class=\"built_in\">end</span>(),</span><br><span class=\"line\">         [](pis &amp;a, pis &amp;b) &#123; <span class=\"keyword\">return</span> a.first != b.first ? a.first &gt; b.first : a.second &lt; b.second; &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t: <span class=\"keyword\">final</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d %d %d %d\\n&quot;</span>, t.second.<span class=\"built_in\">c_str</span>(), <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(score[t.second]), <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(score[t.second]),</span><br><span class=\"line\">               <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(score[t.second]), t.first);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$这里我对期中、期末成绩的初始化是-1，主要为了最后输出的方便，至于在计算总成绩的时候，如果期末成绩为-1（没参加考试）根本不可能让总成绩达到60；如果期中没考，那么就会选择期末成绩为总成绩，因此-1对总成绩计算没有影响。</p>\n","text":"For a student taking the online course “Data Structures” on China University MOOC (http://www.icourse163.org/), to be qualified for a certif...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1138」Postorder Traversal","uid":"568e7e4ef7b87e91d83cab23742c4094","slug":"「1138」Postorder-Traversal","date":"2022-11-25T14:28:08.000Z","updated":"2022-11-25T14:35:40.949Z","comments":true,"path":"api/articles/「1138」Postorder-Traversal.json","keywords":null,"cover":null,"text":"Suppose that all the keys in a binary tree are distinct positive integers. Given the preorder and inorder traversal sequences, you are suppo...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"『1136」A Delayed Palindrome","uid":"53c2472eec1fb780c12dac8c28c45b29","slug":"『1136」A-Delayed-Palindrome","date":"2022-11-25T09:05:29.000Z","updated":"2022-11-25T09:36:24.245Z","comments":true,"path":"api/articles/『1136」A-Delayed-Palindrome.json","keywords":null,"cover":null,"text":"Consider a positive integer N written in standard notation with k+1 digits ai​ as $a_k​⋯a_1​a_0​$ with $0≤a_i​&lt;10$ for all $i$ and $a_k​&...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"reverse","slug":"reverse","count":4,"path":"api/tags/reverse.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}