{"title":"「1031」Hello World for U","uid":"786aa9c8aedf18362cb4846354e16ec2","slug":"「1031」Hello-World-for-U","date":"2022-07-21T09:30:51.000Z","updated":"2022-07-21T09:44:50.495Z","comments":true,"path":"api/articles/「1031」Hello-World-for-U.json","keywords":null,"cover":null,"content":"<p>Given any string of N (≥5) characters, you are asked to form the characters into the shape of <code>U</code>. For example, <code>helloworld</code> can be printed as:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h  d</span><br><span class=\"line\">e  l</span><br><span class=\"line\">l  r</span><br><span class=\"line\">lowo</span><br></pre></td></tr></table></figure>\n\n<p>That is, the characters must be printed in the original order, starting top-down from the left vertical line with $n_1$​ characters, then left to right along the bottom line with $n_2​$ characters, and finally bottom-up along the vertical line with $n_3$​ characters. And more, we would like <code>U</code> to be as squared as possible —— that is, it must be satisfied that $n_1&#x3D;n_3​&#x3D;\\max \\{ k | k≤n_2​\\ for\\ all\\ 3≤n_2​≤N \\}$ with $n_1+n_2+n_3​−2&#x3D;N$.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. Each case contains one string with no less than 5 and no more than 80 characters in a line. The string contains no white space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print the input string in the shape of U as specified in the description.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helloworld!</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h   !</span><br><span class=\"line\">e   d</span><br><span class=\"line\">l   l</span><br><span class=\"line\">lowor</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$难得来一道画画题放松放松。给出一个字符串，需要你尽可能画成【U】的样子，而且这个U尽可能贴近正方形，另外高度不能超过宽度。那么很显然</p>\n<p>$$<br>n_1&#x3D;n_3&#x3D;(N+2)&#x2F;3\\ ,\\ n_2&#x3D;N-2n_1+2<br>$$</p>\n<p>$\\qquad$于是乎，构造一个$(n_2-2)$的空格字符串，稍微操作一下，就画完了。</p>\n<hr>\n<h2><span id=\"c-d-e\">C ☺ D E</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> m = (s.<span class=\"built_in\">size</span>() + <span class=\"number\">2</span>) / <span class=\"number\">3</span>, n = s.<span class=\"built_in\">size</span>() - <span class=\"number\">2</span> * m + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">blank</span><span class=\"params\">(n - <span class=\"number\">2</span>, <span class=\"string\">&#x27; &#x27;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">        cout &lt;&lt; s[i] &lt;&lt; blank &lt;&lt; s[s.<span class=\"built_in\">size</span>() - i - <span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; s.<span class=\"built_in\">substr</span>(m - <span class=\"number\">1</span>, n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$<code>string.substr(m,n)</code>可以截取字符串第m个位置（0是第一个位置）起n个字符的字符串。</p>\n","text":"Given any string of N (≥5) characters, you are asked to form the characters into the shape of U. For example, helloworld can be printed as: ...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C ☺ D E</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1032」Sharing","uid":"2aa4f707763887fd968ccc8e9446d574","slug":"「1032」Sharing","date":"2022-08-01T07:30:35.000Z","updated":"2022-08-01T07:45:42.467Z","comments":true,"path":"api/articles/「1032」Sharing.json","keywords":null,"cover":[],"text":"To store English words, one method is to use linked lists and store a word letter by letter. To save some space, we may let the words share ...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1030」Travel Plan","uid":"ed8d01651cc47c3cf52012b240c9dde7","slug":"「1030」Travel-Plan","date":"2022-07-21T08:23:49.000Z","updated":"2022-07-21T08:52:35.606Z","comments":true,"path":"api/articles/「1030」Travel-Plan.json","keywords":null,"cover":null,"text":"➳ENTRY A traveler’s map gives the distances between cities along the highways, together with the cost of each highway. Now you are supposed ...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"pair","slug":"pair","count":6,"path":"api/tags/pair.json"},{"name":"vector","slug":"vector","count":17,"path":"api/tags/vector.json"},{"name":"Dijkstra","slug":"Dijkstra","count":6,"path":"api/tags/Dijkstra.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}