{"title":"「1063」Set Similarity","uid":"70201c87e9f11a4fa65c8ac00911ccba","slug":"「1063」Set-Similarity","date":"2022-09-21T08:11:18.000Z","updated":"2022-09-21T09:21:12.296Z","comments":true,"path":"api/articles/「1063」Set-Similarity.json","keywords":null,"cover":null,"content":"<p>Given two sets of integers, the similarity of the sets is defined to be $N_c​&#x2F;N_t​×100%$, where $N_c$​ is the number of distinct common numbers shared by the two sets, and $N_t​$ is the total number of distinct numbers in the two sets. Your job is to calculate the similarity of any given pair of sets.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. Each case first gives a positive integer $N (≤50) $which is the total number of sets. Then N lines follow, each gives a set with a positive $M (≤10^4)$ and followed by M integers in the range [0,109]. After the input of sets, a positive integer $K (≤2000)$ is given, followed by $K$ lines of queries. Each query gives a pair of set numbers (the sets are numbered from 1 to $N$). All the numbers in a line are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each query, print in one line the similarity of the sets, in the percentage form accurate up to 1 decimal place.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">3 99 87 101</span><br><span class=\"line\">4 87 101 5 87</span><br><span class=\"line\">7 99 101 18 5 135 18 99</span><br><span class=\"line\">2</span><br><span class=\"line\">1 2</span><br><span class=\"line\">1 3</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50.0%</span><br><span class=\"line\">33.3%</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$求两集合的相似度&#x3D;交集元素&#x2F;并集元素。</p>\n<p>$\\qquad$实际求解过程中只需要求交集元素即可，并集元素数&#x3D;集合1$.size()$+集合2$.size()$-交集$.size()$。由于C++里面已经支持求交集的函数，可以直接使用，不过用法不是那么好记，当然我们也可以直接用类似归并排序的思想直接实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> InputIt1, <span class=\"keyword\">class</span> InputIt2,</span></span><br><span class=\"line\"><span class=\"function\">         <span class=\"keyword\">class</span> OutputIt, <span class=\"keyword\">class</span> Compare&gt;</span></span><br><span class=\"line\"><span class=\"function\">OutputIt <span class=\"title\">set_intersection</span><span class=\"params\">(InputIt1 first1, InputIt1 last1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                          InputIt2 first2, InputIt2 last2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                          OutputIt d_first, Compare comp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (first1 != last1 &amp;&amp; first2 != last2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">comp</span>(*first1, *first2)) &#123;</span><br><span class=\"line\">            ++first1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">comp</span>(*first2, *first1)) &#123;</span><br><span class=\"line\">                *d_first++ = *first1++; <span class=\"comment\">// *first1 and *first2 are equivalent.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ++first2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d_first;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$事实上Python中的set容器做的挺好，交并运算都符号化了，实现起来也很快。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, k;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; s[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; m;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; k;</span><br><span class=\"line\">            s[i].<span class=\"built_in\">insert</span>(k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; m &gt;&gt; k;</span><br><span class=\"line\">        set&lt;<span class=\"type\">int</span>&gt; inter;</span><br><span class=\"line\">        <span class=\"built_in\">set_intersection</span>(s[m - <span class=\"number\">1</span>].<span class=\"built_in\">begin</span>(), s[m - <span class=\"number\">1</span>].<span class=\"built_in\">end</span>(), s[k - <span class=\"number\">1</span>].<span class=\"built_in\">begin</span>(), s[k - <span class=\"number\">1</span>].<span class=\"built_in\">end</span>(),</span><br><span class=\"line\">                         <span class=\"built_in\">inserter</span>(inter, inter.<span class=\"built_in\">begin</span>()));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.1f%%\\n&quot;</span>, inter.<span class=\"built_in\">size</span>() * <span class=\"number\">1.0</span> / (s[m - <span class=\"number\">1</span>].<span class=\"built_in\">size</span>() + s[k - <span class=\"number\">1</span>].<span class=\"built_in\">size</span>() - inter.<span class=\"built_in\">size</span>()) * <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id>🐎🐎</span></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">sets=[<span class=\"built_in\">set</span>() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">    nums=<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">eval</span>,<span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\">    n=nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        m=nums[j+<span class=\"number\">1</span>]</span><br><span class=\"line\">        sets[i].add(m)</span><br><span class=\"line\">n=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">    a,b=<span class=\"built_in\">map</span>(<span class=\"built_in\">eval</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">    inter=sets[a-<span class=\"number\">1</span>]&amp;sets[b-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%.1f%%&quot;</span>%(<span class=\"built_in\">len</span>(inter)/(<span class=\"built_in\">len</span>(sets[a-<span class=\"number\">1</span>])+<span class=\"built_in\">len</span>(sets[b-<span class=\"number\">1</span>])-<span class=\"built_in\">len</span>(inter))*<span class=\"number\">100</span>))</span><br></pre></td></tr></table></figure>\n","text":"Given two sets of integers, the similarity of the sets is defined to be $N_c​&#x2F;N_t​×100%$, where $N_c$​ is the number of distinct common...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1064」Complete Binary Search Tree","uid":"fc7708d5c5ede5940549730140fdd222","slug":"「1064」Complete-Binary-Search-Tree","date":"2022-09-22T08:21:20.000Z","updated":"2022-10-19T10:53:59.490Z","comments":true,"path":"api/articles/「1064」Complete-Binary-Search-Tree.json","keywords":null,"cover":null,"text":"A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties: The left subtree of a node contains o...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1062」Talent and Virtue","uid":"61bd7651739e9a5cb7671d4227eb7db6","slug":"「1062」Talent-and-Virtue","date":"2022-09-21T03:12:33.000Z","updated":"2022-12-03T03:13:14.449Z","comments":true,"path":"api/articles/「1062」Talent-and-Virtue.json","keywords":null,"cover":null,"text":"About 900 years ago, a Chinese philosopher Sima Guang wrote a history book in which he talked about people’s talent and virtue. According to...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}