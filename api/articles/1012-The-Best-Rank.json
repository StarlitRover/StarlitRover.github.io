{"title":"「1012」The Best Rank","uid":"e26b5ce0cae66dfe27a555c57255d754","slug":"1012-The-Best-Rank","date":"2022-03-03T07:03:15.000Z","updated":"2022-12-02T07:28:37.856Z","comments":true,"path":"api/articles/1012-The-Best-Rank.json","keywords":null,"cover":null,"content":"<p><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805502658068480\">➳ENTRY</a></p>\n<p>$\\qquad$To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: <code>C</code> - C Programming Language, <code>M</code> - Mathematics (Calculus or Linear Algrbra), and <code>E</code> - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p>\n<p>$\\qquad$For example, The grades of <code>C</code>, <code>M</code>, <code>E</code> and <code>A</code> - Average of 4 students are given as the following:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StudentID  C  M  E  A</span><br><span class=\"line\">310101     98 85 88 90</span><br><span class=\"line\">310102     70 95 88 84</span><br><span class=\"line\">310103     82 87 94 88</span><br><span class=\"line\">310104     91 91 91 91</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>$\\qquad$Each input file contains one test case. Each case starts with a line containing 2 numbers <em>N</em> and <em>M</em> (≤2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then <em>N</em> lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of <code>C</code>, <code>M</code> and <code>E</code>. Then there are <em>M</em> lines, each containing a student ID.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>$\\qquad$For each of the <em>M</em> students, print in one line the best rank for him&#x2F;her, and the symbol of the corresponding rank, separated by a space.</p>\n<p>$\\qquad$The priorities of the ranking methods are ordered as <code>A</code> &gt; <code>C</code> &gt; <code>M</code> &gt; <code>E</code>. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p>\n<p>$\\qquad$If a student is not on the grading list, simply output <code>N/A</code>.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 6</span><br><span class=\"line\">310101 98 85 88</span><br><span class=\"line\">310102 70 95 88</span><br><span class=\"line\">310103 82 87 94</span><br><span class=\"line\">310104 91 91 91</span><br><span class=\"line\">310105 85 90 90</span><br><span class=\"line\">310101</span><br><span class=\"line\">310102</span><br><span class=\"line\">310103</span><br><span class=\"line\">310104</span><br><span class=\"line\">310105</span><br><span class=\"line\">999999</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 C</span><br><span class=\"line\">1 M</span><br><span class=\"line\">1 E</span><br><span class=\"line\">1 A</span><br><span class=\"line\">3 A</span><br><span class=\"line\">N/A</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$有点类似那道<a href=\"https://pintia.cn/problem-sets/15/problems/867\">奥运排行榜</a>。众所周知，奥运奖牌榜有金牌榜、总牌榜，甚至还有人均奖牌榜，以灯塔国为首的许多国家都会选择自己国家排名靠前的榜单发布。这道题则换成了学生，一个学生有三门课的成绩，算上平均分就会有四个排名。为了让每位同学能开开心心地回家嗨皮，并免受麻麻的叨叨，学校决定对每位来查分数的同学都只告诉他最高的排名以及相对应的科目（即<strong>排名方式</strong>）。真是个好学校啊～</p>\n<br>\n\n<p>$\\qquad$那就先来个结构体，用来存储一位学生的学号以及各科分数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">info</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string num;</span><br><span class=\"line\">    <span class=\"type\">int</span> score[<span class=\"number\">4</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$大体思路呢，用一个<code>map</code>建立学号到最高排名以及排名方式的索引，然后按照优先级的顺序对四个分数依次进行<code>sort</code>，如果当前<code>sort</code>的结果比<code>map</code>中存储的最高排名要小的话就替换，同时更新排名方式。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;string, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">char</span>&gt;&gt; outcome;</span><br><span class=\"line\"><span class=\"comment\">//map&lt;num,pair&lt;best rank,ranking method&gt; &gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里需要特别注意排名的规则：</p>\n<ol>\n<li>相同分数的人名次相同</li>\n<li>当前面$n(n\\geq2)$个人的分数与名次相同（均为$r$）时，后一个人（其分数比前面$n$个人的分数小）的名次不是$r+1$而是$k+1$，其中$k$是比该人分数大的人数</li>\n</ol>\n<p>$\\qquad$其实这些规则我们都是知道的，但<code>coding</code>的时候总会创造出一个新的排名规则……因此排名时只要和前一个人的分数进行比较即可，如果相同则名次不变，不同时则取其排序序号+1。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = (rank[i].score[idx] == pre ? r : i + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$对了，平均分是一个四舍五入的整数，我们可以直接+0.5</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">score[<span class=\"number\">0</span>] = (c + m + e) / <span class=\"number\">3.0</span> + <span class=\"number\">0.5</span></span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$<code>c,m,e</code>都是整型，<code>/3.0</code>后变为<code>double</code>，<code>+0.5</code>后再（自动）强制类型转换成<code>int</code>赋值给<code>score[0]</code>完成四舍五入。</p>\n<hr>\n<h2><span id=\"cde\">C☺DE</span></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">//global: make sure lambda expression in sort can know &quot;idx&quot;</span></span><br><span class=\"line\"><span class=\"type\">int</span> idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">info</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string num;</span><br><span class=\"line\">    <span class=\"type\">int</span> score[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">//constructor</span></span><br><span class=\"line\">    <span class=\"built_in\">info</span>(string n, <span class=\"type\">int</span> c, <span class=\"type\">int</span> m, <span class=\"type\">int</span> e) : <span class=\"built_in\">num</span>(<span class=\"built_in\">move</span>(n)), score&#123;score[<span class=\"number\">0</span>] = (c + m + e) / <span class=\"number\">3.0</span> + <span class=\"number\">0.5</span>, c, m, e&#125; &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    string num;</span><br><span class=\"line\">    <span class=\"type\">int</span> c, m, e;</span><br><span class=\"line\">  <span class=\"comment\">//used for sorting</span></span><br><span class=\"line\">    vector&lt;info&gt; rank;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; num &gt;&gt; c &gt;&gt; m &gt;&gt; e;</span><br><span class=\"line\">        rank.<span class=\"built_in\">emplace_back</span>(num, c, m, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    map&lt;string, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">char</span>&gt;&gt; outcome;</span><br><span class=\"line\">  <span class=\"comment\">//initialize</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;s: rank)</span><br><span class=\"line\">        outcome[s.num] = <span class=\"built_in\">move</span>(<span class=\"built_in\">pair</span>(n + <span class=\"number\">1</span>, <span class=\"string\">&#x27;-&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> method[<span class=\"number\">4</span>] = &#123;<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (idx = <span class=\"number\">0</span>; idx &lt; <span class=\"number\">4</span>; ++idx)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(rank.<span class=\"built_in\">begin</span>(), rank.<span class=\"built_in\">end</span>(), [](info &amp;a, info &amp;b) &#123; <span class=\"keyword\">return</span> a.score[idx] &gt; b.score[idx]; &#125;);</span><br><span class=\"line\">        <span class=\"type\">int</span> r = <span class=\"number\">1</span>, pre = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = (rank[i].score[idx] == pre ? r : i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            pre = rank[i].score[idx];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r &lt; outcome[rank[i].num].first)</span><br><span class=\"line\">                outcome[rank[i].num] = <span class=\"built_in\">move</span>(<span class=\"built_in\">pair</span>(r, method[idx]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; num;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outcome.<span class=\"built_in\">find</span>(num) == outcome.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;N/A&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; outcome[num].first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; outcome[num].second &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"➳ENTRY $\\qquad$To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: C - C Prog...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C☺DE</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"OpenGL落脚CLion","uid":"481cf8b49191f67983b97c3d9fc63cfa","slug":"OpenGL落脚CLion","date":"2022-03-03T11:45:51.000Z","updated":"2022-03-19T02:30:12.010Z","comments":true,"path":"api/articles/OpenGL落脚CLion.json","keywords":null,"cover":[],"text":"$\\qquad$本篇文章将阐述在Mac os Monterey(12.2.1)的CLion(2021.3.3)上配置OpenGL的整体过程。虽然网上已有相关的文章，但有很多操作存在问题，可能是Mac系统变迁的原因，故作此文。 $\\qquad$原参考文章：Mac Clion Ope...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"血泪史","slug":"血泪史","count":2,"path":"api/categories/血泪史.json"}],"tags":[{"name":"OpenGL","slug":"OpenGL","count":4,"path":"api/tags/OpenGL.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「Section 2」浮点数表示","uid":"2aa32c1dad7cbbce692f6b1b0a062627","slug":"浮点数表示","date":"2022-03-01T08:43:17.000Z","updated":"2022-03-03T08:04:11.531Z","comments":true,"path":"api/articles/浮点数表示.json","keywords":null,"cover":[],"text":" 浮点数：顾名思义，小数点的位置可以浮动，采用了科学记数法的思想 任意一个二进制数都可以用阶码$E$、尾数$M$唯一地表示为$$N&#x3D;2^E\\times M&#x3D;2^{\\pm e}\\times\\pm 0.m$$⚠️正常情况下的尾数$M$包括符号位 阶码$E$决定了数据...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"计算机组成原理","slug":"计算机组成原理","count":8,"path":"api/categories/计算机组成原理.json"}],"tags":[{"name":"notes","slug":"notes","count":13,"path":"api/tags/notes.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}