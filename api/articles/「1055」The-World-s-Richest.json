{"title":"「1055」The World's Richest","uid":"a7cca520edea6b39e829c30cbac4d862","slug":"「1055」The-World-s-Richest","date":"2022-09-06T12:17:47.000Z","updated":"2022-10-17T04:10:04.772Z","comments":true,"path":"api/articles/「1055」The-World-s-Richest.json","keywords":null,"cover":null,"content":"<p>Forbes magazine publishes every year its list of billionaires based on the annual ranking of the world’s wealthiest people. Now you are supposed to simulate this job, but concentrate only on the people in a certain range of ages. That is, given the net worths of N people, you must find the M richest people in a given range of their ages.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains 2 positive integers: $N (≤10^5)$ - the total number of people, and $K (≤10^3)$ - the number of queries. Then N lines follow, each contains the name (string of no more than 8 characters without space), age (integer in $(0, 200]$), and the net worth (integer in $[−10^6,10^6]$) of a person. Finally there are K lines of queries, each contains three positive integers: $M (≤100)$ - the maximum number of outputs, and [<code>Amin</code>, <code>Amax</code>] which are the range of ages. All the numbers in a line are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each query, first print in a line <code>Case #X:</code> where <code>X</code> is the query number starting from 1. Then output the M richest people with their ages in the range [<code>Amin</code>, <code>Amax</code>]. Each person’s information occupies a line, in the format</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name Age Net_Worth</span><br></pre></td></tr></table></figure>\n\n<p>The outputs must be in non-increasing order of the net worths. In case there are equal worths, it must be in non-decreasing order of the ages. If both worths and ages are the same, then the output must be in non-decreasing alphabetical order of the names. It is guaranteed that there is no two persons share all the same of the three pieces of information. In case no one is found, output <code>None</code>.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12 4</span><br><span class=\"line\">Zoe_Bill 35 2333</span><br><span class=\"line\">Bob_Volk 24 5888</span><br><span class=\"line\">Anny_Cin 95 999999</span><br><span class=\"line\">Williams 30 -22</span><br><span class=\"line\">Cindy 76 76000</span><br><span class=\"line\">Alice 18 88888</span><br><span class=\"line\">Joe_Mike 32 3222</span><br><span class=\"line\">Michael 5 300000</span><br><span class=\"line\">Rosemary 40 5888</span><br><span class=\"line\">Dobby 24 5888</span><br><span class=\"line\">Billy 24 5888</span><br><span class=\"line\">Nobody 5 0</span><br><span class=\"line\">4 15 45</span><br><span class=\"line\">4 30 35</span><br><span class=\"line\">4 5 95</span><br><span class=\"line\">1 45 50</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case #1:</span><br><span class=\"line\">Alice 18 88888</span><br><span class=\"line\">Billy 24 5888</span><br><span class=\"line\">Bob_Volk 24 5888</span><br><span class=\"line\">Dobby 24 5888</span><br><span class=\"line\">Case #2:</span><br><span class=\"line\">Joe_Mike 32 3222</span><br><span class=\"line\">Zoe_Bill 35 2333</span><br><span class=\"line\">Williams 30 -22</span><br><span class=\"line\">Case #3:</span><br><span class=\"line\">Anny_Cin 95 999999</span><br><span class=\"line\">Michael 5 300000</span><br><span class=\"line\">Alice 18 88888</span><br><span class=\"line\">Cindy 76 76000</span><br><span class=\"line\">Case #4:</span><br><span class=\"line\">None</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$又是一道名单罗列题，给出福布斯排行榜上所有用户的姓名、年龄和身价，需要你输出给定年龄段之间身价最高的前M位用户信息，若身价一致则按年龄降序排列，若年龄也一致则按姓名降序排列。不存在输出None。</p>\n<p>$\\qquad$没想到C++里有tuple这种神奇的数据结构，本质上是泛化的pair容器，是一个可以包含不同类型数据的结构体类型，那么用户信息就无需建class了。</p>\n<p>$\\qquad$由于最终需要输出指定年龄段之间身价最高的人，因此不能简单地通过几次sort就直接输出。但思想也很简单，按照【身价&gt;年龄&gt;姓名】的优先级对所有用户进行排序，然后从高身价开始遍历，同时计数符合给定年龄段的用户个数，一旦达到M便退出循环。</p>\n<p>$\\qquad$一开始懒得写compare函数，直接就sort了3次：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sort name</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(info.<span class=\"built_in\">begin</span>(),info.<span class=\"built_in\">end</span>(),[](tsii &amp;a,tsii &amp;b)&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(a)&lt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(b);&#125;);</span><br><span class=\"line\"><span class=\"comment\">// sort age </span></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(info.<span class=\"built_in\">begin</span>(),info.<span class=\"built_in\">end</span>(),[](tsii &amp;a,tsii &amp;b)&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(a)&lt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(b);&#125;);</span><br><span class=\"line\"><span class=\"comment\">// sort net worths</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(info.<span class=\"built_in\">begin</span>(),info.<span class=\"built_in\">end</span>(),[](tsii &amp;a,tsii &amp;b)&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(a)&gt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(b);&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$提交后发现有两个数据量较大的测试点挂了，可以说明一点：<big>sort函数在处理大量数据时采用的不是稳定排序算法</big>，即在cmp函数中满足$(a&gt;b)&#x3D;(b&gt;a)&#x3D;false$（注意cmp函数必须严格弱序）的两个对象$a,b$在排序后次序会和原先不同（P.s. 事实上稳定排序可以用<code>stable_sort</code>函数）。所以只能自己写个cmp函数了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(tsii &amp;a, tsii &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(a) != <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(b))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(a) &gt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(b);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(a) != <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(b))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(a) &lt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(b);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(a) &lt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tuple&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> tuple&lt;string, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; tsii;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(tsii &amp;a, tsii &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(a) != <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(b))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(a) &gt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(b);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(a) != <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(b))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(a) &lt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(b);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(a) &lt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;tsii&gt; info;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k, age, net;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; name &gt;&gt; age &gt;&gt; net;</span><br><span class=\"line\">        info.<span class=\"built_in\">emplace_back</span>(name, age, net);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(info.<span class=\"built_in\">begin</span>(), info.<span class=\"built_in\">end</span>(), &amp;cmp);</span><br><span class=\"line\">    <span class=\"type\">int</span> m, amin, amax, cnt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        cin &gt;&gt; m &gt;&gt; amin &gt;&gt; amax;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d:\\n&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t: info)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(t) &gt;= amin &amp;&amp; <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(t) &lt;= amax)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d %d\\n&quot;</span>, <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(t).<span class=\"built_in\">c_str</span>(), <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(t), <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(t));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (++cnt == m)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;None\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Forbes magazine publishes every year its list of billionaires based on the annual ranking of the world’s wealthiest people. Now you are supp...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1056」Mice and Rice","uid":"f2cca43e895bb7a04b6723f4b34dca34","slug":"「1056」Mice-and-Rice","date":"2022-09-07T09:55:58.000Z","updated":"2022-09-11T08:40:34.775Z","comments":true,"path":"api/articles/「1056」Mice-and-Rice.json","keywords":null,"cover":null,"text":"Mice and Rice is the name of a programming contest in which each programmer must write a piece of code to control the movements of a mouse i...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1053」Path of Equal Weight","uid":"f1b87526b0a747be6a4f224868f65aa7","slug":"「1053」Path-of-Equal-Weight","date":"2022-09-04T04:51:05.000Z","updated":"2022-10-19T10:53:49.440Z","comments":true,"path":"api/articles/「1053」Path-of-Equal-Weight.json","keywords":null,"cover":[],"text":"Given a non-empty tree with root R, and with weight Wi​ assigned to each tree node Ti​. The weight of a path from R to L is defined to be th...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"并查集","slug":"并查集","count":4,"path":"api/tags/并查集.json"},{"name":"numeric","slug":"numeric","count":4,"path":"api/tags/numeric.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}