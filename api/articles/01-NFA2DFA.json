{"title":"<01> NFA2DFA","uid":"876685c2961fc61a4c5638eee32e520e","slug":"01-NFA2DFA","date":"2022-05-11T03:07:43.000Z","updated":"2022-05-17T07:57:35.663Z","comments":true,"path":"api/articles/01-NFA2DFA.json","keywords":null,"cover":[],"content":"<p>$\\qquad$本文借助<a href=\"https://github.com/xflr6/graphviz\">Graphviz库</a>实现了NFA转DFA，并输出DFA的状态转移图。</p>\n<img src=\"/images/编译原理/8.png\" style=\"zoom:50%;\">\n\n<span id=\"more\"></span>\n\n<br>\n\n<hr>\n<h2><span id=\"graphviz库介绍\">∅ Graphviz库介绍</span></h2><p>$\\qquad$你一定很疑惑我昨天刚介绍完Transitions库今天怎么就就换了一个绘制库。ummm…Transitions库其实更注重于状态机本身的实现，当你想用状态机来实现某些功能时，Transitions库是一个很好的选择，而绘制状态转移图只是其中的一个子功能，更重要的是无法（我不知道可不可以）显示多个接收状态（<code>GraphMachine</code>中的<code>initial</code>选项只能指定一个节点）。追根溯源，我们不难发现Transitions库其实是用Graphviz库来绘制状态转移图的，那我们为何不直接用它来绘制呢？</p>\n<p>$\\qquad$还是直接用一个简单直观的栗子来说明，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from graphviz import Digraph</span><br><span class=\"line\"></span><br><span class=\"line\"># Graph()--Undirected Graph ; Digraph()--Directed Graph</span><br><span class=\"line\"># engine: choose layout patterns</span><br><span class=\"line\">Dot = Digraph(engine=&#x27;circo&#x27;)</span><br><span class=\"line\"># add nodes: you can specify color and shape of nodes</span><br><span class=\"line\">Dot.node(&#x27;A&#x27;)</span><br><span class=\"line\">Dot.node(&#x27;B&#x27;, style=&#x27;filled&#x27;, fillcolor=&#x27;red&#x27;, shape=&#x27;circle&#x27;)</span><br><span class=\"line\">Dot.node(&#x27;C&#x27;, style=&#x27;filled&#x27;, fillcolor=&#x27;green&#x27;, shape=&#x27;rectangle&#x27;)</span><br><span class=\"line\"># add single edge: (source,destination,label)</span><br><span class=\"line\">Dot.edge(&#x27;A&#x27;, &#x27;B&#x27;, &#x27;Hello&#x27;)</span><br><span class=\"line\">Dot.edge(&#x27;B&#x27;, &#x27;A&#x27;, &#x27;Hola&#x27;)</span><br><span class=\"line\">Dot.edge(&#x27;C&#x27;, &#x27;B&#x27;, &#x27;Bye&#x27;)</span><br><span class=\"line\"># add edges</span><br><span class=\"line\">Dot.edges([&#x27;AC&#x27;, &#x27;BC&#x27;])</span><br><span class=\"line\"># specify save format</span><br><span class=\"line\">Dot.format = &#x27;png&#x27;</span><br><span class=\"line\"># save output</span><br><span class=\"line\">Dot.render(&#x27;First Demo&#x27;, view=True)</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$输出除了有点ugly有点重合外其实也还好，至少可以自己指定颜色和形状：</p>\n<p><img src=\"/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/9.png\"></p>\n<p>$\\qquad$初始化的时候可以指定渲染引擎，常见的渲染引擎有$^{[1][2]}$</p>\n<ul>\n<li><strong>Dot</strong>：默认引擎，主要用于有向图。布局算法将边缘指向相同方向（从上到下或从左到右），然后尝试避免边缘交叉并减少边长。</li>\n<li><strong>Neato</strong>：这是一种“弹簧模型”的布局，基于spring-model（namely force-based）算法，输出缺乏方向性。</li>\n<li><strong>Fdp</strong>：这是一种类似于neato的布局，是通过减少力而不是使用能量来实现的，多用于无向图。</li>\n<li><strong>Sfdp</strong>：渲染大型图，缺乏方向性。</li>\n<li><strong>Twopi</strong>：放射性布局，节点根据它们与给定根节点的距离放置在同心圆上。</li>\n<li><strong>Circo</strong>：适合绘制某些多循环结构的图表，例如某些电信网络。</li>\n</ul>\n<p>$\\qquad$有兴趣进一步了解可以参阅<a href=\"https://graphviz.readthedocs.io/en/stable/index.html\">官方文档</a>。</p>\n<hr>\n<h2><span id=\"א-nfa-2-dfa\">ℵ NFA 2 DFA</span></h2><p>$\\qquad$DFA具有确定性，无ε边，所有状态对于每一个输入字符都有唯一的跳转方向。显然，DFA的每一个状态都是若干个NFA状态的集合。</p>\n<p>$\\qquad$基本算法思想如下：</p>\n<ol>\n<li><p>先求出NFA中每一个状态的$ε-closure$（可以通过ε边到达的状态集，包括自己）并确定输入字符集$symbols$（可能出现的字符）；</p>\n</li>\n<li><p>将开始状态的$ε- closure$放入待更新状态集和历史状态集；</p>\n</li>\n<li><p>从待更新状态集里取出一个状态$A$，计算$A$读入每一个字符$sym$（$\\forall sym \\in symbols$）时跳转到的目的状态$B_{sym}$</p>\n<p>$$B_{sym}&#x3D;\\bigcup\\limits_{state\\in A} ε-clousure(state(sym))$$</p>\n<p>其中$state(sym)$表示NFA中状态$state$读入字符$sym$后跳转到的状态；</p>\n</li>\n<li><p>若目的状态未出现在历史状态中，那么将其加入待更新状态列表，同时加入历史状态集。每次都从待更新状态集中取出一个状态重复上述步骤，直至待更新状态集为空。</p>\n</li>\n</ol>\n<img src=\"/images/编译原理/10.png\" style=\"zoom:60%;\">\n\n<p>$\\qquad$可以参阅这一个例子：<a href=\"https://condor.depaul.edu/glancast/444class/docs/nfa2dfa.html\">Converting an NFA to a DFA - Example</a></p>\n<hr>\n<h2><span id=\"cde\">C☺DE</span></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> graphviz <span class=\"keyword\">import</span> Digraph</span><br><span class=\"line\"></span><br><span class=\"line\">num = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;请输入状态转移函数的个数：&#x27;</span>))</span><br><span class=\"line\">start = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;请输入初始状态序号：&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># end is a list</span></span><br><span class=\"line\">end = <span class=\"built_in\">set</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;请输入所有接收状态序号：&#x27;</span>).split())</span><br><span class=\"line\">symbols = <span class=\"built_in\">set</span>()</span><br><span class=\"line\"><span class=\"comment\"># transfer[sym][source]=dest ⇔ (source)--sym--&gt;(dest)</span></span><br><span class=\"line\">transfer = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">closure = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;请依次输入【trigger】【source】【destination】:&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">    a, b, c = <span class=\"built_in\">input</span>().split()</span><br><span class=\"line\">    closure.setdefault(b, &#123;b&#125;)</span><br><span class=\"line\">    closure.setdefault(c, &#123;c&#125;)  <span class=\"comment\"># 防止终结节点没有入度</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;#&#x27; is equivalent with &#x27;ε&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a != <span class=\"string\">&#x27;#&#x27;</span>:</span><br><span class=\"line\">        symbols.add(a)</span><br><span class=\"line\">        transfer.setdefault(a, <span class=\"built_in\">dict</span>()).setdefault(b, &#123;c&#125;).add(c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        closure[b].add(c)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上述代码得到的closure只是邻接ε节点，还需要迭代计算真正的ε-closure</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> state <span class=\"keyword\">in</span> closure:</span><br><span class=\"line\">    upd = closure[state]</span><br><span class=\"line\">    <span class=\"comment\"># upd是每一轮新增节点的集合</span></span><br><span class=\"line\">    <span class=\"comment\"># 当upd不为空时需要继续迭代更新</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> upd:</span><br><span class=\"line\">        closure[state] |= upd</span><br><span class=\"line\">        nxt = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> upd:</span><br><span class=\"line\">            nxt |= closure[n]</span><br><span class=\"line\">        upd = nxt - closure[state]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 历史状态集</span></span><br><span class=\"line\">DFA_states = [closure[start]]</span><br><span class=\"line\"><span class=\"comment\"># 待更新状态集</span></span><br><span class=\"line\">to_update = [closure[start]]</span><br><span class=\"line\">transitions = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> to_update:</span><br><span class=\"line\">    status = to_update.pop()</span><br><span class=\"line\">    <span class=\"comment\"># status的状态转移列表</span></span><br><span class=\"line\">    single_trans = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> sym <span class=\"keyword\">in</span> symbols:</span><br><span class=\"line\">        new = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        tmp = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> status:</span><br><span class=\"line\">            tmp |= transfer[sym].setdefault(s, <span class=\"built_in\">set</span>())</span><br><span class=\"line\">        <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> tmp:</span><br><span class=\"line\">            new |= closure[s]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> new <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> DFA_states:</span><br><span class=\"line\">            to_update.append(new)</span><br><span class=\"line\">            DFA_states.append(new)</span><br><span class=\"line\">        <span class=\"comment\"># 将具有相同source和dest的有向边label进行合并</span></span><br><span class=\"line\">        flag = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> single_trans:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> t[<span class=\"number\">2</span>] == <span class=\"built_in\">str</span>(new):</span><br><span class=\"line\">                t[<span class=\"number\">0</span>] = t[<span class=\"number\">0</span>] + <span class=\"string\">&#x27;|&#x27;</span> + sym</span><br><span class=\"line\">                flag = <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">            single_trans.append([sym, <span class=\"built_in\">str</span>(status), <span class=\"built_in\">str</span>(new)])</span><br><span class=\"line\"></span><br><span class=\"line\">    transitions.extend(single_trans)</span><br><span class=\"line\"></span><br><span class=\"line\">DFA = Digraph(engine=<span class=\"string\">&#x27;dot&#x27;</span>)</span><br><span class=\"line\">DFA.edge(<span class=\"string\">&#x27;start&#x27;</span>, <span class=\"built_in\">str</span>(DFA_states[<span class=\"number\">0</span>]))</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> DFA_states:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &amp; end:</span><br><span class=\"line\">        DFA.node(<span class=\"built_in\">str</span>(n), style=<span class=\"string\">&#x27;filled&#x27;</span>, fillcolor=<span class=\"string\">&#x27;green&#x27;</span>, shape=<span class=\"string\">&#x27;rectangle&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        DFA.node(<span class=\"built_in\">str</span>(n), shape=<span class=\"string\">&#x27;rectangle&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> transitions:</span><br><span class=\"line\">    DFA.edge(t[<span class=\"number\">1</span>], t[<span class=\"number\">2</span>], label=t[<span class=\"number\">0</span>])</span><br><span class=\"line\">DFA.<span class=\"built_in\">format</span> = <span class=\"string\">&#x27;png&#x27;</span></span><br><span class=\"line\">DFA.render(<span class=\"string\">&#x27;DFA&#x27;</span>, view=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3><span id=\"input\">≯ INPUT</span></h3><p>$\\qquad$我们就用上一篇文章中最后的DEMO来作为输入，其中【#】代表ε：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入状态转移函数的个数：23</span><br><span class=\"line\">请输入初始状态序号：6</span><br><span class=\"line\">请输入所有接收状态序号：17</span><br><span class=\"line\">请依次输入【trigger】【source】【destination】:</span><br><span class=\"line\">a 0 1</span><br><span class=\"line\">a 2 3</span><br><span class=\"line\"># 1 2</span><br><span class=\"line\">b 4 5</span><br><span class=\"line\"># 6 4</span><br><span class=\"line\"># 6 0</span><br><span class=\"line\"># 5 7</span><br><span class=\"line\"># 3 7</span><br><span class=\"line\"># 6 7</span><br><span class=\"line\"># 7 6</span><br><span class=\"line\">a 8 9</span><br><span class=\"line\"># 7 8</span><br><span class=\"line\">a 10 11</span><br><span class=\"line\">b 12 13</span><br><span class=\"line\">b 14 15</span><br><span class=\"line\"># 13 14</span><br><span class=\"line\"># 16 12</span><br><span class=\"line\"># 16 10</span><br><span class=\"line\"># 15 17</span><br><span class=\"line\"># 11 17</span><br><span class=\"line\"># 16 17</span><br><span class=\"line\"># 17 16</span><br><span class=\"line\"># 9 16</span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/编译原理/7.png\" style=\"zoom:67%;\">\n\n<br>\n\n<h3><span id=\"output\">≮ OUTPUT</span></h3><img src=\"/images/编译原理/11.png\" style=\"zoom:70%;\">\n\n<p>$\\qquad$上图中的set()其实是空集，可以看到一旦到达空集状态就无法再出去，以至于永远无法被接收，因此我们也称之为<strong>陷阱</strong>（trap）。另外接收状态全部用绿色标注出来了，非常清晰明了。</p>\n<hr>\n<h3><span id=\"reference\">「Reference」</span></h3><ul>\n<li>[1] Graphviz入门，<a href=\"https://www.cnblogs.com/born2run/p/9581386.html\">https://www.cnblogs.com/born2run/p/9581386.html</a></li>\n<li>[2] 探索Graphviz，<a href=\"https://zhuanlan.zhihu.com/p/81853828\">https://zhuanlan.zhihu.com/p/81853828</a></li>\n</ul>\n","text":"$\\qquad$本文借助Graphviz库实现了NFA转DFA，并输出DFA的状态转移图。 ∅ Graphviz库介绍$\\qquad$你一定很疑惑我昨天刚介绍完Transitions库今天怎么就就换了一个绘制库。ummm…Transitions库其实更注重于状态机本身的实现，当你...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"编译原理","slug":"编译原理","count":7,"path":"api/categories/编译原理.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">∅ Graphviz库介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">ℵ NFA 2 DFA</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C☺DE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">≯ INPUT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">≮ OUTPUT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">「Reference」</span></a></li></ol></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"The Egg","uid":"13a6dd20890e09e09e3cc068d4199bf2","slug":"The-Egg","date":"2022-05-12T09:32:31.000Z","updated":"2022-05-12T10:00:21.021Z","comments":true,"path":"api/articles/The-Egg.json","keywords":null,"cover":[],"text":"$\\qquad$欢迎来到✮Star✮频道，这个频道是一个不定期的分享接口。今天来这的是一篇科幻小说The Egg，敬请享用。 The EggAndy Weir You were on your way home when you died. It was a car accide...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"✮Star✮","slug":"✮Star✮","count":1,"path":"api/categories/✮Star✮.json"}],"tags":[{"name":"Sci-Fi","slug":"Sci-Fi","count":1,"path":"api/tags/Sci-Fi.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"<00> REG2NFA","uid":"6fcdc9dd323137269ea9dcabb8b1efc8","slug":"00-REG2NFA","date":"2022-05-09T15:49:12.000Z","updated":"2022-05-17T07:57:50.980Z","comments":true,"path":"api/articles/00-REG2NFA.json","keywords":null,"cover":[],"text":"$\\qquad$本文借助transitions库基于逆波兰表示法（Reverse Polish Notation，RPN）实现了正则表达式转NFA，并画出相关的状态转移图。 ∅ Transitions库介绍$\\qquad$引用官网中的一句话“They say a good exa...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"编译原理","slug":"编译原理","count":7,"path":"api/categories/编译原理.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}