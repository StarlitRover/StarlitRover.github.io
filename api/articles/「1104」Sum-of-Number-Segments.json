{"title":"「1104」Sum of Number Segments","uid":"032852f306632572219a0e57a789cd37","slug":"「1104」Sum-of-Number-Segments","date":"2022-11-02T08:58:20.000Z","updated":"2022-11-02T09:29:56.391Z","comments":true,"path":"api/articles/「1104」Sum-of-Number-Segments.json","keywords":null,"cover":null,"content":"<p>Given a sequence of positive numbers, a segment is defined to be a consecutive subsequence. For example, given the sequence { 0.1, 0.2, 0.3, 0.4 }, we have 10 segments: (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) and (0.4).</p>\n<p>Now given a sequence, you are supposed to find the sum of all the numbers in all the segments. For the previous example, the sum of all the 10 segments is 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 &#x3D; 5.0.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N, the size of the sequence which is no more than $10^5$. The next line contains N positive numbers in the sequence, each no more than 1.0, separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in one line the sum of all the numbers in all the segments, accurate up to 2 decimal places.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">0.1 0.2 0.3 0.4</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.00</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$输出一个数组所有连续子串之和之和，可以认为是把所有连续子串中出现的数字加起来。</p>\n<p>$\\qquad$很显然，我们只需要统计每个数字出现了几次，考虑第$i$个数（从0开始数），首先以该数字开头的子串共有$N-i$个，而以第$j(j\\leq i)$个数开头并包含第$i$个数的连续子串个数都是$(N-i)$，因此第$i$个数共计出现$(i+1)(N-i)$次。最终答案即为</p>\n<p>$$<br>\\sum\\limits_{i&#x3D;0}^{N-1} (i+1)(N-i)\\cdot a[i]<br>$$</p>\n<p>$\\qquad$本以为又是水题一道，没想到case 2绿的晃眼。看了半天找不出什么错误，冥冥之中估计又是四舍五入或者是精度的问题。参阅了一些博客之后，发现确实是double的问题。C语言浮点数存储是参照IEEE 754的，简单地说就是由一位符号位(S)和固定位数的阶码(E)、尾数(f)组成$(-1)^S\\cdot\\overline{1.f}\\cdot 2^{E}$。由于尾数位数有限，因此在阶码较大时低位的数字根本无法存储从而造成了精度的损失，而且数字越大损失越大。有兴趣可以看看纠正测试数据这位同学的博客<a href=\"https://blog.zhengrh.com/post/about-double/\">由一道 OJ 引发的关于 double 类型的一些思考</a>。</p>\n<p>$\\qquad$想在本题内解决这个问题并不难，只要将double左移3位转存long long，最后再&#x2F;1000.0即可，不过这只能算缓兵之计。如果想要做到0误差可能就需要实现一个大数类，这不经让我想起了大一做的个大作业：<a href=\"https://github.com/StarlitRover/LanGuaGe-C/tree/main/%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%AE%9E%E6%95%B0%E8%BF%90%E7%AE%97\">高精度实数运算</a>，是用链表实现了一个大数类，算是用空间换精度，闲来无事可以瞅瞅。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">double</span> k;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; k;</span><br><span class=\"line\">        ans += (<span class=\"type\">long</span> <span class=\"type\">long</span>)(k * <span class=\"number\">1000</span>) * (n - i) * (i + <span class=\"number\">1</span>)  ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2lf&quot;</span>, ans/<span class=\"number\">1000.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Given a sequence of positive numbers, a segment is defined to be a consecutive subsequence. For example, given the sequence { 0.1, 0.2, 0.3,...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1105」Spiral Matrix","uid":"9fd6e61746966814315473dc06fd52de","slug":"「1105」Spiral-Matrix","date":"2022-11-02T15:21:40.000Z","updated":"2022-11-02T16:06:02.566Z","comments":true,"path":"api/articles/「1105」Spiral-Matrix.json","keywords":null,"cover":null,"text":"This time your job is to fill a sequence of N positive integers into a spiral matrix in non-increasing order. A spiral matrix is filled in f...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1103」Integer Factorization","uid":"4ef3e4e200e4b84799be544dd9cdda17","slug":"「1103」Integer-Factorization","date":"2022-11-02T02:26:51.000Z","updated":"2022-11-02T10:51:26.112Z","comments":true,"path":"api/articles/「1103」Integer-Factorization.json","keywords":null,"cover":null,"text":"The K−P factorization of a positive integer N is to write N as the sum of the P-th power of K positive integers. You are supposed to write a...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}