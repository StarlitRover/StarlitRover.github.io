{"title":"「1110」Complete Binary Tree","uid":"1c866b059d574be929326143e875b3a0","slug":"「1110」Complete-Binary-Tree","date":"2022-11-13T15:44:16.000Z","updated":"2022-11-13T15:56:18.084Z","comments":true,"path":"api/articles/「1110」Complete-Binary-Tree.json","keywords":null,"cover":null,"content":"<p>Given a tree, you are supposed to tell if it is a complete binary tree.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤20) which is the total number of nodes in the tree – and hence the nodes are numbered from 0 to N−1. Then N lines follow, each corresponds to a node, and gives the indices of the left and right children of the node. If the child does not exist, a <code>-</code> will be put at the position. Any pair of children are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each case, print in one line <code>YES</code> and the index of the last node if the tree is a complete binary tree, or <code>NO</code> and the index of the root if not. There must be exactly one space separating the word and the number.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br><span class=\"line\">7 8</span><br><span class=\"line\">- -</span><br><span class=\"line\">- -</span><br><span class=\"line\">- -</span><br><span class=\"line\">0 1</span><br><span class=\"line\">2 3</span><br><span class=\"line\">4 5</span><br><span class=\"line\">- -</span><br><span class=\"line\">- -</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES 8</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br><span class=\"line\">- -</span><br><span class=\"line\">4 5</span><br><span class=\"line\">0 6</span><br><span class=\"line\">- -</span><br><span class=\"line\">2 3</span><br><span class=\"line\">- 7</span><br><span class=\"line\">- -</span><br><span class=\"line\">- -</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NO 1</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$给出一棵二叉树的节点关系，请判断其是否为完全二叉树（所有节点索引与满二叉树一致），若是则输出最后一个节点的编号，否则输出根节点编号。</p>\n<p>$\\qquad$首先我们将根节点编号变量赋值$\\frac{N(N-1)}{2}$，i.e.，所有编号之和，然后把有父亲节点的编号都减掉，剩下的必然是根节点编号（⚠️但要保证所有节点之和不能超出int范围）。然后DFS递归遍历整棵树，把相应的节点编号赋值到层次遍历的向量中。索引为$i$节点的左右子节点索引分别为$2i+1$、$2i+2$，一旦发现某个节点的编号超出了N就说明不是完全二叉树，直接返回false。</p>\n<p>$\\qquad$最后如果YES就输出层次遍历的最后一个节点编号，反之则输出root。</p>\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, top;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; level;</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; sons;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isCBT</span><span class=\"params\">(<span class=\"type\">int</span> node, <span class=\"type\">int</span> idx)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    level[idx] = node;</span><br><span class=\"line\">    <span class=\"type\">int</span> l = sons[node].first, r = sons[node].second;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((l != <span class=\"number\">-1</span> &amp;&amp; <span class=\"number\">2</span> * idx + <span class=\"number\">1</span> &lt; n) ? <span class=\"built_in\">isCBT</span>(l, <span class=\"number\">2</span> * idx + <span class=\"number\">1</span>) : (l == <span class=\"number\">-1</span>))</span><br><span class=\"line\">        &amp;&amp; ((r != <span class=\"number\">-1</span> &amp;&amp; <span class=\"number\">2</span> * idx + <span class=\"number\">2</span> &lt; n) ? <span class=\"built_in\">isCBT</span>(r, <span class=\"number\">2</span> * idx + <span class=\"number\">2</span>) : (r == <span class=\"number\">-1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    top = n * (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    sons.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    string a, b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: sons)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        k.first = a == <span class=\"string\">&quot;-&quot;</span> ? <span class=\"number\">-1</span> : (top -= <span class=\"built_in\">stoi</span>(a), <span class=\"built_in\">stoi</span>(a));</span><br><span class=\"line\">        k.second = b == <span class=\"string\">&quot;-&quot;</span> ? <span class=\"number\">-1</span> : (top -= <span class=\"built_in\">stoi</span>(b), <span class=\"built_in\">stoi</span>(b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    level.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isCBT</span>(top, <span class=\"number\">0</span>))</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;YES &quot;</span> &lt;&lt; level.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">    <span class=\"keyword\">else</span> cout &lt;&lt; <span class=\"string\">&quot;NO &quot;</span> &lt;&lt; top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Given a tree, you are supposed to tell if it is a complete binary tree. Input Specification:Each input file contains one test case. For each...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"},{"name":"DFS","slug":"DFS","count":7,"path":"api/tags/DFS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1111」Online Map","uid":"d918ffea37eef621e5dbc24cef76eeef","slug":"「1111」Online-Map","date":"2022-11-14T15:22:03.000Z","updated":"2022-11-14T17:25:57.700Z","comments":true,"path":"api/articles/「1111」Online-Map.json","keywords":null,"cover":null,"text":"Input our current position and a destination, an online map can recommend several paths. Now your job is to recommend two paths to your user...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Dijkstra","slug":"Dijkstra","count":6,"path":"api/tags/Dijkstra.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1109」Group Photo","uid":"e5acc25f52a3eda31fca71a61f248459","slug":"「1109」Group-Photo","date":"2022-11-13T11:56:09.000Z","updated":"2022-11-13T14:46:48.744Z","comments":true,"path":"api/articles/「1109」Group-Photo.json","keywords":null,"cover":null,"text":"Formation is very important when taking a group photo. Given the rules of forming K rows with N people as the following: The number of peopl...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}