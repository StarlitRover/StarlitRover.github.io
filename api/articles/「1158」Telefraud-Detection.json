{"title":"「1158」Telefraud Detection","uid":"7369aa2af707a2b4122dd8865d50ba11","slug":"「1158」Telefraud-Detection","date":"2022-12-01T06:53:52.000Z","updated":"2022-12-01T07:32:42.162Z","comments":true,"path":"api/articles/「1158」Telefraud-Detection.json","keywords":null,"cover":null,"content":"<p>Telefraud（电信诈骗） remains a common and persistent problem in our society. In some cases, unsuspecting victims lose their entire life savings. To stop this crime, you are supposed to write a program to detect those suspects from a huge amount of phone call records.</p>\n<p>A person must be detected as a suspect if he&#x2F;she makes more than K short phone calls to <strong>different</strong> people everyday, but no more than 20% of these people would call back. And more, if two suspects are calling each other, we say they might belong to the same gang. A makes a <strong>short</strong> phone call to B means that the total duration of the calls from A to B is no more than 5 minutes.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives 3 positive integers $K (≤500$, the threshold（阈值） of the amount of short phone calls), $N (≤10^3$, the number of different phone numbers), and $M (≤10^5$, the number of phone call records). Then M lines of one day’s records are given, each in the format:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">caller receiver duration</span><br></pre></td></tr></table></figure>\n\n<p>where <code>caller</code> and <code>receiver</code> are numbered from 1 to N, and <code>duration</code> is no more than 1440 minutes in a day.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>Print in each line all the detected suspects in a gang, in ascending order of their numbers. The gangs are printed in ascending order of their first members. The numbers in a line must be separated by exactly 1 space, and there must be no extra space at the beginning or the end of the line.</p>\n<p>If no one is detected, output <code>None</code> instead.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 15 31</span><br><span class=\"line\">1 4 2</span><br><span class=\"line\">1 5 2</span><br><span class=\"line\">1 5 4</span><br><span class=\"line\">1 7 5</span><br><span class=\"line\">1 8 3</span><br><span class=\"line\">1 9 1</span><br><span class=\"line\">1 6 5</span><br><span class=\"line\">1 15 2</span><br><span class=\"line\">1 15 5</span><br><span class=\"line\">3 2 2</span><br><span class=\"line\">3 5 15</span><br><span class=\"line\">3 13 1</span><br><span class=\"line\">3 12 1</span><br><span class=\"line\">3 14 1</span><br><span class=\"line\">3 10 2</span><br><span class=\"line\">3 11 5</span><br><span class=\"line\">5 2 1</span><br><span class=\"line\">5 3 10</span><br><span class=\"line\">5 1 1</span><br><span class=\"line\">5 7 2</span><br><span class=\"line\">5 6 1</span><br><span class=\"line\">5 13 4</span><br><span class=\"line\">5 15 1</span><br><span class=\"line\">11 10 5</span><br><span class=\"line\">12 14 1</span><br><span class=\"line\">6 1 1</span><br><span class=\"line\">6 9 2</span><br><span class=\"line\">6 10 5</span><br><span class=\"line\">6 11 2</span><br><span class=\"line\">6 12 1</span><br><span class=\"line\">6 13 1</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 5</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<p><strong>Note:</strong> In sample 1, although <code>1</code> had 9 records, but there were 7 distinct receivers, among which <code>5</code> and <code>15</code> both had conversations lasted more than 5 minutes in total. Hence <code>1</code> had made 5 short phone calls and didn’t exceed the threshold 5, and therefore is not a suspect.</p>\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 7 8</span><br><span class=\"line\">1 2 1</span><br><span class=\"line\">1 3 1</span><br><span class=\"line\">1 4 1</span><br><span class=\"line\">1 5 1</span><br><span class=\"line\">1 6 1</span><br><span class=\"line\">1 7 1</span><br><span class=\"line\">2 1 1</span><br><span class=\"line\">3 1 1</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">None</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$题目比较复杂，揉杂了很多考点，但只要把题目读懂，理清条件就还好。给出若干通电话记录，包括拨打者、接听者和通话时长，如果一个人给$&gt;K$个【不同】的人打了【短】通话（作为【拨打者】通话【总】时长≤ 5 min）电话，而且【这些人】中只有≤ 20%的人回拨，就认定这是一个电信诈骗嫌疑犯。另外如果两个嫌疑人之间【互通】电话，那么我们认为他们可能属于同一个团伙。最后输出所有嫌疑犯，一行一个团伙，按照升序输出。</p>\n<p>$\\qquad$需要注意的点都用【】标注出来了，可以看到只要有一个地方没理解透彻就翻车。注意到人数$N$不会超过1000，所以我打算用bitset来分别标记打出记录和接听记录：<code>bitset&lt;1000&gt; call(n),rec(n)</code>。由于需要记录短通话的次数，因此用一个二维数组存储单向拨打通话总时长。注意到call和rec的信息其实是等价的，因此我们用call来标记短通话。当两个人之间存在通话记录就在拨打者的call里进行标记，如果单向通话时长超过5min，就取消标记。rec只要有通话记录都标记。</p>\n<p>$\\qquad$那么$i$拨打短通话的不同人数就是<code>call[i]</code>中1的数量<code>call[i].count()</code>，而回拨的人数我们只考虑那些有接听$i$的短通话的人群，即<code>call[i][j]&amp;&amp;rec[i][j]</code>。最终我们将这部分人数$\\times 5$（需要保证整型不会溢出）再和<code>call[i].count()</code>进行比较，将嫌疑人存入<code>vector&lt;int&gt; sus</code>。最后再对sus进行DFS或BFS或并查集来求取连通分图，我这里用了DFS。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; edge;</span><br><span class=\"line\">vector&lt;<span class=\"type\">bool</span>&gt; flag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> n, vector&lt;<span class=\"type\">int</span>&gt; &amp;gang)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    flag[n] = <span class=\"literal\">true</span>, gang.<span class=\"built_in\">push_back</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: edge[n])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag[k]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(k, gang);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k, n, m, c, r, d, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; k &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    vector&lt;bitset&lt;1000&gt;&gt; <span class=\"built_in\">call</span>(n), <span class=\"built_in\">rec</span>(n);</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dur</span>(n, <span class=\"built_in\">vector</span>(n, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; c &gt;&gt; r &gt;&gt; d;</span><br><span class=\"line\">        call[c - <span class=\"number\">1</span>][r - <span class=\"number\">1</span>] = (dur[c - <span class=\"number\">1</span>][r - <span class=\"number\">1</span>] += d) &lt;= <span class=\"number\">5</span>;</span><br><span class=\"line\">        rec[r - <span class=\"number\">1</span>][c - <span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; sus, gang;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i, cnt = <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) cnt += (call[i][j] &amp;&amp; rec[i][j]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (call[i].<span class=\"built_in\">count</span>() &gt; k &amp;&amp; <span class=\"number\">5</span> * cnt &lt;= call[i].<span class=\"built_in\">count</span>())</span><br><span class=\"line\">            sus.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sus.<span class=\"built_in\">empty</span>()) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;None&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        edge.<span class=\"built_in\">resize</span>(sus.<span class=\"built_in\">size</span>()), flag.<span class=\"built_in\">resize</span>(sus.<span class=\"built_in\">size</span>(), <span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sus.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; sus.<span class=\"built_in\">size</span>(); ++j)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rec[sus[i]][sus[j]] &amp;&amp; rec[sus[j]][sus[i]])</span><br><span class=\"line\">                    edge[i].<span class=\"built_in\">push_back</span>(j), edge[j].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sus.<span class=\"built_in\">size</span>(); ++i, gang.<span class=\"built_in\">clear</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i, gang);</span><br><span class=\"line\">            <span class=\"built_in\">sort</span>(gang.<span class=\"built_in\">begin</span>(), gang.<span class=\"built_in\">end</span>(), [&amp;sus](<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123; <span class=\"keyword\">return</span> sus[a] &lt; sus[b]; &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; gang.<span class=\"built_in\">size</span>(); ++j)</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%s&quot;</span>, sus[gang[j]] + <span class=\"number\">1</span>, j == gang.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> ? <span class=\"string\">&quot;\\n&quot;</span> : <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Telefraud（电信诈骗） remains a common and persistent problem in our society. In some cases, unsuspecting victims lose their entire life savings. ...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"DFS","slug":"DFS","count":7,"path":"api/tags/DFS.json"},{"name":"bitset","slug":"bitset","count":4,"path":"api/tags/bitset.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"『1159』Structure of a Binary Tree","uid":"23a26d9dbfb7f35f39b098e97db54754","slug":"『1159』Structure-of-a-Binary-Tree","date":"2022-12-01T09:44:36.000Z","updated":"2022-12-01T10:03:33.611Z","comments":true,"path":"api/articles/『1159』Structure-of-a-Binary-Tree.json","keywords":null,"cover":null,"text":"Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, a binary tre...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"『1157』Anniversary","uid":"11dc3c2912f3e8bbbeebc80b6943eb66","slug":"『1157』Anniversary","date":"2022-11-29T14:27:33.000Z","updated":"2022-11-29T14:42:59.366Z","comments":true,"path":"api/articles/『1157』Anniversary.json","keywords":null,"cover":null,"text":"Zhejiang University is about to celebrate her 122th anniversary in 2019. To prepare for the celebration, the alumni association （校友会） has ga...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}