{"title":"7-44 基于词频的文件相似度","uid":"c1bb0c3958152b806f4d44bad6ebbf7f","slug":"7-44-基于词频的文件相似度","date":"2022-01-27T16:37:22.000Z","updated":"2022-11-26T06:48:52.082Z","comments":true,"path":"api/articles/7-44-基于词频的文件相似度.json","keywords":null,"cover":null,"content":"<p><a href=\"https://pintia.cn/problem-sets/15/problems/891\">➳ENTRY</a><br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>实现一种简单原始的文件相似度计算，即以两文件的公共词汇占总词汇的比例来定义相似度。为简化问题，这里不考虑中文（因为分词太难了），只考虑长度不小于3、且不超过10的英文单词，长度超过10的只考虑前10个字母。</p>\n<h2><span id=\"输入格式\">输入格式:</span></h2><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>输入首先给出正整数N（≤100），为文件总数。随后按以下格式给出每个文件的内容：首先给出文件正文，最后在一行中只给出一个字符#，表示文件结束。在N个文件内容结束之后，给出查询总数M（≤<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.25ex\" height=\"2.022ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -871.8 1436.6 893.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"/></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"/></g></g></g></g></svg></mjx-container>），随后M行，每行给出一对文件编号，其间以空格分隔。这里假设文件按给出的顺序从1到N编号。</p>\n<span id=\"more\"></span>\n\n<h2><span id=\"输出格式\">输出格式:</span></h2><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>针对每一条查询，在一行中输出两文件的相似度，即两文件的公共词汇量占两文件总词汇量的百分比，精确到小数点后1位。注意这里的一个“单词”只包括仅由英文字母组成的、长度不小于3、且不超过10的英文单词，长度超过10的只考虑前10个字母。单词间以任何非英文字母隔开。另外，大小写不同的同一单词被认为是相同的单词，例如“You”和“you”是同一个单词。</p>\n<h2><span id=\"输入样例\">输入样例:</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">Aaa Bbb Ccc</span><br><span class=\"line\">#</span><br><span class=\"line\">Bbb Ccc Ddd</span><br><span class=\"line\">#</span><br><span class=\"line\">Aaa2 ccc Eee</span><br><span class=\"line\">is at Ddd@Fff</span><br><span class=\"line\">#</span><br><span class=\"line\">2</span><br><span class=\"line\">1 2</span><br><span class=\"line\">1 3</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"输出样例\">输出样例:</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50.0%</span><br><span class=\"line\">33.3%</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"code~\">Code～</span></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, a, b;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    vector&lt;set&lt;string&gt;&gt; <span class=\"built_in\">files</span>(n, <span class=\"built_in\">set</span>&lt;string&gt;());</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        string s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((c = <span class=\"built_in\">getchar</span>()) != <span class=\"string\">'#'</span>)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">isalpha</span>(c))</span><br><span class=\"line\">                s += c;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s.<span class=\"built_in\">size</span>() &lt; <span class=\"number\">3</span>)</span><br><span class=\"line\">                {</span><br><span class=\"line\">                    s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">                    s = s.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">                <span class=\"built_in\">transform</span>(s.<span class=\"built_in\">begin</span>(), s.<span class=\"built_in\">end</span>(), s.<span class=\"built_in\">begin</span>(), ::tolower);</span><br><span class=\"line\">                files[i].<span class=\"built_in\">insert</span>(s);</span><br><span class=\"line\">                s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        set&lt;string&gt; inter;</span><br><span class=\"line\">        <span class=\"built_in\">set_intersection</span>(files[a - <span class=\"number\">1</span>].<span class=\"built_in\">begin</span>(), files[a - <span class=\"number\">1</span>].<span class=\"built_in\">end</span>(), files[b - <span class=\"number\">1</span>].<span class=\"built_in\">begin</span>(), files[b - <span class=\"number\">1</span>].<span class=\"built_in\">end</span>(),</span><br><span class=\"line\">                         <span class=\"built_in\">inserter</span>(inter, inter.<span class=\"built_in\">begin</span>()));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.1f%%\\n\"</span>, inter.<span class=\"built_in\">size</span>() * <span class=\"number\">100.0</span> / (files[a - <span class=\"number\">1</span>].<span class=\"built_in\">size</span>() + files[b - <span class=\"number\">1</span>].<span class=\"built_in\">size</span>() - inter.<span class=\"built_in\">size</span>()));</span><br><span class=\"line\">        inter.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"ω-一些说明\">Ω 一些说明：</span></h2><p>1.<strong>基本思想</strong>：一个文件中所有的有效单词用set进行存储，各个文件的set用一个vector进行存储。对于任意两个文件公共词汇个数的求取，是直接求两个文件set的交集(set_intersection,from &lt; algorithm &gt;)的个数。</p>\n<p>2.由于不分大小写，因此存入的单词统一转为相应的小写单词存入。这里采用的是transform(s.begin(), s.end(), s.begin(), ::tolower)方法，将tolower函数应用于s的每个字符。</p>\n<p>3.tolower函数之前有“::”是因为这个函数既有C版本的，又有STL模板的，二者存在冲突。这里用定界符强制指定为C版本的。</p>\n<p>4.<strong>set_intersect</strong>函数可以求取两个set的交集，另外还有<strong>set_union</strong>（取并集）、<strong>set_difference</strong>（取差集）、<strong>set_symmetric_difference</strong>（取对称差集）等函数。</p>\n","text":"➳ENTRY实现一种简单原始的文件相似度计算，即以两文件的公共词汇占总词汇的比例来定义相似度。为简化问题，这里不考虑中文（因为分词太难了），只考虑长度不小于3、且不超过10的英文单词，长度超过10的只考虑前10个字母。 输入格式:输入首先给出正整数N（≤100），为文件总数。随后...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"PTA-数据结构与算法题目集","slug":"PTA-数据结构与算法题目集","count":7,"path":"api/categories/PTA-数据结构与算法题目集.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">输入格式:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">输出格式:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">输入样例:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">输出样例:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Code～</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω 一些说明：</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"7-45 航空公司VIP客户查询","uid":"bd9129163f952044453adc76640f4d91","slug":"7-45-航空公司VIP客户查询","date":"2022-02-02T12:48:48.000Z","updated":"2022-02-10T13:12:16.778Z","comments":true,"path":"api/articles/7-45-航空公司VIP客户查询.json","keywords":null,"cover":[],"text":"➳ENTRY$\\qquad$不少航空公司都会提供优惠的会员服务，当某顾客飞行里程累积达到一定数量后，可以使用里程积分直接兑换奖励机票或奖励升舱等服务。现给定某航空公司全体会员的飞行记录，要求实现根据身份证号码快速查询会员里程积分的功能。 输入格式:$\\qquad$输入首先给出两个...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"PTA-数据结构与算法题目集","slug":"PTA-数据结构与算法题目集","count":7,"path":"api/categories/PTA-数据结构与算法题目集.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"README","uid":"4d044ba098bb35996b72630bc962fb79","slug":"README","date":"2022-01-27T08:50:38.000Z","updated":"2022-09-11T09:13:22.967Z","comments":true,"path":"api/articles/README.json","keywords":null,"cover":[],"text":" ✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦ Github仓库导航 ✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦✦ ","link":"","photos":[],"count_time":{"symbolsCount":68,"symbolsTime":"1 mins."},"categories":[{"name":"PTA-数据结构与算法题目集","slug":"PTA-数据结构与算法题目集","count":7,"path":"api/categories/PTA-数据结构与算法题目集.json"}],"tags":[],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}