{"title":"『1136」A Delayed Palindrome","uid":"53c2472eec1fb780c12dac8c28c45b29","slug":"『1136」A-Delayed-Palindrome","date":"2022-11-25T09:05:29.000Z","updated":"2022-11-25T09:36:24.245Z","comments":true,"path":"api/articles/『1136」A-Delayed-Palindrome.json","keywords":null,"cover":null,"content":"<p>Consider a positive integer N written in standard notation with k+1 digits ai​ as $a_k​⋯a_1​a_0​$ with $0≤a_i​&lt;10$ for all $i$ and $a_k​&gt;0$. Then N is <strong>palindromic</strong> if and only if $a_{i}​&#x3D;a_{k−i​}$ for all $i$. Zero is written 0 and is also palindromic by definition.</p>\n<p>Non-palindromic numbers can be paired with palindromic ones via a series of operations. First, the non-palindromic number is reversed and the result is added to the original number. If the result is not a palindromic number, this is repeated until it gives a palindromic number. Such number is called <strong>a delayed palindrome</strong>. (Quoted from <a href=\"https://en.wikipedia.org/wiki/Palindromic_number\">https://en.wikipedia.org/wiki/Palindromic_number</a> )</p>\n<p>Given any positive integer, you are supposed to find its paired palindromic number.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case which gives a positive integer no more than 1000 digits.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print line by line the process of finding the palindromic number. The format of each line is the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A + B = C</span><br></pre></td></tr></table></figure>\n\n<p>where <code>A</code> is the original number, <code>B</code> is the reversed <code>A</code>, and <code>C</code> is their sum. <code>A</code> starts being the input number, and this process ends until <code>C</code> becomes a palindromic number – in this case we print in the last line <code>C is a palindromic number.</code>; or if a palindromic number cannot be found in 10 iterations, print <code>Not found in 10 iterations.</code> instead.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">97152</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">97152 + 25179 = 122331</span><br><span class=\"line\">122331 + 133221 = 255552</span><br><span class=\"line\">255552 is a palindromic number.</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">196</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">196 + 691 = 887</span><br><span class=\"line\">887 + 788 = 1675</span><br><span class=\"line\">1675 + 5761 = 7436</span><br><span class=\"line\">7436 + 6347 = 13783</span><br><span class=\"line\">13783 + 38731 = 52514</span><br><span class=\"line\">52514 + 41525 = 94039</span><br><span class=\"line\">94039 + 93049 = 187088</span><br><span class=\"line\">187088 + 880781 = 1067869</span><br><span class=\"line\">1067869 + 9687601 = 10755470</span><br><span class=\"line\">10755470 + 07455701 = 18211171</span><br><span class=\"line\">Not found in 10 iterations.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$给定一个不超过1000位的数字，判断其是否为回文数，如果不是则将其与自身的逆序数相加，如果依旧不是回文数则重复迭代，迭代十次后依旧不是则输出“Not found in 10 iterations.”。</p>\n<p>$\\qquad$又是reverse函数大显身手的时候了。1000位的数显然不能用int，而且需要自己实现大数的加法运算，老样子，设置个进位，每位单独运算，然后将结果和其逆序比较，如果相等说明是回文数终止迭代，否则继续。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string s, t, r;</span><br><span class=\"line\">    cin &gt;&gt; s, t = s;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(t.<span class=\"built_in\">begin</span>(), t.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> c = <span class=\"number\">0</span>, d, i;</span><br><span class=\"line\">    <span class=\"comment\">// ATTENTION: c=0 !!!</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span> &amp;&amp; s != t; ++i, c = <span class=\"number\">0</span>, r.<span class=\"built_in\">clear</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = s.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; --j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            d = s[j] + t[j] - <span class=\"number\">2</span> * <span class=\"string\">&#x27;0&#x27;</span> + c;</span><br><span class=\"line\">            r.<span class=\"built_in\">push_back</span>(d % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>), c = d / <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c) r.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(r.<span class=\"built_in\">begin</span>(), r.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s + %s = %s\\n&quot;</span>, s.<span class=\"built_in\">c_str</span>(), t.<span class=\"built_in\">c_str</span>(), r.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">        s = t = r;</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(t.<span class=\"built_in\">begin</span>(), t.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">10</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Not found in 10 iterations.\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s is a palindromic number.\\n&quot;</span>, s.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Consider a positive integer N written in standard notation with k+1 digits ai​ as $a_k​⋯a_1​a_0​$ with $0≤a_i​&lt;10$ for all $i$ and $a_k​&...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"reverse","slug":"reverse","count":4,"path":"api/tags/reverse.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"『1137』Final Grading","uid":"b068c193355ec83faa12b088a84c2501","slug":"『1137』Final-Grading","date":"2022-11-25T09:13:34.000Z","updated":"2022-11-25T09:34:56.531Z","comments":true,"path":"api/articles/『1137』Final-Grading.json","keywords":null,"cover":null,"text":"For a student taking the online course “Data Structures” on China University MOOC (http://www.icourse163.org/), to be qualified for a certif...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"『1135』Is It A Red-Black Tree","uid":"23124d9c52676e982f8ad5a9c32feebd","slug":"『1135』Is-It-A-Red-Black-Tree","date":"2022-11-25T06:06:31.000Z","updated":"2022-11-25T09:37:40.389Z","comments":true,"path":"api/articles/『1135』Is-It-A-Red-Black-Tree.json","keywords":null,"cover":[],"text":"There is a kind of balanced binary search tree named red-black tree in the data structure. It has the following 5 properties: (1) Every node...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"},{"name":"DFS","slug":"DFS","count":7,"path":"api/tags/DFS.json"},{"name":"RBT","slug":"RBT","count":1,"path":"api/tags/RBT.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}