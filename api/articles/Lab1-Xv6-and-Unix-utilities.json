{"title":"Lab1: Xv6 and Unix utilities","uid":"1e574a5e3fca1a756fff12eb87b95cbe","slug":"Lab1-Xv6-and-Unix-utilities","date":"2022-09-13T10:32:31.000Z","updated":"2022-10-10T06:21:34.553Z","comments":true,"path":"api/articles/Lab1-Xv6-and-Unix-utilities.json","keywords":null,"cover":[],"content":"<p>$\\qquad$这学期开始学操作系统啦，一周五节课，是一位老教师，除了讲话慢了点还经常请同学们回答一些神奇问题外感觉还好，和上学期的寄网还是有差距的。暑假想预习来着的，不过经历了一些事情有点颓，现在回忆起来像是上个世纪的假期了。众所周知，大学&#x3D;大不了自学，所以打开了<a href=\"https://pdos.csail.mit.edu/6.828/2021/schedule.html\">MIT·S081</a>。</p>\n<p>$\\qquad$课程配套实验基于教授们自己写的一个类UNIX教学操作系统——<a href=\"https://pdos.csail.mit.edu/6.828/2021/xv6/book-riscv-rev2.pdf\">xv6</a>，通过xv6上的实验你能够对操作系统中的一些概念以及操作理解更深，精品良心，废话不多说，希望这学期能好好做实验（\\认真脸）。</p>\n<p>$\\qquad$第一个实验主要以熟悉xv6以及系统调用函数为主，实验文档<a href=\"https://pdos.csail.mit.edu/6.828/2021/labs/util.html\">戳这</a>。</p>\n<span id=\"more\"></span>\n\n<br>\n\n<h2><span id=\"安装xv6\">❖ 安装xv6</span></h2><hr>\n<p>$\\qquad$众所周知，环境两小时，实验5分钟。不过安装xv6似乎十分顺利并没有遭遇太多的不测，当然很大一部分原因是站在别人的血泪史上。如果你也是M1用户，可以参考<a href=\"https://cloud.tencent.com/developer/article/1939023\">MIT 6.S081&#x2F;Fall 2020 搭建risc-v与xv6开发调试环境</a>这篇博客。</p>\n<p>$\\qquad$前置环境主要是：</p>\n<ol>\n<li><p>gcc &#x2F; clang ：用来编译<a href=\"https://github.com/riscv-collab/riscv-gnu-toolchain\">riscv-gnu-toolchain</a> 工具链</p>\n</li>\n<li><p><a href=\"https://github.com/riscv-collab/riscv-gnu-toolchain\">riscv-gnu-toolchain</a> 工具链：用来编译调试xv6，需要下载源码进行编译</p>\n</li>\n<li><p>qemu：可以运行不同架构下操作系统的虚拟机，用C语言来模拟硬件的执行，由于xv6是运行在RISC-V架构上的，因此需要qemu来运行.</p>\n</li>\n</ol>\n<p>$\\qquad$上述环境配置完成后，即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git clone git://g.csail.mit.edu/xv6-labs-2021</span><br><span class=\"line\">&gt; cd xv6-labs-2021</span><br><span class=\"line\">&gt; git checkout util</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$最后通过<code>make qemu</code>来编译xv6并运行，接下来就可以在xv6的命令行中输入命令了。</p>\n<br>\n\n<h2><span id=\"coding\">❖ Coding</span></h2><hr>\n<h4><span id=\"︎-sleep-easy\">☑︎ sleep (easy)</span></h4><p>$\\qquad$第一个实验非常简单，实现用户指定时间的停顿，而xv6系统内置sleep函数，主要是熟悉码命令时的一些基本格式。首先每个命令都会传入两个参数：<code>int argc</code>&amp;<code>char *argv[]</code>，argc是传入参数的个数，而argv是所有传入参数的字符串形式数组。那么这个问题就非常的清晰明了了，只需要把用户传入的时间转为数字，然后调用sleep()即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> arg, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arg &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;usage: sleep n\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arg &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;ERROR: too much arguments!\\nusage: sleep n\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *s = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (*s &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; *s &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">        n = <span class=\"number\">10</span> * n + *s++ - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*s != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;ERROR: the second parameter must be a number!\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sleep(n);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$⚠️argv[0]是命令名称，真正的参数从argv[1]开始。另外不要忘记错误处理与错误提示。</p>\n<br>\n\n<h4><span id=\"︎-pingpong-easy\">☑︎ pingpong (easy)</span></h4><p>$\\qquad$先用fork函数创建子进程，然后使用pipe函数进行进程间通讯，最后通过getpid函数获取进程id并输出“PID：received …”。</p>\n<p>$\\qquad$首先通过fork返回值是否为0判断是子进程or父进程（父进程返回子进程id），fork完之后两者的资源都是一样的而且都从fork函数继续运行。那么我们先用pipe创建一个管道，用一个<code>int p[2]</code>来记录管道两端的文件描述符，<code>p[1]</code>写<code>p[2]</code>读。</p>\n<p>$\\qquad$那么先在父进程中write，然后子进程read完输出并write，父进程通过wait函数（等待第一个子进程结束，如果没有子进程直接继续）等待子进程结束再继续read并输出。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> arg, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p[<span class=\"number\">2</span>];</span><br><span class=\"line\">    pipe(p);</span><br><span class=\"line\">    <span class=\"type\">char</span> buff[<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fork() == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read(p[<span class=\"number\">0</span>], buff, <span class=\"number\">5</span>) != <span class=\"number\">5</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Read Parent ERROR!\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        close(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d: received %s\\n&quot;</span>, getpid(), buff);</span><br><span class=\"line\">        write(p[<span class=\"number\">1</span>], <span class=\"string\">&quot;pong&quot;</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        close(p[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        write(p[<span class=\"number\">1</span>], <span class=\"string\">&quot;ping&quot;</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        close(p[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        wait(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read(p[<span class=\"number\">0</span>], buff, <span class=\"number\">5</span>) != <span class=\"number\">5</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Read Child ERROR!\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d: received %s\\n&quot;</span>, getpid(), buff);</span><br><span class=\"line\">        close(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$read函数返回读取的字节数，达到文件末尾返回0，出错返回-1，write类似。</p>\n<p>$\\qquad$⚠️读写完及时close，不要忘记字符串末尾的’\\0’。</p>\n<p>$\\qquad$至于为什么父进程写的比子进程读的快，我想是因为子进程因为需要复制资源还需要耗费额外的时间，因此开始执行的时间会晚于父进程。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pingpong</span><br><span class=\"line\">4: received ping</span><br><span class=\"line\">3: received pong</span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4><span id=\"︎-primes-moderatex2fhard\">☑︎ primes (moderate&#x2F;hard)</span></h4><p>$\\qquad$不是一个命令，但有助于你理解pipe的工作流程。输入primes命令后输出2-35之间的素数。虽然个数有限而且很少可以直接枚举，但希望你利用pipe制作一个埃氏素数筛。大致的流程如下图所示：</p>\n<img src=\"/images/操作系统/0.gif\" title alt data-align=\"center\">\n\n<p>$\\qquad$它的思想很简单，首先用最小素数2筛去为其倍数的数字，然后再筛去为第二小素数3的倍数，依次类推。不难发现，如果该数组是以2开始的一串连续数字的话，那么每次筛完后的最小数字一定是素数，否则必然还存在比其小的素数未被筛选，这是矛盾的。因此我们只要每次输出最小数字然后筛去该数字的倍数即可。</p>\n<p>$\\qquad$很显然这里需要pipe实现传递的功能，那么我们可以每次先从上一个pipe中读出剩下的数组，然后创建一个新的pipe，将该轮筛选后剩余的数字写入新pipe中，接着fork一个新进程，有点类似函数递归调用，我下面用循环代替了递归。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> buff[<span class=\"number\">34</span>], p[<span class=\"number\">2</span>], size = <span class=\"number\">34</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">34</span>; ++i)</span><br><span class=\"line\">        buff[i] = i + <span class=\"number\">2</span>;</span><br><span class=\"line\">    pipe(p);</span><br><span class=\"line\">    write(p[<span class=\"number\">1</span>], buff, size * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    close(p[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fork() == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            read(p[<span class=\"number\">0</span>], buff, size * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">            close(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            pipe(p);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;prime %d\\n&quot;</span>, buff[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>, prime = buff[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buff[i] % prime != <span class=\"number\">0</span>)</span><br><span class=\"line\">                    buff[cnt++] = buff[i];</span><br><span class=\"line\">            size = cnt;</span><br><span class=\"line\">            write(p[<span class=\"number\">1</span>], buff, cnt * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">            close(p[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            wait(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$之所以父进程需要wait是因为如果不wait第一个进程在执行完后就直接exit(0)了，这样就会导致系统以为你执行完了事实上并没有的局面：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ primes</span><br><span class=\"line\">p$r ime 2</span><br><span class=\"line\">prime 3</span><br><span class=\"line\">prime 5</span><br><span class=\"line\">prime 7</span><br><span class=\"line\">prime 11</span><br><span class=\"line\">prime 13</span><br><span class=\"line\">prime 17</span><br><span class=\"line\">prime 19</span><br><span class=\"line\">prime 23</span><br><span class=\"line\">prime 29</span><br><span class=\"line\">prime 31</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$你会发现在输出第一条信息的过程中系统以为进程结束，于是输出【$ 】，其实只是第一个进程结束了，但它需要对创建的所有进程负责。</p>\n<p>$\\qquad$⚠️创建新管道前记得把老管道的端口close，否则就丢失了。</p>\n<h4><span id=\"︎-find-moderate\">☑︎ find (moderate)</span></h4><p>$\\qquad$实现一个简单的查找文件命令find，命令格式为【find rootfile filename】，共计两个参数，那么这里我们需要学会如何访问文件。</p>\n<p>$\\qquad$通过阅读user&#x2F;ls.c，不难得知每个路径都是一个文件，文件内记录该路径下的子文件信息，首先通过<code>open(char *path, int flag)</code>函数打开对应路径path的文件，返回相应的文件描述符，flag是读写标志。然后用<code>stat(int fd, struct stat *st)</code>将fd对应的文件夹&#x2F;文件的信息写入结构体st，其中<code>st.type</code>表示其（文件夹T_DIR&#x2F;文件T_FILE）类型。</p>\n<p>$\\qquad$这是一方面，但更重要的是获取路径下子文件的信息，例如文件名。fd对应的文件内部记录了所有子文件的信息，可以通过<code>read(fd, &amp;de, sizeof(de))</code>    来获取一个子文件信息，其中de是子文件信息结构体类型的一个实体。de包含inum和name，inum给不同文件夹和文件编号，name为文件名或文件夹名。</p>\n<p>$\\qquad$那么通过<code>stat(path+&#39;/&#39;+de.name, &amp;st)</code>就能获取子文件的相关信息，再由<code>st。tyoe</code>判断是否为文件夹进行递归搜索。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/fs.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">char</span> *path, <span class=\"type\">char</span> *name)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dirent</span> <span class=\"title\">de</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">st</span>;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">512</span>], *p;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((fd = open(path, <span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;find: cannot open %s\\n&quot;</span>, path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fstat(fd, &amp;st) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;find: cannot stat %s\\n&quot;</span>, path);</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (st.type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> T_FILE:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;find: %s is a file instead of a path.\\n&quot;</span>, path);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> T_DIR:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(path) + <span class=\"number\">1</span> + DIRSIZ + <span class=\"number\">1</span> &gt; <span class=\"keyword\">sizeof</span>(buf))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;find: path too long!\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(buf, path);</span><br><span class=\"line\">        p = buf + <span class=\"built_in\">strlen</span>(path);</span><br><span class=\"line\">        *p++ = <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (read(fd, &amp;de, <span class=\"keyword\">sizeof</span>(de)) == <span class=\"keyword\">sizeof</span>(de))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// dno&#x27;t forget inum==0!</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(de.name, <span class=\"string\">&quot;.&quot;</span>) || !<span class=\"built_in\">strcmp</span>(de.name, <span class=\"string\">&quot;..&quot;</span>) || de.inum == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            memmove(p, de.name, DIRSIZ);</span><br><span class=\"line\">            p[DIRSIZ] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stat(buf, &amp;st) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;find: cannot stat %s&quot;</span>, buf);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (st.type)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> T_DIR:</span><br><span class=\"line\">                search(buf, name);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> T_FILE:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"built_in\">strcmp</span>(de.name, name))</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, buf, path);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">// default:</span></span><br><span class=\"line\">            <span class=\"comment\">//    break;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;usage: find rootpath filename.\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    search(argv[<span class=\"number\">1</span>], argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$简单地说，de是子文件信息结构体，st是本身信息结构体。DIRSIZ是文件名固定长度，方便处理。<code>memmove( void* dest, const void* src, size_t count )</code>从src拷贝count个字节到dest，如果是字符串记得补0。buf来存储路径以及子目录的路径字符串。</p>\n<p>$\\qquad$⚠️子文件信息里面会包含当前目录【.】、上级目录【..】还有一个<code>inum==0 &amp;&amp; de.name==&quot;&quot;</code>的节点（大概查阅了一下，de.inum&#x3D;&#x3D;0表示这是一块已经初始化并且可以用来创建文件或者文件夹的位置），注意绕道避免无限递归，无限递归将导致栈溢出，运行时会出现<code>usertrap()</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    $ echo &gt; b</span><br><span class=\"line\">$ mkdir a</span><br><span class=\"line\">$ echo &gt; a/b</span><br><span class=\"line\">$ find . b</span><br><span class=\"line\">./b</span><br><span class=\"line\">./a/b</span><br><span class=\"line\">$ </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4><span id=\"︎-xargs-moderate\">☑︎ xargs (moderate)</span></h4><p>$\\qquad$xargs命令是一个可以扩展输入参数的命令，通过<code>cmd1 ｜ xargs cmd2</code>可以将cmd1命令的输出添加到cmd2的输入参数中，如果cmd1输出有多行则分别添加执行，效果与UNIX中的<code>xargs -n 1</code>等同：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &quot;1\\n2&quot; | xargs -n 1 echo line</span><br><span class=\"line\">line 1</span><br><span class=\"line\">line 2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo hello too | xargs echo bye</span><br><span class=\"line\">bye hello too</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$首先我们需要把xargs后面命令原本就跟着的参数拷贝过去，我这里是直接把字符串指针拷贝过去（相当于浅拷贝），并没有malloc一块新空间。</p>\n<p>$\\qquad$对于追加的参数，我们从标准输入（fd为0）读入。然后就一个一个字符地读，读到’\\n’或’ ‘就malloc一块新的空间将这个参数复制过来并将头指针存入<code>char *para[MAXARG]</code>，如果读到了’\\n’或者文件结尾就执行一次exec函数（⚠️exec函数不会返回调用函数，如果返回就说明执行失败<code>exit(1)</code>）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/param.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLEN 512</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;usage: xargs command.\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> buf[MAXLEN], *para[MAXARG];</span><br><span class=\"line\">    <span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// shallow copy xisting parameters</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; argc; ++i)</span><br><span class=\"line\">        para[i - <span class=\"number\">1</span>] = argv[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// flag==0 means EOF</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (flag)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = argc - <span class=\"number\">1</span>, len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// read a line from standard input</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((flag = read(<span class=\"number\">0</span>, buf + len, <span class=\"number\">1</span>)))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (buf[len] == <span class=\"string\">&#x27;\\n&#x27;</span> || buf[len] == <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (len)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    para[cnt] = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(len + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    memmove(para[cnt], buf, len);</span><br><span class=\"line\">                    para[cnt][len] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    len = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (++cnt &gt; MAXARG)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;xargs: too many arguments!\\n&quot;</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buf[len] == <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len + <span class=\"number\">1</span> &gt; MAXLEN)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;xargs: argument too long!\\n&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                ++len;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!fork())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            exec(para[<span class=\"number\">0</span>], para);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            wait(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$⚠️命令参数个数有限制（MAXARG），另外需要关注一个参数长度不能超过自己定义的buf（MAXLEN）。</p>\n<br>\n\n<h2><span id=\"grading-amp-debug\">❖ Grading &amp; Debug</span></h2><hr>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd xv6-labs-2021</span><br><span class=\"line\">./grade-lab-util command_name</span><br><span class=\"line\"></span><br><span class=\"line\">e.g.</span><br><span class=\"line\">&gt; ./grade-lab-util sleep   </span><br><span class=\"line\">make: `kernel/kernel&#x27; is up to date.</span><br><span class=\"line\">== Test sleep, no arguments == sleep, no arguments: OK (1.3s) </span><br><span class=\"line\">== Test sleep, returns == sleep, returns: OK (0.9s) </span><br><span class=\"line\">== Test sleep, makes syscall == sleep, makes syscall: OK (1.0s) </span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$所有Test都显示OK即可。</p>\n<br>\n\n<p>$\\qquad$Debug需要用gdb进行远程调试，首先在一个命令框中（在xv6-labs-2021目录下）<code>make qemu-gdb</code>，然后新建一个命令框窗口（还是在xv6-labs-2021目录下）<code>riscv64-unknown-elf-gdb user/_xargs</code>（【_】+命令名称 ）。如果连接失败在gdb界面输入<code>target remote localhost:25501</code>（端口号见qemu界面最后一行tcp::xxxxx）。不希望每次输入可以写入~&#x2F;.gdbinit。b设置断点，c运行至断点，n单步执行，p arg查看arg值。</p>\n<img title src=\"/images/操作系统/1.png\" alt data-align=\"center\" width=\"631\">\n","text":"$\\qquad$这学期开始学操作系统啦，一周五节课，是一位老教师，除了讲话慢了点还经常请同学们回答一些神奇问题外感觉还好，和上学期的寄网还是有差距的。暑假想预习来着的，不过经历了一些事情有点颓，现在回忆起来像是上个世纪的假期了。众所周知，大学&#x3D;大不了自学，所以打开了MI...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/categories/操作系统.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"xv6","slug":"xv6","count":3,"path":"api/tags/xv6.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">❖ 安装xv6</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">❖ Coding</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">☑︎ sleep (easy)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">☑︎ pingpong (easy)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">☑︎ primes (moderate&#x2F;hard)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">☑︎ find (moderate)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">☑︎ xargs (moderate)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">❖ Grading &amp; Debug</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1062」Talent and Virtue","uid":"61bd7651739e9a5cb7671d4227eb7db6","slug":"「1062」Talent-and-Virtue","date":"2022-09-21T03:12:33.000Z","updated":"2022-12-03T03:13:14.449Z","comments":true,"path":"api/articles/「1062」Talent-and-Virtue.json","keywords":null,"cover":null,"text":"About 900 years ago, a Chinese philosopher Sima Guang wrote a history book in which he talked about people’s talent and virtue. According to...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1060」Are They Equal","uid":"0eaf91694ac904eb1b9bccba53543259","slug":"「1060」Are-They-Equal","date":"2022-09-11T08:00:39.000Z","updated":"2022-09-11T08:34:10.241Z","comments":true,"path":"api/articles/「1060」Are-They-Equal.json","keywords":null,"cover":null,"text":"If a machine can save only 3 significant digits, the float numbers 12300 and 12358.9 are considered equal since they are both saved as $0.12...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}