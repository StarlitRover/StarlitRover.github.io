{"title":"Lab2: system calls","uid":"1b4d009413a4a1733c93e882f288fd9a","slug":"Lab2-system-calls","date":"2022-09-25T03:57:05.000Z","updated":"2022-09-25T07:49:21.000Z","comments":true,"path":"api/articles/Lab2-system-calls.json","keywords":null,"cover":[],"content":"<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>上周打了一场数模国赛，打前元气超人，打完葛优躺平。Lab2只有两个小实验，聚焦于如何创建系统调用命令，也并不是那么简单，实验文档<a href=\"https://pdos.csail.mit.edu/6.828/2021/labs/syscall.html\">戳这</a>。</p>\n<img src=\"/images/操作系统/2.png\" title alt data-align=\"center\">\n\n<span id=\"more\"></span>\n\n<br>\n\n<h2><span id=\"coding\">❖ Coding</span></h2><hr>\n<h4><span id=\"︎-system-call-tracing-moderate\">☑︎ System call tracing (moderate)</span></h4><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>我们需要创建一个trace系统调用来追踪一个命令中指定的系统调用，并打印出相应的返回值。</p>\n<pre class=\"line-numbers language-xv6\" data-language=\"xv6\"><code class=\"language-xv6\">$ trace 2147483647 grep hello README\n4: syscall trace -&gt; 0\n4: syscall exec -&gt; 3\n4: syscall open -&gt; 3\n4: syscall read -&gt; 1023\n4: syscall read -&gt; 966\n4: syscall read -&gt; 70\n4: syscall read -&gt; 0\n4: syscall close -&gt; 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>指令格式：<code>trace mask cmd</code>。mask用来指定需要追踪的系统调用，在操作系统中每个系统调用都会有自己唯一的编号SYS_syscall（在kernel/syscall.h中的宏定义），比如说fork的编号就是SYS_fork，如果<code>mask&amp;(1&lt;&lt;SYS_syscall)!=0</code>就说明需要追踪该syscall，需要打印出其返回值，本质上如果假设<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.462ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 3298 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(878,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1407,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1876,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2397,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2675,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3020,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"/></g></g></g></svg></mjx-container>代表其二进制低<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.781ex\" height=\"1.52ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -661 345 672\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></svg></mjx-container>位数字的话，那么<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.61ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 5131.6 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(878,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1407,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1876,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2397,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2675,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3020,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3575.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(4631.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></svg></mjx-container>就代表需要追踪SYS_syscall=<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.781ex\" height=\"1.52ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -661 345 672\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></svg></mjx-container>的系统调用。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>那么我们就需要在进程结构体proc中加入<code>int mask</code>，注意到一个进程中执行不同系统调用是通过fork来实现的，本质上又创建了一个proc实体，因此在fork的实现（kernel/proc.c）中我们需要实现mask的传递：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">    np<span class=\"token operator\">-&gt;</span>mask <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>mask<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>那么接下来就可以打印信息<code>pid: syscall name -&gt; return_value</code>。我们可以在每个系统调用都必经的函数syscall（kernel/syscall.c）里面实现，首先观察syscall函数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  num <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>trapframe<span class=\"token operator\">-&gt;</span>a7<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">&lt;</span> <span class=\"token function\">NELEM</span><span class=\"token punctuation\">(</span>syscalls<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> syscalls<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    p<span class=\"token operator\">-&gt;</span>trapframe<span class=\"token operator\">-&gt;</span>a0 <span class=\"token operator\">=</span> syscalls<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %s: unknown sys call %d\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>pid<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>name<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-&gt;</span>trapframe<span class=\"token operator\">-&gt;</span>a0 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>可以看出p里面存储了我们需要的pid，但p-&gt;name并不是我们想要的系统调用名称，注意到fork实现中（kernel/proc.c：304）是直接拷贝原proc的name，即name里存储的其实是进程名：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">safestrcpy</span><span class=\"token punctuation\">(</span>np<span class=\"token operator\">-&gt;</span>name<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>name<span class=\"token punctuation\">)</span>）<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>这里需要注意进程与线程之间的差别。虽然fork完后也是一个proc结构体，但事实上只是p-&gt;name进程下的一个线程而已。进程是对运行程序的封装，是系统进行<strong>资源调度和分配</strong>的基本单位，各进程之间相互隔离不共享数据，实现了操作系统的并发性；而线程则是一个进程中的子任务，是<strong>CPU调度</strong>的最小单位，一个进程中的所有线程共享该进程的数据资源。那么每个命令就是一个进程，里面会执行多个系统调用，每个系统调用都是一个线程。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>虽然p里面没有线程名称的直接信息，但肯定有其他相关信息。注意到</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">p<span class=\"token operator\">-&gt;</span>trapframe<span class=\"token operator\">-&gt;</span>a0 <span class=\"token operator\">=</span> syscalls<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里调用了<code>syscalls[num]</code>，然后将返回值传递给了a0寄存器（RISC-V的C规范是把返回值放在a0中）。syscalls是一个无符号整型指针数组，即函数指针。那么可以肯定这个num将是一个重要的突破口，我们只要按照syscalls中系统调用的顺序定义一个字符串数组sysname，<code>sysname[num]</code>就是系统调用的名称了。同时<code>p-&gt;trapframe-&gt;a0</code>就是函数返回值。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">107</span> <span class=\"token operator\">+</span> │ <span class=\"token keyword\">extern</span> uint64 <span class=\"token function\">sys_trace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">132</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_trace<span class=\"token punctuation\">]</span>   sys_trace<span class=\"token punctuation\">,</span> <span class=\"token comment\">//static uint64 (*syscalls[])(void)</span>\n\n<span class=\"token number\">136</span> <span class=\"token operator\">+</span> │ <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sysname<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token number\">137</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_fork<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"fork\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">138</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_exit<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">139</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_wait<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"wait\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">140</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_pipe<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"pipe\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">141</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_read<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">142</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_kill<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"kill\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">143</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_exec<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">144</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_fstat<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"stat\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">145</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_chdir<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"chdir\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">146</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_dup<span class=\"token punctuation\">]</span>     <span class=\"token string\">\"dup\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">147</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_getpid<span class=\"token punctuation\">]</span>  <span class=\"token string\">\"getpid\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">148</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_sbrk<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"sbrk\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">149</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_sleep<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"sleep\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">150</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_uptime<span class=\"token punctuation\">]</span>  <span class=\"token string\">\"uptime\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">151</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_open<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">152</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_write<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">153</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_mknod<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"mknod\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">154</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_unlink<span class=\"token punctuation\">]</span>  <span class=\"token string\">\"unlink\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">155</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_link<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">156</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_mkdir<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"mkdir\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">157</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_close<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">158</span> <span class=\"token operator\">+</span> │ <span class=\"token punctuation\">[</span>SYS_trace<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"trace\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">159</span>   │ <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">160</span>   │ \n<span class=\"token number\">161</span>   │ <span class=\"token keyword\">void</span>\n<span class=\"token number\">162</span>   │ <span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">163</span>   │ <span class=\"token punctuation\">{</span>\n<span class=\"token number\">164</span>   │   <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token number\">165</span>   │   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">166</span>   │ \n<span class=\"token number\">167</span>   │   num <span class=\"token operator\">=</span> p<span class=\"token operator\">-&gt;</span>trapframe<span class=\"token operator\">-&gt;</span>a7<span class=\"token punctuation\">;</span>\n<span class=\"token number\">168</span>   │   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">&lt;</span> <span class=\"token function\">NELEM</span><span class=\"token punctuation\">(</span>syscalls<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> syscalls<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token number\">169</span>   │     p<span class=\"token operator\">-&gt;</span>trapframe<span class=\"token operator\">-&gt;</span>a0 <span class=\"token operator\">=</span> syscalls<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">170</span> <span class=\"token operator\">+</span> │     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>num <span class=\"token operator\">&amp;</span> p<span class=\"token operator\">-&gt;</span>mask<span class=\"token punctuation\">)</span>\n<span class=\"token number\">171</span> <span class=\"token operator\">+</span> │         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d: syscall %s -&gt; %d\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>pid<span class=\"token punctuation\">,</span>sysname<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-&gt;</span>trapframe<span class=\"token operator\">-&gt;</span>a0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">172</span>   │   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token number\">173</span>   │     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %s: unknown sys call %d\\n\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">174</span>   │             p<span class=\"token operator\">-&gt;</span>pid<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-&gt;</span>name<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">175</span>   │     p<span class=\"token operator\">-&gt;</span>trapframe<span class=\"token operator\">-&gt;</span>a0 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">176</span>   │   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">177</span>   │ <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>o对，我们甚至还没实现trace函数💦。你可能会觉得上面的做法已经间接实现了trace，但事实上trace是在用户模式（user mode）调用的，因此传入的参数还在用户空间，而系统调用都是在内核空间内执行的，为了操作系统不受进程影响两者是分隔的。</p>\n<img title src=\"/images/操作系统/3.png\" alt data-align=\"center\" width=\"420\">\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>用户态的trace函数已经帮我们实现：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"kernel/param.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"kernel/types.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"kernel/stat.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"user/user.h\"</span></span>\n\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nargv<span class=\"token punctuation\">[</span>MAXARG<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">||</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Usage: %s mask command\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s: trace failed\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> MAXARG<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    nargv<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>nargv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nargv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>不难看出关键函数是<code>int trace(int)</code>，那我们需要先在user/user.h中声明该系统调用，同时在user/usys.pl（生成汇编文件user/usys.S）中加入<code>entry(\"trace\")</code>使trace函数可以进入内核模式，并在<code>kernel/syscall.h</code>中添加一个系统调用号，整个系统调用过程如下所示<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.877ex\" height=\"2.021ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -893.3 829.7 893.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"/><g data-mml-node=\"TeXAtom\" transform=\"translate(33,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(278,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(778,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"/></g></g></g></g></g></svg></mjx-container>：</p>\n<ol>\n<li><p>user/user.h：用户态程序调用跳板函数 trace()</p>\n</li>\n<li><p>user/usys.S：跳板函数 trace 使用 CPU 提供的 ecall 指令，进入内核模式</p>\n</li>\n<li><p>kernel/syscall.c：到达内核模式统一执行系统调用处理函数syscall，所有系统调用都会跳到这里来处理</p>\n</li>\n<li><p>kernel/syscall.c：syscall根据跳板传进来的系统调用编号，查询 syscalls[] 表，找到对应的内核函数并调用</p>\n</li>\n<li><p>kernel/sysproc.c：到达 sys_trace 函数，执行具体内核操作</p>\n</li>\n</ol>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>接下来只需在kernel/sysproc.c中实现sys_trace，该函数只要把用户空间的mask拿进来就行，cmd在执行时事实上可以认为是trace的多个子线程，因此mask会一直传递下去。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">uint64\n<span class=\"token function\">sys_trace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">int</span> mask<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">argint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mask<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>mask<span class=\"token operator\">=</span>mask<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<br>\n\n<h4><span id=\"︎-sysinfo-moderate\">☑︎ Sysinfo (moderate)</span></h4><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>实现一个系统调用sysinfo，它接受一个指向struct sysinfo的指针，然后向这个结构体写入剩余空间的字节数和状态非”UNUSED”的进程数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">───────┬─────────────────────────────────────────────────────────\n       │ File<span class=\"token operator\">:</span> kernel<span class=\"token operator\">/</span>sysinfo<span class=\"token punctuation\">.</span>h\n───────┼─────────────────────────────────────────────────────────\n   <span class=\"token number\">1</span>   │ <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sysinfo</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token number\">2</span>   │   uint64 freemem<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// amount of free memory (bytes)</span>\n   <span class=\"token number\">3</span>   │   uint64 nproc<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// number of process</span>\n   <span class=\"token number\">4</span>   │ <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n───────┴─────────────────────────────────────────────────────────<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>首先我们需要实现统计剩余空间字节数和已使用进程数的函数。关于空间分配的实现在kernel/kalloc.c，注意到kmem中有一项freelist链表，然后看kfree函数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">46</span>   │ <span class=\"token keyword\">void</span>\n<span class=\"token number\">47</span>   │ <span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">)</span>\n<span class=\"token number\">48</span>   │ <span class=\"token punctuation\">{</span>\n<span class=\"token number\">49</span>   │   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">run</span> <span class=\"token operator\">*</span>r<span class=\"token punctuation\">;</span>\n<span class=\"token number\">50</span>   │ \n<span class=\"token number\">51</span>   │   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint64<span class=\"token punctuation\">)</span>pa <span class=\"token operator\">%</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pa <span class=\"token operator\">&lt;</span> end <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>uint64<span class=\"token punctuation\">)</span>pa <span class=\"token operator\">&gt;=</span> PHYSTOP<span class=\"token punctuation\">)</span>\n<span class=\"token number\">52</span>   │     <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kfree\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">53</span>   │ \n<span class=\"token number\">54</span>   │   <span class=\"token comment\">// Fill with junk to catch dangling refs.</span>\n<span class=\"token number\">55</span>   │   <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">56</span>   │ \n<span class=\"token number\">57</span>   │   r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">run</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pa<span class=\"token punctuation\">;</span>\n<span class=\"token number\">58</span>   │ \n<span class=\"token number\">59</span>   │   <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>kmem<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">60</span>   │   r<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> kmem<span class=\"token punctuation\">.</span>freelist<span class=\"token punctuation\">;</span>\n<span class=\"token number\">61</span>   │   kmem<span class=\"token punctuation\">.</span>freelist <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token number\">62</span>   │   <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>kmem<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">63</span>   │ <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>kfree函数将pa地址开始PGSIZE大小的空间都初始化为1，然后将pa挂到freelist的头上，再将freelist指向pa，而kalloc函数则是每次都使用freelist的第一块PGSIZE空间。说明freelist是可用空间的链表，而且每次分配的最小单元是PGSIZE字节，那么我们只要数一下freelist的元素个数然后乘个PGSIZE即可。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">uint64\n<span class=\"token function\">count_freemem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>kmem<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">run</span> <span class=\"token operator\">*</span>r <span class=\"token operator\">=</span> kmem<span class=\"token punctuation\">.</span>freelist<span class=\"token punctuation\">;</span>\n  uint64 cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n    r <span class=\"token operator\">=</span> r<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>kmem<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> cnt <span class=\"token operator\">*</span> PGSIZE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>为防止竞态条件产生，在统计时需要先给kmem上锁。</p>\n<br>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>对于统计状态为非”UNUSED”的进程数也不难，注意到kernel/proc.c中</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">11</span>   │ <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>可知最大进程数即为NPROC，那么我们只要遍历proc，然后依次检查状态即可。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">uint64\n<span class=\"token function\">count_process</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  uint64 cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NPROC<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">!=</span> UNUSED<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>最后我们只要将这个sysinfo结构体拷贝至用户空间即可。首先通过argaddr函数获取用户态<code>int sysinfo(struct sysinfo *)</code>传入的sysinfo虚地址，然后结合该进程的页表pagetable可以得到该地址对应的物理地址，最后将内核中的sysinfo结构体拷贝过去。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">uint64\n<span class=\"token function\">sys_sysinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sysinfo</span> sf<span class=\"token punctuation\">;</span>\n  uint64 addr<span class=\"token punctuation\">;</span>\n  sf<span class=\"token punctuation\">.</span>freemem <span class=\"token operator\">=</span> <span class=\"token function\">count_freemem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sf<span class=\"token punctuation\">.</span>nproc <span class=\"token operator\">=</span> <span class=\"token function\">count_process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">argaddr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">copyout</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>pagetable<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>argaddr第一个参数0是指从a0寄存器获取，我特地回去翻了一下计组PPT</p>\n<img title src=\"/images/操作系统/4.png\" alt data-align=\"center\" width=\"650\">\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>果然，a0、a1存储函数参数，as I guess。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>其余声明之类的与上面的trace类似。另外别忘了在kernel/sysproc.c中加入</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">9</span> <span class=\"token operator\">+</span> │ #include <span class=\"token string\">\"kernel/sysinfo.h\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>如果一切正常，在xv6启动后输入sysinfotest会输出OK。</p>\n<pre class=\"line-numbers language-xv6\" data-language=\"xv6\"><code class=\"language-xv6\">$ sysinfotest\nsysinfotest: start\nsysinfotest: OK<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<br>\n\n<h2><span id=\"reference\">❖ Reference</span></h2><hr>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container><strong>[1]</strong><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.262ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 1000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container><a href=\"https://zhuanlan.zhihu.com/p/332243456\">MIT 6.S081 2020 Lab2 system calls讲解</a></p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container><strong>[2]</strong><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.262ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 1000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container><a href=\"https://blog.miigon.net/posts/s081-lab2-system-calls/\">[mit6.s081] 笔记 Lab2: System calls | 系统调用</a></p>\n","text":"上周打了一场数模国赛，打前元气超人，打完葛优躺平。Lab2只有两个小实验，聚焦于如何创建系统调用命令，也并不是那么简单，实验文档戳这。 ❖ Coding ☑︎ System call tracing (moderate)我们需要创建一个trace系统调用来追踪一个命令中指定的系统调...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/categories/操作系统.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"xv6","slug":"xv6","count":3,"path":"api/tags/xv6.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">❖ Coding</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">☑︎ System call tracing (moderate)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">☑︎ Sysinfo (moderate)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">❖ Reference</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1067」Sort with Swap(0, i)","uid":"f66bf5b8d2fc86417cb09b027c83ec14","slug":"「1067」Sort-with-Swap-0-i","date":"2022-09-25T09:25:33.000Z","updated":"2022-09-25T10:12:35.000Z","comments":true,"path":"api/articles/「1067」Sort-with-Swap-0-i.json","keywords":null,"cover":null,"text":"Given any permutation of the numbers {0, 1, 2,…, N−1}, it is easy to sort them in increasing order. But what if Swap(0, *) is the ONLY opera...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1066」Root of AVL Tree","uid":"42640cc884e7d3b61d24e0f58f7990cd","slug":"「1066」Root-of-AVL-Tree","date":"2022-09-24T16:14:37.000Z","updated":"2023-09-01T07:28:43.611Z","comments":true,"path":"api/articles/「1066」Root-of-AVL-Tree.json","keywords":null,"cover":[],"text":"An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one;...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"},{"name":"AVL","slug":"AVL","count":2,"path":"api/tags/AVL.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}