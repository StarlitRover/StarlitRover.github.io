{"title":"「1109」Group Photo","uid":"e5acc25f52a3eda31fca71a61f248459","slug":"「1109」Group-Photo","date":"2022-11-13T11:56:09.000Z","updated":"2022-11-13T14:46:48.744Z","comments":true,"path":"api/articles/「1109」Group-Photo.json","keywords":null,"cover":null,"content":"<p>Formation is very important when taking a group photo. Given the rules of forming K rows with N people as the following:</p>\n<ul>\n<li><p>The number of people in each row must be N&#x2F;K (round down to the nearest integer), with all the extra people (if any) standing in the last row;</p>\n</li>\n<li><p>All the people in the rear row must be no shorter than anyone standing in the front rows;</p>\n</li>\n<li><p>In each row, the tallest one stands at the central position (which is defined to be the position $(m&#x2F;2+1)$, where m is the total number of people in that row, and the division result must be rounded down to the nearest integer);</p>\n</li>\n<li><p>In each row, other people must enter the row in non-increasing order of their heights, alternately taking their positions first to the right and then to the left of the tallest one (For example, given five people with their heights 190, 188, 186, 175, and 170, the final formation would be 175, 188, 190, 186, and 170. Here we assume that you are facing the group so your left-hand side is the right-hand side of the one at the central position.);</p>\n</li>\n<li><p>When there are many people having the same height, they must be ordered in alphabetical (increasing) order of their names, and it is guaranteed that there is no duplication of names.</p>\n</li>\n</ul>\n<p>Now given the information of a group of people, you are supposed to write a program to output their formation.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each test case, the first line contains two positive integers $N (≤10^4)$, the total number of people, and K (≤10), the total number of rows. Then N lines follow, each gives the name of a person (no more than 8 English letters without space) and his&#x2F;her height (an integer in [30, 300]).</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each case, print the formation – that is, print the names of people in K lines. The names must be separated by exactly one space, but there must be no extra space at the end of each line. Note: since you are facing the group, people in the rear rows must be printed above the people in the front rows.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 3</span><br><span class=\"line\">Tom 188</span><br><span class=\"line\">Mike 170</span><br><span class=\"line\">Eva 168</span><br><span class=\"line\">Tim 160</span><br><span class=\"line\">Joe 190</span><br><span class=\"line\">Ann 168</span><br><span class=\"line\">Bob 175</span><br><span class=\"line\">Nick 186</span><br><span class=\"line\">Amy 160</span><br><span class=\"line\">John 159</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bob Tom Joe Nick</span><br><span class=\"line\">Ann Mike Eva</span><br><span class=\"line\">Tim Amy John</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$首先我想问，这测试样例怎么每行个数与行数相同啊。当我春光满面地submit时结果三个WA，我人傻了直呼impossible，结果后来发现k是行数，原地爆炸。</p>\n<p>$\\qquad$题不难，就是排一个拍照队列，规则是：</p>\n<ol>\n<li><p>行间规则：高的人站后排，矮的在前</p>\n</li>\n<li><p>行内规则：一排内最高的站C位，即（$r&#x2F;2+1$）个位置，然后按照身高降序排列分别在最高者的右左轮流排列。</p>\n</li>\n<li><p>身高一样者按照名字字母序升序排列</p>\n</li>\n</ol>\n<p>$\\qquad$读入姓名和身高后按照规则降序排序，然后从最后一排开始，从最高者开始，设置一个bias&#x3D;0变量，<code>bias = i % 2 ? -bias : -bias - 1</code>，从而实现最高者左右的轮流分配。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>, string&gt; pis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;pis&gt; <span class=\"title\">info</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t: info)</span><br><span class=\"line\">        cin &gt;&gt; t.second &gt;&gt; t.first;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(info.<span class=\"built_in\">begin</span>(), info.<span class=\"built_in\">end</span>(),</span><br><span class=\"line\">         [](pis &amp;a, pis &amp;b) &#123; <span class=\"keyword\">return</span> a.first == b.first ? a.second &lt; b.second : a.first &gt; b.first; &#125;);</span><br><span class=\"line\">    vector&lt;string&gt; row;</span><br><span class=\"line\">    <span class=\"type\">int</span> r = n / k, u = r + n % r, head = <span class=\"number\">0</span>, bias = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head &lt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        row.<span class=\"built_in\">resize</span>(u);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; u; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            row[u / <span class=\"number\">2</span> + bias] = info[head + i].second;</span><br><span class=\"line\">            bias = i % <span class=\"number\">2</span> ? -bias : -bias - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; row[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; u; ++j)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; row[j];</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">        head += u, u = r, bias = <span class=\"number\">0</span>, row.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Formation is very important when taking a group photo. Given the rules of forming K rows with N people as the following: The number of peopl...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1110」Complete Binary Tree","uid":"1c866b059d574be929326143e875b3a0","slug":"「1110」Complete-Binary-Tree","date":"2022-11-13T15:44:16.000Z","updated":"2022-11-13T15:56:18.084Z","comments":true,"path":"api/articles/「1110」Complete-Binary-Tree.json","keywords":null,"cover":null,"text":"Given a tree, you are supposed to tell if it is a complete binary tree. Input Specification:Each input file contains one test case. For each...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"},{"name":"DFS","slug":"DFS","count":7,"path":"api/tags/DFS.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1108」Finding Average","uid":"80283fa8bfdc49e4840f7226c64452a7","slug":"「1108」Finding-Average","date":"2022-11-12T13:58:13.000Z","updated":"2022-11-12T14:27:03.053Z","comments":true,"path":"api/articles/「1108」Finding-Average.json","keywords":null,"cover":null,"text":"The basic task is simple: given N real numbers, you are supposed to calculate their average. But what makes it complicated is that some of t...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}