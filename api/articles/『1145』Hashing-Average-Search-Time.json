{"title":"『1145』Hashing - Average Search Time","uid":"83b3a4468e6241cb8f0d55c9d71c268b","slug":"『1145』Hashing-Average-Search-Time","date":"2022-11-27T14:35:53.000Z","updated":"2022-11-27T15:15:39.638Z","comments":true,"path":"api/articles/『1145』Hashing-Average-Search-Time.json","keywords":null,"cover":null,"content":"<p>The task of this problem is simple: insert a sequence of distinct positive integers into a hash table first. Then try to find another sequence of integer keys from the table and output the average search time (the number of comparisons made to find whether or not the key is in the table). The hash function is defined to be $H(key)&#x3D;key\\%TSize$ where TSize is the maximum size of the hash table. Quadratic probing (with positive increments only) is used to solve the collisions.</p>\n<p>Note that the table size is better to be prime. If the maximum size given by the user is not prime, you must re-define the table size to be the smallest prime number which is larger than the size given by the user.</p>\n<span id=\"more\"></span>\n\n<!--more-->\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains 3 positive numbers: MSize, N, and M, which are the user-defined table size, the number of input numbers, and the number of keys to be found, respectively. All the three numbers are no more than $10^4$. Then N distinct positive integers are given in the next line, followed by M positive integer keys in the next line. All the numbers in a line are separated by a space and are no more than $10^5$.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, in case it is impossible to insert some number, print in a line <code>X cannot be inserted.</code> where <code>X</code> is the input number. Finally print in a line the average search time for all the M keys, accurate up to 1 decimal place.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 5 4</span><br><span class=\"line\">10 6 4 15 11</span><br><span class=\"line\">11 4 15 2</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15 cannot be inserted.</span><br><span class=\"line\">2.8</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$救命，哈希题好难啊。给出表大小$MSize$（如果不为素数需要找到$&gt;MSize$的最小素数$TSize$），$N$个待插入的数，$M$个需要查询的数。对不能插入的数进行输出，最后输出平均搜索时间。</p>\n<p>$\\qquad$如果插入时存在冲突采取二次探测法，详见上一道hash题<a href=\"/post/%E3%80%8C1078%E3%80%8DHashing.html\" title=\"「1078」Hashing\">「1078」Hashing</a>。对于无法插入的键值最多只需$TSize$次，关键是平均搜索时间的计算。</p>\n<p>$\\qquad$每一次键值的比较都算是一个单位的搜索时间，但问题是不存在键值的搜索时间是否是一个固定时间，答案是否定的。因为不存在的键值有两种情况：1. 未曾尝试插入过，2. 尝试插入过但失败了。对于case 2，你需要$TSize+1$次搜索（最后一次发现回到起点也算，虽然我觉的没什么必要）；而对于case 1，在你采取二次探测法查找键值时如果发现某个位置为空，就说明它之前没有插入过，应该直接停止搜索。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">sqrt</span>(n); i += (i == <span class=\"number\">2</span> ? <span class=\"number\">1</span> : <span class=\"number\">2</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t, n, m, k, bias = <span class=\"number\">-1</span>, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; t &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isPrime</span>(t)) ++t;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">hash</span><span class=\"params\">(t, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i, bias = <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (++bias &lt; t &amp;&amp; hash[(k + bias * bias) % t]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bias == t) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d cannot be inserted.\\n&quot;</span>, k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> hash[(k + bias * bias) % t] = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i, bias = <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (++cnt, ++bias &lt; t &amp;&amp; hash[(k + bias * bias) % t] != k &amp;&amp; hash[(k + bias * bias) % t] != <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.1f&quot;</span>, <span class=\"number\">1.0</span> * cnt / m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"The task of this problem is simple: insert a sequence of distinct positive integers into a hash table first. Then try to find another sequen...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"hash","slug":"hash","count":2,"path":"api/tags/hash.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"『1146」Topological Order","uid":"58b13f5d3514e42a82f269de71ed64e3","slug":"『1146」Topological-Order","date":"2022-11-27T15:31:10.000Z","updated":"2022-11-27T15:41:04.790Z","comments":true,"path":"api/articles/『1146」Topological-Order.json","keywords":null,"cover":[],"text":"This is a problem given in the Graduate Entrance Exam in 2018: Which of the following is NOT a topological order obtained from the given dir...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"},{"name":"拓扑排序","slug":"拓扑排序","count":1,"path":"api/tags/拓扑排序.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1144」The Missing Number","uid":"16253d2f98c7585dcb9c2bd2f1f7d451","slug":"「1144」The-Missing-Number","date":"2022-11-27T12:33:03.000Z","updated":"2022-11-27T15:43:17.524Z","comments":true,"path":"api/articles/「1144」The-Missing-Number.json","keywords":null,"cover":null,"text":"Given N integers, you are supposed to find the smallest positive integer that is NOT in the given list. Input Specification:Each input file ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}