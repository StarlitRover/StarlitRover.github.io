{"title":"『1143』Lowest Common Ancestor","uid":"f27d92d50d5edef0b562aa3325cde9aa","slug":"『1143』Lowest-Common-Ancestor","date":"2022-11-27T11:26:11.000Z","updated":"2022-11-27T15:50:31.406Z","comments":true,"path":"api/articles/『1143』Lowest-Common-Ancestor.json","keywords":null,"cover":null,"content":"<p>The lowest common ancestor (LCA) of two nodes U and V in a tree is the deepest node that has both U and V as descendants.</p>\n<p>A binary search tree (BST) is recursively defined as a binary tree which has the following properties:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>\n<li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li>\n<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n<p>Given any two nodes in a BST, you are supposed to find their LCA.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives two positive integers: M (≤ 1,000), the number of pairs of nodes to be tested; and N (≤ 10,000), the number of keys in the BST, respectively. In the second line, N distinct integers are given as the preorder traversal sequence of the BST. Then M lines follow, each contains a pair of integer keys U and V. All the keys are in the range of <strong>int</strong>.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each given pair of U and V, print in a line <code>LCA of U and V is A.</code> if the LCA is found and <code>A</code> is the key. But if <code>A</code> is one of U and V, print <code>X is an ancestor of Y.</code> where <code>X</code> is <code>A</code> and <code>Y</code> is the other node. If U or V is not found in the BST, print in a line <code>ERROR: U is not found.</code> or <code>ERROR: V is not found.</code> or <code>ERROR: U and V are not found.</code>.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 8</span><br><span class=\"line\">6 3 1 2 5 4 8 7</span><br><span class=\"line\">2 5</span><br><span class=\"line\">8 7</span><br><span class=\"line\">1 9</span><br><span class=\"line\">12 -3</span><br><span class=\"line\">0 8</span><br><span class=\"line\">99 99</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LCA of 2 and 5 is 3.</span><br><span class=\"line\">8 is an ancestor of 7.</span><br><span class=\"line\">ERROR: 9 is not found.</span><br><span class=\"line\">ERROR: 12 and -3 are not found.</span><br><span class=\"line\">ERROR: 0 is not found.</span><br><span class=\"line\">ERROR: 99 and 99 are not found.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$给出一个二叉搜索树的先序遍历，输出两个节点的最低祖宗节点，如果树中不存在节点，就输出相应的报错信息。</p>\n<p>$\\qquad$被自己蠢哭了，最近题目刷多反而刷傻了。一看到先序遍历和二叉搜索树，就急着要构建出整棵树来，而且在构建过程中记录了每个节点的深度。读入需要查找的两个节点，如果树中存在这两个节点，就先让深度更大的节点往上回溯父节点直到与另一个节点深度相同，如果其父节点就是另一个节点则输出“X is an ancestor of Y.”，否则一起往上回溯直到两者父节点相同。</p>\n<p>$\\qquad$其实提交前自我感觉良好，觉得能一遍过，结果最后两个测试点超时了。我就轻车熟路地把所有cin、cout换成scanf、printf，这次竟然没用，于是我又把map换成了unordered_map，i.e. 哈希表，结果最后一个测试点还是超时。我深感不妙，到这一步就已经说明是我的算法出了问题。我寻思着，难到还有什么奇技淫巧吗。。。</p>\n<p>$\\qquad$这时候就需要回归本质了，最低祖宗节点其实是两个节点分流的地方，那么为什么会分流呢？因为两个节点与最低祖宗节点的大小关系不同。bingo，注意到先序遍历的特征是根节点在所有子节点前，那么我们只要顺序遍历先序遍历序列，找到第一个$k$使得$k\\geq a \\&amp; k\\leq b$，其中$a&#x3D;\\min(a,b),b&#x3D;\\max(a,b)$是需要查找的两个节点。这里之所以两边都要加上【&#x3D;】是因为$k$有可能就是$a,b$。那为什么第一个满足条件的$k$就是答案呢？因为当你把$k$为根节点的子树去掉后就会发现剩余节点与$a,b$的大小关系都是一致的，而先序遍历中$k$前面的节点一定来自于这些剩余节点。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, a, b, u, v, ans;</span><br><span class=\"line\">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">pre</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">bool</span>&gt; flag;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: pre)</span><br><span class=\"line\">        cin &gt;&gt; k, flag[k] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        <span class=\"type\">bool</span> skip = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> ((flag[a] &lt;&lt; <span class=\"number\">1</span>) + flag[b])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR: %d is not found.\\n&quot;</span>, b); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR: %d is not found.\\n&quot;</span>, a); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR: %d and %d are not found.\\n&quot;</span>, a, b); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: skip = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (skip) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        u = <span class=\"built_in\">min</span>(a, b), v = <span class=\"built_in\">max</span>(a, b);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: pre)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k &gt;= u &amp;&amp; k &lt;= v)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ans = k;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        (ans == v || ans == u) ? <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d is an ancestor of %d.\\n&quot;</span>, ans == v ? v : u, ans == v ? u : v)</span><br><span class=\"line\">                               : <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;LCA of %d and %d is %d.\\n&quot;</span>, a, b, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"case-5-time-limit-exceeded\">🐎🐎（case 5: Time Limit Exceeded）</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; pre;</span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; dad;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> s, <span class=\"type\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> r = <span class=\"built_in\">upper_bound</span>(pre.<span class=\"built_in\">begin</span>() + s, pre.<span class=\"built_in\">begin</span>() + e, pre[s]) - pre.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; s + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dad[pre[s + <span class=\"number\">1</span>]] = <span class=\"built_in\">make_pair</span>(pre[s], dad[pre[s]].second + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(s + <span class=\"number\">1</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &lt; e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dad[pre[r]] = <span class=\"built_in\">make_pair</span>(pre[s], dad[pre[s]].second + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(r, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, a, b, u, v;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class=\"line\">    pre.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;pre[i]);</span><br><span class=\"line\">    dad[pre[<span class=\"number\">0</span>]] = <span class=\"built_in\">make_pair</span>(pre[<span class=\"number\">0</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">0</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        <span class=\"type\">bool</span> fa = dad.<span class=\"built_in\">find</span>(a) == dad.<span class=\"built_in\">end</span>(), fb = dad.<span class=\"built_in\">find</span>(b) == dad.<span class=\"built_in\">end</span>(), flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> ((fa &lt;&lt; <span class=\"number\">1</span>) + fb)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR: %d is not found.\\n&quot;</span>, b); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR: %d is not found.\\n&quot;</span>, a); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR: %d and %d are not found.\\n&quot;</span>, a, b); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        u = (dad[a].second &gt; dad[b].second) ? a : b, v = (dad[a].second &gt; dad[b].second) ? b : a;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (dad[u].second &gt; dad[v].second) u = dad[u].first;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (u == v) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d is an ancestor of %d.\\n&quot;</span>, v, v == a ? b : a);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (u != v)</span><br><span class=\"line\">                u = dad[u].first, v = dad[v].first;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;LCA of %d and %d is %d.\\n&quot;</span>, a, b, u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"The lowest common ancestor (LCA) of two nodes U and V in a tree is the deepest node that has both U and V as descendants. A binary search tr...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"binary search","slug":"binary-search","count":7,"path":"api/tags/binary-search.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎🐎（case 5: Time Limit Exceeded）</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1144」The Missing Number","uid":"16253d2f98c7585dcb9c2bd2f1f7d451","slug":"「1144」The-Missing-Number","date":"2022-11-27T12:33:03.000Z","updated":"2022-11-27T15:43:17.524Z","comments":true,"path":"api/articles/「1144」The-Missing-Number.json","keywords":null,"cover":null,"text":"Given N integers, you are supposed to find the smallest positive integer that is NOT in the given list. Input Specification:Each input file ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1142」Maximal Clique","uid":"fd7ce911047e09d73f8229b416cde491","slug":"「1142」Maximal-Clique","date":"2022-11-27T07:38:11.000Z","updated":"2022-11-27T07:51:21.941Z","comments":true,"path":"api/articles/「1142」Maximal-Clique.json","keywords":null,"cover":null,"text":"A clique is a subset of vertices of an undirected graph such that every two distinct vertices in the clique are adjacent. A maximal clique i...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}