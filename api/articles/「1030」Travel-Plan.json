{"title":"「1030」Travel Plan","uid":"ed8d01651cc47c3cf52012b240c9dde7","slug":"「1030」Travel-Plan","date":"2022-07-21T08:23:49.000Z","updated":"2022-07-21T08:52:35.606Z","comments":true,"path":"api/articles/「1030」Travel-Plan.json","keywords":null,"cover":null,"content":"<p><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805464397627392\">➳ENTRY</a></p>\n<p>A traveler’s map gives the distances between cities along the highways, together with the cost of each highway. Now you are supposed to write a program to help a traveler to decide the shortest path between his&#x2F;her starting city and the destination. If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. Each case starts with a line containing 4 positive integers N, M, S, and D, where N (≤500) is the number of cities (and hence the cities are numbered from 0 to N−1); M is the number of highways; S and D are the starting and the destination cities, respectively. Then M lines follow, each provides the information of a highway, in the format:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">City1 City2 Distance Cost</span><br></pre></td></tr></table></figure>\n\n<p>where the numbers are all integers no more than 500, and are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 5 0 3</span><br><span class=\"line\">0 1 1 20</span><br><span class=\"line\">1 3 2 30</span><br><span class=\"line\">0 3 4 10</span><br><span class=\"line\">0 2 2 20</span><br><span class=\"line\">2 3 1 20</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 2 3 3 40</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$一个无向有（双）权图，给定起点和终点，还有每一条路的长度与花费，求出最短的路径，如果有多条最短路径，那么选择其中花费最少的路径，题目保证该路径唯一。</p>\n<p>$\\qquad$如果只需考虑单一权重那么就是一道经典的Dijkstra算法题，而双权重的本质思想其实也是一样的，只是将算法中所有权重比较变成先比较路径长度若长度相等则再比较花费的方式，简单地概括就是</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(distance1 &lt; distance2) ? <span class=\"literal\">true</span> : ((distance1 == distance2) ? (cost1 &lt; cost2) : <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$然后对于路径的记录则采取记录每一个节点的最短路径中前一个节点的编号，那么最后就可以从终点回溯出整条路径。</p>\n<p>$\\qquad$采用<code>vector&lt;map&lt;city(int),pair&lt;dist(int),cost(int)&gt;&gt;&gt;</code>的数据结构来存储路径长度和花费。</p>\n<hr>\n<h2><span id=\"c-d-e\">C ☺ D E</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXDIST 100000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, s, d, p, q;</span><br><span class=\"line\">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; s &gt;&gt; d;</span><br><span class=\"line\">    vector&lt;map&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&gt; <span class=\"built_in\">path</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; p &gt;&gt; q;</span><br><span class=\"line\">        cin &gt;&gt; path[p][q].first &gt;&gt; path[p][q].second;</span><br><span class=\"line\">        path[q][p] = path[p][q];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dist</span>(m, &#123;MAXDIST, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">pre</span><span class=\"params\">(m, <span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: path[s])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dist[k.first] = k.second;</span><br><span class=\"line\">        pre[k.first] = s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">visited</span><span class=\"params\">(m, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    visited[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!visited[d])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> min_dist = MAXDIST + <span class=\"number\">1</span>, cost = <span class=\"number\">0</span>, min_idx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[i] &amp;&amp; dist[i].first &lt;= min_dist)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                min_idx = (dist[i].first &lt; min_dist) ? i : min_idx;</span><br><span class=\"line\">                cost = (dist[i].first &lt; min_dist) ? dist[i].second : cost;</span><br><span class=\"line\">                min_dist = dist[i].first;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        visited[min_idx] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: path[min_idx])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 已确定节点必须跳过，否则会干扰pre</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (visited[k.first]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> &amp;single = path[min_idx][k.first];</span><br><span class=\"line\">            <span class=\"type\">int</span> flag1 = (dist[k.first].first - dist[min_idx].first - single.first), flag2 = (dist[k.first].second - dist[min_idx].second - single.second);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag1 &gt; <span class=\"number\">0</span> || flag1 == <span class=\"number\">0</span> &amp;&amp; flag2 &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                pre[k.first] = min_idx;</span><br><span class=\"line\">                dist[k.first] = &#123;dist[min_idx].first + single.first, dist[min_idx].second + single.second&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; way;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (d != <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        way.<span class=\"built_in\">push_back</span>(d);</span><br><span class=\"line\">        d = pre[d];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> k = way.<span class=\"built_in\">rbegin</span>(); k != way.<span class=\"built_in\">rend</span>(); ++k)</span><br><span class=\"line\">        cout &lt;&lt; *k &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; dist[way[<span class=\"number\">0</span>]].first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; dist[way[<span class=\"number\">0</span>]].second &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"➳ENTRY A traveler’s map gives the distances between cities along the highways, together with the cost of each highway. Now you are supposed ...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"pair","slug":"pair","count":6,"path":"api/tags/pair.json"},{"name":"vector","slug":"vector","count":17,"path":"api/tags/vector.json"},{"name":"Dijkstra","slug":"Dijkstra","count":6,"path":"api/tags/Dijkstra.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C ☺ D E</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1031」Hello World for U","uid":"786aa9c8aedf18362cb4846354e16ec2","slug":"「1031」Hello-World-for-U","date":"2022-07-21T09:30:51.000Z","updated":"2022-07-21T09:44:50.495Z","comments":true,"path":"api/articles/「1031」Hello-World-for-U.json","keywords":null,"cover":null,"text":"Given any string of N (≥5) characters, you are asked to form the characters into the shape of U. For example, helloworld can be printed as: ...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1029」Median","uid":"8cee37557b0d2d5a2b6286881eecf21d","slug":"「1029」Median","date":"2022-07-20T07:58:20.000Z","updated":"2022-07-20T08:22:47.708Z","comments":true,"path":"api/articles/「1029」Median.json","keywords":null,"cover":null,"text":"➳ENTRY Given an increasing sequence S of N integers, the median is the number at the middle position. For example, the median of S1 &#x3D; {...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}