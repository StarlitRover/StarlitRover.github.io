{"title":"『1088」Rational Arithmetic","uid":"358311a56ccea31028176b056f12f8e9","slug":"『1088」Rational-Arithmetic","date":"2022-10-20T05:15:51.000Z","updated":"2022-10-20T05:33:42.928Z","comments":true,"path":"api/articles/『1088」Rational-Arithmetic.json","keywords":null,"cover":null,"content":"<p>For two rational numbers, your task is to implement the basic arithmetics, that is, to calculate their sum, difference, product and quotient.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case, which gives in one line the two rational numbers in the format <code>a1/b1 a2/b2</code>. The numerators and the denominators are all in the range of long int. If there is a negative sign, it must appear only in front of the numerator. The denominators are guaranteed to be non-zero numbers.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in 4 lines the sum, difference, product and quotient of the two rational numbers, respectively. The format of each line is <code>number1 operator number2 = result</code>. Notice that all the rational numbers must be in their simplest form <code>k a/b</code>, where <code>k</code> is the integer part, and <code>a/b</code> is the simplest fraction part. If the number is negative, it must be included in a pair of parentheses. If the denominator in the division is zero, output <code>Inf</code> as the result. It is guaranteed that all the output integers are in the range of <strong>long int</strong>.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2/3 -4/2</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2/3 + (-2) = (-1 1/3)</span><br><span class=\"line\">2/3 - (-2) = 2 2/3</span><br><span class=\"line\">2/3 * (-2) = (-1 1/3)</span><br><span class=\"line\">2/3 / (-2) = (-1/3)</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5/3 0/6</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2/3 + 0 = 1 2/3</span><br><span class=\"line\">1 2/3 - 0 = 1 2/3</span><br><span class=\"line\">1 2/3 * 0 = 0</span><br><span class=\"line\">1 2/3 / 0 = Inf</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$用带分数的形式输出两个分数之和、差、积、商，具体输出规则如下：</p>\n<ol>\n<li><p>整数部分和真分数部分若为0则不输出，⚠️0必须输出【0】</p>\n</li>\n<li><p>负数需要加上（），负号要么在整数部分，要么在真分数的分子部分（整数部分为0）</p>\n</li>\n<li><p>当带分数整数和真分数部分皆不为0时，中间需要用space分隔</p>\n</li>\n<li><p>带分数必须是约分后的最简形式</p>\n</li>\n<li><p>分母为0直接输出【Inf】</p>\n</li>\n</ol>\n<p>$\\qquad$整体不难，一个格式化输出函数，一个简化函数即可。注意带分数中间的空格必须在两者都输出的时候才有。计算时可以用一个pair对来存取一个分数的分子和分母，然后分母始终为正。</p>\n<p>$\\qquad$另外题目既然说了long int，就不要侥幸int可能和long int等长。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">output</span><span class=\"params\">(pair&lt;<span class=\"type\">long</span> <span class=\"type\">int</span>, <span class=\"type\">long</span> <span class=\"type\">int</span>&gt; f)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!f.second)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Inf&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> flag = f.first &lt; <span class=\"number\">0</span> &amp;&amp; (f.first *= <span class=\"number\">-1</span>), space = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        cout &lt;&lt; (flag ? <span class=\"string\">&quot;(-&quot;</span> : <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f.first / f.second || f.first == <span class=\"number\">0</span>) cout &lt;&lt; f.first / f.second, space = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f.first % f.second) cout &lt;&lt; (space ? <span class=\"string\">&quot; &quot;</span> : <span class=\"string\">&quot;&quot;</span>) &lt;&lt; f.first % f.second &lt;&lt; <span class=\"string\">&quot;/&quot;</span> &lt;&lt; f.second;</span><br><span class=\"line\">        cout &lt;&lt; (flag ? <span class=\"string\">&quot;)&quot;</span> : <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">simplify</span><span class=\"params\">(pair&lt;<span class=\"type\">long</span> <span class=\"type\">int</span>, <span class=\"type\">long</span> <span class=\"type\">int</span>&gt; &amp;f)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">int</span> g = <span class=\"built_in\">gcd</span>(f.first, f.second);</span><br><span class=\"line\">    f.first /= g, f.second /= g;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f.second &lt; <span class=\"number\">0</span>) f.first *= <span class=\"number\">-1</span>, f.second *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pair&lt;<span class=\"type\">long</span> <span class=\"type\">int</span>, <span class=\"type\">long</span> <span class=\"type\">int</span>&gt; a, b, c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%ld/%ld %ld/%ld&quot;</span>, &amp;a.first, &amp;a.second, &amp;b.first, &amp;b.second);</span><br><span class=\"line\">    <span class=\"built_in\">simplify</span>(a), <span class=\"built_in\">simplify</span>(b);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">int</span> lab = <span class=\"built_in\">lcm</span>(a.second, b.second), na = a.first * lab / a.second, nb = b.first * lab / b.second;</span><br><span class=\"line\">    c.second = lab, c.first = na + nb, <span class=\"built_in\">simplify</span>(c);</span><br><span class=\"line\">    <span class=\"built_in\">output</span>(a), cout &lt;&lt; <span class=\"string\">&quot; + &quot;</span>, <span class=\"built_in\">output</span>(b), cout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>, <span class=\"built_in\">output</span>(c), cout &lt;&lt; endl;</span><br><span class=\"line\">    c.second = lab, c.first = na - nb, <span class=\"built_in\">simplify</span>(c);</span><br><span class=\"line\">    <span class=\"built_in\">output</span>(a), cout &lt;&lt; <span class=\"string\">&quot; - &quot;</span>, <span class=\"built_in\">output</span>(b), cout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>, <span class=\"built_in\">output</span>(c), cout &lt;&lt; endl;</span><br><span class=\"line\">    c.second = a.second * b.second, c.first = a.first * b.first, <span class=\"built_in\">simplify</span>(c);</span><br><span class=\"line\">    <span class=\"built_in\">output</span>(a), cout &lt;&lt; <span class=\"string\">&quot; * &quot;</span>, <span class=\"built_in\">output</span>(b), cout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>, <span class=\"built_in\">output</span>(c), cout &lt;&lt; endl;</span><br><span class=\"line\">    c.second = a.second * b.first, c.first = a.first * b.second, <span class=\"built_in\">simplify</span>(c);</span><br><span class=\"line\">    <span class=\"built_in\">output</span>(a), cout &lt;&lt; <span class=\"string\">&quot; / &quot;</span>, <span class=\"built_in\">output</span>(b), cout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>, <span class=\"built_in\">output</span>(c), cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"For two rational numbers, your task is to implement the basic arithmetics, that is, to calculate their sum, difference, product and quotient...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"pair","slug":"pair","count":6,"path":"api/tags/pair.json"},{"name":"numeric","slug":"numeric","count":4,"path":"api/tags/numeric.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1089」Insert or Merge","uid":"c5437ffcf609ae633f4f1165eadcfbba","slug":"「1089」Insert-or-Merge","date":"2022-10-21T12:50:54.000Z","updated":"2022-10-27T05:28:05.170Z","comments":true,"path":"api/articles/「1089」Insert-or-Merge.json","keywords":null,"cover":null,"text":"According to Wikipedia: Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list. Each iterati...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"『1087』All Roads Lead to Rome","uid":"36db02f696efbf1ae4833c7a9cd82a86","slug":"『1087』All-Roads-Lead-to-Rome","date":"2022-10-18T15:38:59.000Z","updated":"2022-10-18T16:14:57.950Z","comments":true,"path":"api/articles/『1087』All-Roads-Lead-to-Rome.json","keywords":null,"cover":null,"text":"Indeed there are many different tourist routes from our city to Rome. You are supposed to find your clients the route with the least cost wh...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"},{"name":"Dijkstra","slug":"Dijkstra","count":6,"path":"api/tags/Dijkstra.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}