{"title":"『1088」Rational Arithmetic","uid":"358311a56ccea31028176b056f12f8e9","slug":"『1088」Rational-Arithmetic","date":"2022-10-20T05:15:51.000Z","updated":"2022-10-20T05:33:42.000Z","comments":true,"path":"api/articles/『1088」Rational-Arithmetic.json","keywords":null,"cover":null,"content":"<p>For two rational numbers, your task is to implement the basic arithmetics, that is, to calculate their sum, difference, product and quotient.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case, which gives in one line the two rational numbers in the format <code>a1/b1 a2/b2</code>. The numerators and the denominators are all in the range of long int. If there is a negative sign, it must appear only in front of the numerator. The denominators are guaranteed to be non-zero numbers.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in 4 lines the sum, difference, product and quotient of the two rational numbers, respectively. The format of each line is <code>number1 operator number2 = result</code>. Notice that all the rational numbers must be in their simplest form <code>k a/b</code>, where <code>k</code> is the integer part, and <code>a/b</code> is the simplest fraction part. If the number is negative, it must be included in a pair of parentheses. If the denominator in the division is zero, output <code>Inf</code> as the result. It is guaranteed that all the output integers are in the range of <strong>long int</strong>.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><pre class=\"line-numbers language-in\" data-language=\"in\"><code class=\"language-in\">2/3 -4/2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><pre class=\"line-numbers language-out\" data-language=\"out\"><code class=\"language-out\">2/3 + (-2) = (-1 1/3)\n2/3 - (-2) = 2 2/3\n2/3 * (-2) = (-1 1/3)\n2/3 / (-2) = (-1/3)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><pre class=\"line-numbers language-in\" data-language=\"in\"><code class=\"language-in\">5/3 0/6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><pre class=\"line-numbers language-out\" data-language=\"out\"><code class=\"language-out\">1 2/3 + 0 = 1 2/3\n1 2/3 - 0 = 1 2/3\n1 2/3 * 0 = 0\n1 2/3 / 0 = Inf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>用带分数的形式输出两个分数之和、差、积、商，具体输出规则如下：</p>\n<ol>\n<li><p>整数部分和真分数部分若为0则不输出，⚠️0必须输出【0】</p>\n</li>\n<li><p>负数需要加上（），负号要么在整数部分，要么在真分数的分子部分（整数部分为0）</p>\n</li>\n<li><p>当带分数整数和真分数部分皆不为0时，中间需要用space分隔</p>\n</li>\n<li><p>带分数必须是约分后的最简形式</p>\n</li>\n<li><p>分母为0直接输出【Inf】</p>\n</li>\n</ol>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>整体不难，一个格式化输出函数，一个简化函数即可。注意带分数中间的空格必须在两者都输出的时候才有。计算时可以用一个pair对来存取一个分数的分子和分母，然后分母始终为正。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>另外题目既然说了long int，就不要侥幸int可能和long int等长。</p>\n<hr>\n<h2><span id>🐎</span></h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>f<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Inf\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>first <span class=\"token operator\">*=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> space <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">?</span> <span class=\"token string\">\"(-\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>first <span class=\"token operator\">/</span> f<span class=\"token punctuation\">.</span>second <span class=\"token operator\">||</span> f<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> f<span class=\"token punctuation\">.</span>first <span class=\"token operator\">/</span> f<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span> space <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>first <span class=\"token operator\">%</span> f<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>space <span class=\"token operator\">?</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> f<span class=\"token punctuation\">.</span>first <span class=\"token operator\">%</span> f<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">&lt;&lt;</span> f<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">?</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> g <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span>first <span class=\"token operator\">/=</span> g<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>second <span class=\"token operator\">/=</span> g<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">.</span>first <span class=\"token operator\">*=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>second <span class=\"token operator\">*=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld/%ld %ld/%ld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> lab <span class=\"token operator\">=</span> <span class=\"token function\">lcm</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> na <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>first <span class=\"token operator\">*</span> lab <span class=\"token operator\">/</span> a<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span> nb <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>first <span class=\"token operator\">*</span> lab <span class=\"token operator\">/</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> lab<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> na <span class=\"token operator\">+</span> nb<span class=\"token punctuation\">,</span> <span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" + \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" = \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> lab<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> na <span class=\"token operator\">-</span> nb<span class=\"token punctuation\">,</span> <span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" = \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>second <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>first <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> <span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" * \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" = \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>second <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>first <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span> <span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" / \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" = \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"For two rational numbers, your task is to implement the basic arithmetics, that is, to calculate their sum, difference, product and quotient...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"pair","slug":"pair","count":6,"path":"api/tags/pair.json"},{"name":"numeric","slug":"numeric","count":4,"path":"api/tags/numeric.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1089」Insert or Merge","uid":"c5437ffcf609ae633f4f1165eadcfbba","slug":"「1089」Insert-or-Merge","date":"2022-10-21T12:50:54.000Z","updated":"2022-10-27T05:28:05.000Z","comments":true,"path":"api/articles/「1089」Insert-or-Merge.json","keywords":null,"cover":null,"text":"According to Wikipedia: Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list. Each iterati...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"『1087』All Roads Lead to Rome","uid":"36db02f696efbf1ae4833c7a9cd82a86","slug":"『1087』All-Roads-Lead-to-Rome","date":"2022-10-18T15:38:59.000Z","updated":"2022-10-18T16:14:57.000Z","comments":true,"path":"api/articles/『1087』All-Roads-Lead-to-Rome.json","keywords":null,"cover":null,"text":"Indeed there are many different tourist routes from our city to Rome. You are supposed to find your clients the route with the least cost wh...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Dijkstra","slug":"Dijkstra","count":6,"path":"api/tags/Dijkstra.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}