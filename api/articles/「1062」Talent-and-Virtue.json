{"title":"「1062」Talent and Virtue","uid":"61bd7651739e9a5cb7671d4227eb7db6","slug":"「1062」Talent-and-Virtue","date":"2022-09-21T03:12:33.000Z","updated":"2022-12-03T03:13:14.449Z","comments":true,"path":"api/articles/「1062」Talent-and-Virtue.json","keywords":null,"cover":null,"content":"<p>About 900 years ago, a Chinese philosopher Sima Guang wrote a history book in which he talked about people’s talent and virtue. According to his theory, a man being outstanding in both talent and virtue must be a “sage（圣人）”; being less excellent but with one’s virtue outweighs talent can be called a “nobleman（君子）”; being good in neither is a “fool man（愚人）”; yet a fool man is better than a “small man（小人）” who prefers talent than virtue.</p>\n<p>Now given the grades of talent and virtue of a group of people, you are supposed to rank them according to Sima Guang’s theory.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. Each case first gives 3 positive integers in a line: $N (≤10^5)$, the total number of people to be ranked; $L (≥60)$, the lower bound of the qualified grades – that is, only the ones whose grades of talent and virtue are both not below this line will be ranked; and $H (&lt;100)$, the higher line of qualification – that is, those with both grades not below this line are considered as the “sages”, and will be ranked in non-increasing order according to their total grades. Those with talent grades below H but virtue grades not are considered as the “noblemen”, and are also ranked in non-increasing order according to their total grades, but they are listed after the “sages”. Those with both grades below H, but with virtue not lower than talent are considered as the “fool men”. They are ranked in the same way but after the “noblemen”. The rest of people whose grades both pass the L line are ranked after the “fool men”.</p>\n<p>Then N lines follow, each gives the information of a person in the format:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID_Number Virtue_Grade Talent_Grade</span><br></pre></td></tr></table></figure>\n\n<p>where <code>ID_Number</code> is an 8-digit number, and both grades are integers in [0, 100]. All the numbers are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>The first line of output must give $M (≤N)$, the total number of people that are actually ranked. Then M lines follow, each gives the information of a person in the same format as the input, according to the ranking rules. If there is a tie of the total grade, they must be ranked with respect to their virtue grades in non-increasing order. If there is still a tie, then output in increasing order of their ID’s.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14 60 80</span><br><span class=\"line\">10000001 64 90</span><br><span class=\"line\">10000002 90 60</span><br><span class=\"line\">10000011 85 80</span><br><span class=\"line\">10000003 85 80</span><br><span class=\"line\">10000004 80 85</span><br><span class=\"line\">10000005 82 77</span><br><span class=\"line\">10000006 83 76</span><br><span class=\"line\">10000007 90 78</span><br><span class=\"line\">10000008 75 79</span><br><span class=\"line\">10000009 59 90</span><br><span class=\"line\">10000010 88 45</span><br><span class=\"line\">10000012 80 100</span><br><span class=\"line\">10000013 90 99</span><br><span class=\"line\">10000014 66 60</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12</span><br><span class=\"line\">10000013 90 99</span><br><span class=\"line\">10000012 80 100</span><br><span class=\"line\">10000003 85 80</span><br><span class=\"line\">10000011 85 80</span><br><span class=\"line\">10000004 80 85</span><br><span class=\"line\">10000007 90 78</span><br><span class=\"line\">10000006 83 76</span><br><span class=\"line\">10000005 82 77</span><br><span class=\"line\">10000002 90 60</span><br><span class=\"line\">10000014 66 60</span><br><span class=\"line\">10000008 75 79</span><br><span class=\"line\">10000001 64 90</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$除了排序规则有点复杂外，也只是一道简单的信息分类输出题。根据司马光先生（砸缸的那位</p>\n<p>）的理论，人分为圣人（$T\\geq H\\wedge V\\geq H$）、君子（$T &lt; H \\wedge V \\geq H$）、愚人（$T \\leq V \\wedge V &lt; H$）、小人（$else\\wedge T\\geq L\\wedge V\\geq L$）。给出人数N、H、L，以及每人的T、V，请按照前述的顺序分类并输出，同一类中按照$T+V$降序排列，相等时按照$V$降序排序，再相等时按照ID升序排列。</p>\n<p>$\\qquad$对于排序规则，只需要写一个cmp函数然后sort即可，其余就是如何组织数据结构的问题了。一开始我用map存储了ID所对应的T、V，然后分类时只存储ID，将map作为全局变量从而实现对ID的sort。不幸的是，提交后出现了超时，其实仔细想想，排序时需要不断地访问map，最后输出还要再访问一遍。而$N\\leq 10^5$，如果说所有人都在同一类，那么访问map的时间将会是致命的。最后我采用了tuple，将ID、T、V都存储在一起（类似于结构体），消除了访问时间，Run Time陡跌。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> tuple&lt;string, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; tsii;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(tsii &amp;a, tsii &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(a) + <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(a) != <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(b) + <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(b))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(a) + <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(a) &gt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(b) + <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(b);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(a) != <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(b))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(a) &gt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(b);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(a) &lt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N, L, H, t, v;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;N, &amp;L, &amp;H);</span><br><span class=\"line\">    <span class=\"type\">int</span> valid = N;</span><br><span class=\"line\">    vector&lt;tuple&lt;string, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; men[<span class=\"number\">4</span>];</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    s.<span class=\"built_in\">resize</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s %d %d&quot;</span>, &amp;s[<span class=\"number\">0</span>], &amp;v, &amp;t);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t &lt; L || v &lt; L)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            valid -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &gt;= H &amp;&amp; v &gt;= H)</span><br><span class=\"line\">            men[<span class=\"number\">0</span>].<span class=\"built_in\">emplace_back</span>(s, v, t);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; H &amp;&amp; v &gt;= H)</span><br><span class=\"line\">            men[<span class=\"number\">1</span>].<span class=\"built_in\">emplace_back</span>(s, v, t);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt;= v &amp;&amp; v &lt; H)</span><br><span class=\"line\">            men[<span class=\"number\">2</span>].<span class=\"built_in\">emplace_back</span>(s, v, t);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            men[<span class=\"number\">3</span>].<span class=\"built_in\">emplace_back</span>(s, v, t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, valid);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;m: men)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(m.<span class=\"built_in\">begin</span>(), m.<span class=\"built_in\">end</span>(), cmp);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: m)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d %d\\n&quot;</span>, <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(k).<span class=\"built_in\">c_str</span>(), <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(k), <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(k));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"About 900 years ago, a Chinese philosopher Sima Guang wrote a history book in which he talked about people’s talent and virtue. According to...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1063」Set Similarity","uid":"70201c87e9f11a4fa65c8ac00911ccba","slug":"「1063」Set-Similarity","date":"2022-09-21T08:11:18.000Z","updated":"2022-09-21T09:21:12.296Z","comments":true,"path":"api/articles/「1063」Set-Similarity.json","keywords":null,"cover":null,"text":"Given two sets of integers, the similarity of the sets is defined to be $N_c​&#x2F;N_t​×100%$, where $N_c$​ is the number of distinct common...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"Lab1: Xv6 and Unix utilities","uid":"1e574a5e3fca1a756fff12eb87b95cbe","slug":"Lab1-Xv6-and-Unix-utilities","date":"2022-09-13T10:32:31.000Z","updated":"2022-10-10T06:21:34.553Z","comments":true,"path":"api/articles/Lab1-Xv6-and-Unix-utilities.json","keywords":null,"cover":[],"text":"$\\qquad$这学期开始学操作系统啦，一周五节课，是一位老教师，除了讲话慢了点还经常请同学们回答一些神奇问题外感觉还好，和上学期的寄网还是有差距的。暑假想预习来着的，不过经历了一些事情有点颓，现在回忆起来像是上个世纪的假期了。众所周知，大学&#x3D;大不了自学，所以打开了MI...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/categories/操作系统.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"xv6","slug":"xv6","count":3,"path":"api/tags/xv6.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}