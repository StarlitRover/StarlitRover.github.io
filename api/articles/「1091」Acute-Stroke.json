{"title":"「1091」Acute Stroke","uid":"2a6d9618f81bcb5d8f3a7de4f306ec7b","slug":"「1091」Acute-Stroke","date":"2022-10-22T06:47:27.000Z","updated":"2022-10-22T07:20:32.992Z","comments":true,"path":"api/articles/「1091」Acute-Stroke.json","keywords":null,"cover":[],"content":"<p>One important factor to identify acute stroke (急性脑卒中) is the volume of the stroke core. Given the results of image analysis in which the core regions are identified in each MRI slice, your job is to calculate the volume of the stroke core.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains 4 positive integers: M, N, L and T, where M and N are the sizes of each slice (i.e. pixels of a slice are in an M×N matrix, and the maximum resolution is 1286 by 128); L (≤60) is the number of slices of a brain; and T is the integer threshold (i.e. if the volume of a connected core is less than T, then that core must not be counted).</p>\n<p>Then L slices are given. Each slice is represented by an M×N matrix of 0’s and 1’s, where 1 represents a pixel of stroke, and 0 means normal. Since the thickness of a slice is a constant, we only have to count the number of 1’s to obtain the volume. However, there might be several separated core regions in a brain, and only those with their volumes no less than T are counted. Two pixels are <strong>connected</strong> and hence belong to the same region if they share a common side, as shown by Figure 1 where all the 6 red pixels are connected to the blue one.</p>\n<p><img src=\"https://images.ptausercontent.com/f85c00cc-62ce-41ff-8dd0-d1c288d87409.jpg\" alt=\"figstroke.jpg\"></p>\n<center>Figure 1</center>\n\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each case, output in a line the total volume of the stroke core.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4 5 2</span><br><span class=\"line\">1 1 1 1</span><br><span class=\"line\">1 1 1 1</span><br><span class=\"line\">1 1 1 1</span><br><span class=\"line\">0 0 1 1</span><br><span class=\"line\">0 0 1 1</span><br><span class=\"line\">0 0 1 1</span><br><span class=\"line\">1 0 1 1</span><br><span class=\"line\">0 1 0 0</span><br><span class=\"line\">0 0 0 0</span><br><span class=\"line\">1 0 1 1</span><br><span class=\"line\">0 0 0 0</span><br><span class=\"line\">0 0 0 0</span><br><span class=\"line\">0 0 0 1</span><br><span class=\"line\">0 0 0 1</span><br><span class=\"line\">1 0 0 0</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">26</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$统计CT切片中连续（上下左右前后相邻）部分超过T的stroke core体积总和。本质上就是求三维连通块，直接BFS或DFS。</p>\n<p>$\\qquad$也无需设置isVisited标记变量，像素点为0就表示该处没有stroke或者已经访问过。</p>\n<p>$\\qquad$然而用DFS递归搜索提交，后面两个测试点双双Segmentation Fault，这意味着递归调用太多了导致栈溢出。于是乎我用stack来模拟递归调用后就AC了。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tuple&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, l, t;</span><br><span class=\"line\">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; l &gt;&gt; t;</span><br><span class=\"line\">    vector&lt;vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; &gt; <span class=\"built_in\">pixel</span>(l, <span class=\"built_in\">vector</span>(m, <span class=\"built_in\">vector</span>(n, <span class=\"number\">0</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; l; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; n; ++k)</span><br><span class=\"line\">                cin &gt;&gt; pixel[i][j][k];</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; l; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; n; ++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!pixel[i][j][k]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                stack&lt;tuple&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; s;</span><br><span class=\"line\">                s.<span class=\"built_in\">emplace</span>(i, j, k);</span><br><span class=\"line\">                <span class=\"type\">int</span> piece = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> a = <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(s.<span class=\"built_in\">top</span>()), b = <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(s.<span class=\"built_in\">top</span>()), c = <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(s.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (a &lt; <span class=\"number\">0</span> || a &gt;= l || b &lt; <span class=\"number\">0</span> || b &gt;= m || c &lt; <span class=\"number\">0</span> || c &gt;= n || !pixel[a][b][c]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    pixel[a][b][c] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    ++piece;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (a &gt; <span class=\"number\">0</span>) s.<span class=\"built_in\">emplace</span>(a - <span class=\"number\">1</span>, b, c);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (a &lt; l - <span class=\"number\">1</span>) s.<span class=\"built_in\">emplace</span>(a + <span class=\"number\">1</span>, b, c);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (b &gt; <span class=\"number\">0</span>) s.<span class=\"built_in\">emplace</span>(a, b - <span class=\"number\">1</span>, c);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (b &lt; m - <span class=\"number\">1</span>) s.<span class=\"built_in\">emplace</span>(a, b + <span class=\"number\">1</span>, c);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (c &gt; <span class=\"number\">0</span>) s.<span class=\"built_in\">emplace</span>(a, b, c - <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (c &lt; n - <span class=\"number\">1</span>) s.<span class=\"built_in\">emplace</span>(a, b, c + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sum += piece &gt;= t ? piece : <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    cout &lt;&lt; sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"One important factor to identify acute stroke (急性脑卒中) is the volume of the stroke core. Given the results of image analysis in which the cor...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"},{"name":"stack","slug":"stack","count":3,"path":"api/tags/stack.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"},{"name":"DFS","slug":"DFS","count":7,"path":"api/tags/DFS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1092」To Buy or Not to Buy","uid":"a08c0b0ed5f594b2852b4c4eda7ad240","slug":"「1092」To-Buy-or-Not-to-Buy","date":"2022-10-22T13:07:25.000Z","updated":"2022-10-22T13:15:39.479Z","comments":true,"path":"api/articles/「1092」To-Buy-or-Not-to-Buy.json","keywords":null,"cover":[],"text":"Eva would like to make a string of beads with her favorite colors so she went to a small shop to buy some beads. There were many colorful st...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1090」Highest Price in Supply Chain","uid":"a826ea08eba83fcbe604bb29b17897fe","slug":"「1090」Highest-Price-in-Supply-Chain","date":"2022-10-21T15:16:17.000Z","updated":"2022-10-21T15:33:35.336Z","comments":true,"path":"api/articles/「1090」Highest-Price-in-Supply-Chain.json","keywords":null,"cover":null,"text":"A supply chain is a network of retailers（零售商）, distributors（经销商）, and suppliers（供应商）– everyone involved in moving a product from supplier to...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"},{"name":"DFS","slug":"DFS","count":7,"path":"api/tags/DFS.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}