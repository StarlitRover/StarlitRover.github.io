{"title":"『1135』Is It A Red-Black Tree","uid":"23124d9c52676e982f8ad5a9c32feebd","slug":"『1135』Is-It-A-Red-Black-Tree","date":"2022-11-25T06:06:31.000Z","updated":"2022-11-25T09:37:40.389Z","comments":true,"path":"api/articles/『1135』Is-It-A-Red-Black-Tree.json","keywords":null,"cover":[],"content":"<p>There is a kind of balanced binary search tree named <strong>red-black tree</strong> in the data structure. It has the following 5 properties:</p>\n<ul>\n<li>(1) Every node is either red or black.</li>\n<li>(2) The root is black.</li>\n<li>(3) Every leaf (NULL) is black.</li>\n<li>(4) If a node is red, then both its children are black.</li>\n<li>(5) For each node, all simple paths from the node to descendant leaves contain the same number of black nodes.</li>\n</ul>\n<p>For example, the tree in Figure 1 is a red-black tree, while the ones in Figure 2 and 3 are not.</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://images.ptausercontent.com/eff80bd4-c833-4818-9786-81680d1b304a.jpg\" alt=\"rbf1.jpg\"></th>\n<th><img src=\"https://images.ptausercontent.com/b11184df-eaab-451c-b7d4-7fc1dc82b028.jpg\" alt=\"rbf2.jpg\"></th>\n<th><img src=\"https://images.ptausercontent.com/625c532b-22fc-47b9-80ea-0537cf00d922.jpg\" alt=\"rbf3.jpg\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Figure 1</td>\n<td>Figure 2</td>\n<td>Figure 3</td>\n</tr>\n</tbody></table>\n<p>For each given binary search tree, you are supposed to tell if it is a legal red-black tree.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains several test cases. The first line gives a positive integer K (≤30) which is the total number of cases. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the preorder traversal sequence of the tree. While all the keys in a tree are positive integers, we use negative signs to represent red nodes. All the numbers in a line are separated by a space. The sample input cases correspond to the trees shown in Figure 1, 2 and 3.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in a line “Yes” if the given tree is a red-black tree, or “No” if not.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">9</span><br><span class=\"line\">7 -2 1 5 -4 -11 8 14 -15</span><br><span class=\"line\">9</span><br><span class=\"line\">11 -2 1 -7 5 -4 8 14 -15</span><br><span class=\"line\">8</span><br><span class=\"line\">10 -7 5 -6 8 15 -11 17</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes</span><br><span class=\"line\">No</span><br><span class=\"line\">No</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$给出二叉搜索树的先序遍历，判断它是否为红黑树。红黑树是一种高效的二叉搜索树，查找效率可以达到$\\log_2{n}$，主要具有以下特征：</p>\n<ol>\n<li><p>根节点和所有叶子节点（这里将NULL看作叶节点，因此这个特征不具有什么约束）都是黑色</p>\n</li>\n<li><p>如果一个节点是红色，那么它的两个子节点必须均为黑色</p>\n</li>\n<li><p>每个节点到它所有子代叶子节点的路径上有相同个数的黑色节点</p>\n</li>\n</ol>\n<p>$\\qquad$由于是二叉搜素树，因此通过和根节点之间的比较，可以将先序遍历划分为【根节点｜左子树节点｜右子树节点】，然后递归划分找出所有父子关系。然后通过DFS递归验证2、3特征，2比较简单只要检查红节点的子节点$\\geq 0$即可；验证3的话就让dfs函数返回从当前节点到叶子节点路径中的黑节点个数，如果发现左右子节点返回个数不同或者其一返回-1，则说明不符合特征3直接返回-1。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; sons;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; pre;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> s, <span class=\"type\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> idx = <span class=\"built_in\">upper_bound</span>(pre.<span class=\"built_in\">begin</span>() + s, pre.<span class=\"built_in\">begin</span>() + e, <span class=\"built_in\">abs</span>(pre[s]),</span><br><span class=\"line\">                          [](<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a, <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(a) &lt; <span class=\"built_in\">abs</span>(b); &#125;) - pre.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx &gt; s + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sons[pre[s]].first = pre[s + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(s + <span class=\"number\">1</span>, idx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx &lt; e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sons[pre[s]].second = pre[idx];</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(idx, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// feature 2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span> &amp;&amp; (sons[n].first &lt; <span class=\"number\">0</span> || sons[n].second &lt; <span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"comment\">// feature 3</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((l = <span class=\"built_in\">check</span>(sons[n].first)) &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((r = <span class=\"built_in\">check</span>(sons[n].second)) &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l != r) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> l + (n &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; m;</span><br><span class=\"line\">        pre.<span class=\"built_in\">resize</span>(m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">            cin &gt;&gt; pre[j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre[<span class=\"number\">0</span>] &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(<span class=\"number\">0</span>, m);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"built_in\">check</span>(pre[<span class=\"number\">0</span>]) &gt; <span class=\"number\">0</span> ? <span class=\"string\">&quot;Yes\\n&quot;</span> : <span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">        sons.<span class=\"built_in\">clear</span>(), pre.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$这里用了<code>upper_bound</code>函数找到右子树的根节点位置，该函数返回第一个&gt;给定值的元素迭代器，它的兄弟函数<code>lower_bound</code>则返回第一个≥给定值的元素迭代器。</p>\n","text":"There is a kind of balanced binary search tree named red-black tree in the data structure. It has the following 5 properties: (1) Every node...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"},{"name":"DFS","slug":"DFS","count":7,"path":"api/tags/DFS.json"},{"name":"RBT","slug":"RBT","count":1,"path":"api/tags/RBT.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"『1136」A Delayed Palindrome","uid":"53c2472eec1fb780c12dac8c28c45b29","slug":"『1136」A-Delayed-Palindrome","date":"2022-11-25T09:05:29.000Z","updated":"2022-11-25T09:36:24.245Z","comments":true,"path":"api/articles/『1136」A-Delayed-Palindrome.json","keywords":null,"cover":null,"text":"Consider a positive integer N written in standard notation with k+1 digits ai​ as $a_k​⋯a_1​a_0​$ with $0≤a_i​&lt;10$ for all $i$ and $a_k​&...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"reverse","slug":"reverse","count":4,"path":"api/tags/reverse.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1134」Vertex Cover","uid":"1e867ab5e03f286a58fad122534ef050","slug":"「1134」Vertex-Cover","date":"2022-11-25T02:50:33.000Z","updated":"2022-11-25T03:09:05.490Z","comments":true,"path":"api/articles/「1134」Vertex-Cover.json","keywords":null,"cover":null,"text":"A vertex cover of a graph is a set of vertices such that each edge of the graph is incident to at least one vertex of the set. Now given a g...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"bitset","slug":"bitset","count":4,"path":"api/tags/bitset.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}