{"title":"Lexer（Ver. Hand）","uid":"e7d5cd857c1aa61505680c49d614561a","slug":"Lexer（Ver-Hand）","date":"2022-05-29T16:39:19.000Z","updated":"2022-07-17T16:52:30.380Z","comments":true,"path":"api/articles/Lexer（Ver-Hand）.json","keywords":null,"cover":[],"content":"<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>本文介绍如何手撕词法分析器，整体来说难度不大，还是文件读取麻烦。</p>\n<img src=\"/images/编译原理/17.png\" style=\"zoom:100%;\">\n\n<span id=\"more\"></span>\n\n<h2><span id=\"lexerh\">lexer.h</span></h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">LEXER_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEXER_H</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string&gt;</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">token_type</span>\n<span class=\"token punctuation\">{</span>\n    INT<span class=\"token punctuation\">,</span>\n    VOID<span class=\"token punctuation\">,</span>\n    CONST<span class=\"token punctuation\">,</span>\n    IF<span class=\"token punctuation\">,</span>\n    ELSE<span class=\"token punctuation\">,</span>\n    WHILE<span class=\"token punctuation\">,</span>\n    BREAK<span class=\"token punctuation\">,</span>\n    CONTINUE<span class=\"token punctuation\">,</span>\n    RETURN<span class=\"token punctuation\">,</span>\n    ID<span class=\"token punctuation\">,</span>\n    NUM<span class=\"token punctuation\">,</span>\n    ASSIGN<span class=\"token punctuation\">,</span>\n    OR<span class=\"token punctuation\">,</span>\n    AND<span class=\"token punctuation\">,</span>\n    CMP<span class=\"token punctuation\">,</span>\n    LPARENT<span class=\"token punctuation\">,</span>\n    RPARENT<span class=\"token punctuation\">,</span>\n    LBRACKET<span class=\"token punctuation\">,</span>\n    RBRACKET<span class=\"token punctuation\">,</span>\n    LBRACE<span class=\"token punctuation\">,</span>\n    RBRACE<span class=\"token punctuation\">,</span>\n    SEMICN<span class=\"token punctuation\">,</span>\n    COMMA<span class=\"token punctuation\">,</span>\n    BINOPP<span class=\"token punctuation\">,</span>\n    PLUSSUB<span class=\"token punctuation\">,</span>\n    NOT\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> token_name <span class=\"token operator\">=</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"INT\\t\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"VOID\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"CONST\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"IF\\t\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ELSE\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"WHILE\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"BREAK\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"CONTINUE\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"RETURN\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ID\\t\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"NUM\\t\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ASSIGN\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"OR\\t\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"AND\\t\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"CMP\\t\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"LPARENT\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"RPARENT\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"LBRACKET\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"RBRACKET\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"LBRACE\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"RBRACE\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"SEMICN\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"COMMA\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"BINOPP\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"PLUSSUB\\t\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"NOT\\t\\t\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> lineno <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span>token_type<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&gt;&gt;</span> tokens<span class=\"token punctuation\">;</span>\nstring token_str<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">isHexDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//返回是否是16进制的字符，即0~9,a~f,A~F</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'f'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'F'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">isIdentifierChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//返回是否是组成标识符的字符</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">isalpha</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'_'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// token identifiers</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>ifstream <span class=\"token operator\">&amp;</span>fin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//代表是否是非法十六进制、八进制、十进制数</span>\n    <span class=\"token keyword\">bool</span> isInvalidHex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> isInvalidOct <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> isInvalidDec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//第一位的处理，根据0与非0分别考虑</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token_str <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">//OCT or HEX or ZERO</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> decnum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'x'</span> <span class=\"token operator\">||</span> fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'X'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//HEX</span>\n        <span class=\"token punctuation\">{</span>\n            fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            token_str <span class=\"token operator\">+=</span> ch<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">bool</span> is0x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//判断是否是单个的0x，能进入下面的while就证明不是</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isHexDigit</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                is0x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                token_str <span class=\"token operator\">+=</span> ch<span class=\"token punctuation\">;</span>\n                decnum <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    decnum <span class=\"token operator\">+=</span> ch <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'f'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    decnum <span class=\"token operator\">+=</span> ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    decnum <span class=\"token operator\">+=</span> ch <span class=\"token operator\">-</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isIdentifierChar</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> is0x<span class=\"token punctuation\">)</span><span class=\"token comment\">//混入了不是16进制的其它字母</span>\n            <span class=\"token punctuation\">{</span>\n                isInvalidHex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                token_str <span class=\"token operator\">=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>decnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'1'</span> <span class=\"token operator\">&amp;&amp;</span> fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'7'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//OCT</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'7'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                token_str <span class=\"token operator\">+=</span> ch<span class=\"token punctuation\">;</span>\n                decnum <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                decnum <span class=\"token operator\">+=</span> ch <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isIdentifierChar</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">//混入了8以上的数字或字母</span>\n            <span class=\"token punctuation\">{</span>\n                isInvalidOct <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                token_str <span class=\"token operator\">=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>decnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isIdentifierChar</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">//invalid oct</span>\n        <span class=\"token punctuation\">{</span>\n            isInvalidOct <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>                                        <span class=\"token comment\">//ZERO</span>\n        <span class=\"token punctuation\">{</span>\n            token_str <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>                            <span class=\"token comment\">//DEC</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            token_str <span class=\"token operator\">+=</span> ch<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isIdentifierChar</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//混入了字母</span>\n        <span class=\"token punctuation\">{</span>\n            isInvalidDec <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInvalidHex <span class=\"token operator\">||</span> isInvalidOct <span class=\"token operator\">||</span> isInvalidDec<span class=\"token punctuation\">)</span> <span class=\"token comment\">//是非法数字，就把剩下的字母数字读完</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isIdentifierChar</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            token_str <span class=\"token operator\">+=</span> ch<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInvalidHex<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[1;31mInvalid Hex number at Line %d: %s\\033[0m\\n\"</span><span class=\"token punctuation\">,</span> lineno<span class=\"token punctuation\">,</span> token_str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInvalidOct<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[1;31mInvalid Oct number at Line %d: %s\\033[0m\\n\"</span><span class=\"token punctuation\">,</span> lineno<span class=\"token punctuation\">,</span> token_str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInvalidDec<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[1;31mInvalid Dec number at Line %d: %s\\033[0m\\n\"</span><span class=\"token punctuation\">,</span> lineno<span class=\"token punctuation\">,</span> token_str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>                                               <span class=\"token comment\">//是合法数字，正常返回</span>\n    <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>NUM<span class=\"token punctuation\">,</span> token_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span>ifstream <span class=\"token operator\">&amp;</span>fin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    string st<span class=\"token punctuation\">;</span>\n    st <span class=\"token operator\">=</span> token_str<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'_'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        st <span class=\"token operator\">+=</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">==</span> <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>INT<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">==</span> <span class=\"token string\">\"void\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>VOID<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">==</span> <span class=\"token string\">\"const\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>CONST<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">==</span> <span class=\"token string\">\"if\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>IF<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">==</span> <span class=\"token string\">\"else\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>ELSE<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">==</span> <span class=\"token string\">\"while\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>WHILE<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">==</span> <span class=\"token string\">\"break\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>BREAK<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">==</span> <span class=\"token string\">\"continue\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>CONTINUE<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">==</span> <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>RETURN<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Annotation</span><span class=\"token punctuation\">(</span>ifstream <span class=\"token operator\">&amp;</span>fin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token_str <span class=\"token operator\">==</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token operator\">++</span>lineno<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">||</span> fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> lineno2 <span class=\"token operator\">=</span> lineno<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>lineno<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">&amp;&amp;</span> fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">&amp;&amp;</span> fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[1;31mUnterminated %s comment at line %d.\\033[0m\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">,</span> lineno2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">And</span><span class=\"token punctuation\">(</span>ifstream <span class=\"token operator\">&amp;</span>fin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>AND<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&amp;&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'&amp;'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[1;31mInvalid token \\\"&amp;\\\" at Line %d: Do you mean \\\"&amp;&amp;\\\" ?\\033[0m\\n\"</span><span class=\"token punctuation\">,</span> lineno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Or</span><span class=\"token punctuation\">(</span>ifstream <span class=\"token operator\">&amp;</span>fin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>OR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"||\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'|'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[1;31mInvalid token \\\"|\\\" at Line %d: Do you mean \\\"||\\\" ?\\033[0m\\n\"</span><span class=\"token punctuation\">,</span> lineno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//LEXER_H</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2><span id=\"maincpp\">main.cpp</span></h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">p#include <span class=\"token string\">\"lexer.h\"</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// read file</span>\n    ifstream fin<span class=\"token punctuation\">;</span>\n    fin<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../sample.c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fin<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"File not found\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        token_str <span class=\"token operator\">=</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'\\n'</span><span class=\"token operator\">:</span>\n                <span class=\"token operator\">++</span>lineno<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">' '</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'\\t'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'{'</span><span class=\"token operator\">:</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>LBRACE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"{\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'}'</span><span class=\"token operator\">:</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>RBRACE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'('</span><span class=\"token operator\">:</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>LPARENT<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">')'</span><span class=\"token operator\">:</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>RPARENT<span class=\"token punctuation\">,</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'['</span><span class=\"token operator\">:</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>LBRACKET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">']'</span><span class=\"token operator\">:</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>RBRACKET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">';'</span><span class=\"token operator\">:</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>SEMICN<span class=\"token punctuation\">,</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">','</span><span class=\"token operator\">:</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>COMMA<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token operator\">:</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>PLUSSUB<span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'%'</span><span class=\"token operator\">:</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>BINOPP<span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'/'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">||</span> fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">Annotation</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>BINOPP<span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'!'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'='</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>CMP<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>NOT<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'&amp;'</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">And</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'|'</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">Or</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'='</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'='</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>CMP<span class=\"token punctuation\">,</span> <span class=\"token string\">\"==\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>ASSIGN<span class=\"token punctuation\">,</span> <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'&gt;'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'='</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>CMP<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&gt;=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>CMP<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token char\">'&lt;'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'='</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    fin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>CMP<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                    tokens<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>token_type<span class=\"token double-colon punctuation\">::</span>CMP<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isalpha</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'_'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Annotation</span><span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[1;31mUnexpected character \\\"%c\\\" at Line %d.\\033[0m\\n\"</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">,</span> lineno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>t<span class=\"token operator\">:</span> tokens<span class=\"token punctuation\">)</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> token_name<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2><span id=\"tips\">Tips</span></h2><ol>\n<li><p><code>fin</code>是一个文件输入流，我们从中读取需要识别的程序代码</p>\n</li>\n<li><p>顶层逻辑是读取当前文件指针指向的字符<code>ch</code>，根据<code>ch</code>用<code>switch</code>分配到各个token识别子函数，用子函数读取一个完整的token（一两个字符的token就不设置函数了）</p>\n</li>\n<li><p>单个和双个字符的token识别已经在顶层中完成，即’\\n’、‘\\t’、空格、所有括号、逗号分号、所有运算符和比较符，可以参照这部分代码 </p>\n</li>\n<li><p>token的数据结构是 <code>vector&lt;pair&lt;token_type,string&gt;&gt;</code>·，其中token_type是一个枚举类型，表示该token的类型；string则是存储该token的内容，一般为其字面值</p>\n</li>\n<li><p>用<code>tokens.emplace_back(TYPE,Str)</code>添加token，参见<code>switch</code>中的语句</p>\n</li>\n<li><p>每个token识别函数都会返回一个<code>bool</code>·值来表明该类型的token是否识别成功，如果识别成功则返回<code>true</code>，并需要将相应的token pair添加到<code>tokens</code>；若识别失败则返回<code>false</code>，并给出相应的错误提示.   </p>\n</li>\n<li><p>错误提示规范：</p>\n<p> <code>printf(“\\033[1;31m【Error Type】 at Line %d：【info】\\033[0m\\n”,lineno);</code></p>\n<p> 【Error Type】是错误类型；【info】是附加信息，可以省略</p>\n</li>\n<li><p>注意如果识别失败，将有两种策略</p>\n<ol>\n<li>将文件读指针退回去：比如说在识别关键字token的函数<code>Keyword(fin)</code>中发现这其实是一个变量名，那么我们需要将文件指针退回到调用函数之前</li>\n<li>将错就错：对于一些很好理解的错误，我们可以直接帮他进行修复，比如说读入一个’&amp;’结果发现下一个字符不是’&amp;’，很明显是用户少打了，那么我们依然可以采取<code>tokens.emplace_back(AND, \"&amp;&amp;\");</code>，并给出错误提示“Do you mean “&amp;&amp;” ?”（<code>And</code>和<code>Or</code>函数采用的就是这个策略）</li>\n</ol>\n</li>\n<li><p>token识别函数可以参照 <code>bool And(ifstream &amp;fin)</code>和<code>bool Or(ifstream &amp;fin)</code></p>\n</li>\n<li><p>需要在本地运行时，只需在main.cpp同目录下创建sample.c即可</p>\n</li>\n<li><p>每个token识别函数的形参都是文件输入流变量<code>fin</code>的引用，主要使用<code>fin</code>的以下三个函数</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fin.get(ch)</td>\n<td>获取文件的下一个字符给ch，并将文件读指针往下移动一位</td>\n</tr>\n<tr>\n<td>ch=fin.peek()</td>\n<td>获取文件的下一个字符给ch，但不移动文件读指针（peek v. 窥视；窥见）</td>\n</tr>\n<tr>\n<td>fin.seekg(-k, ios::cur)</td>\n<td>将文件读指针回退k位，一般用于读入一连串字符后发现识别失败，那么需要将文件指针退回去</td>\n</tr>\n</tbody></table>\n<ol start=\"12\">\n<li>几个全局变量及其含义</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>全局变量</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>token_name</td>\n<td>通过token_name[token_type] 可以获取token_type的字面字符串（因为枚举类型的本质是整数）</td>\n</tr>\n<tr>\n<td>lineno</td>\n<td>当前文件读指针的行数，报错时需要显示</td>\n</tr>\n<tr>\n<td>tokens</td>\n<td>存取所有token pair的vector</td>\n</tr>\n<tr>\n<td>token_str</td>\n<td>存取当前token的字符串值，一方面根据该变量的长度可以确定回退位数，另一方面作为token的内容 <br>  ⚠️读入的第一个字符会存在这个变量中</td>\n</tr>\n</tbody></table>\n<ol start=\"13\">\n<li>实现的token识别函数</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>识别对象</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Number</td>\n<td>八进制、十进制、十六进制</td>\n<td>token.emplace_back(token_type::NUM,转成十进制数值后的字符串)<br>需要具备识别非法数值的能力</td>\n</tr>\n<tr>\n<td>Identifier</td>\n<td>变量名</td>\n<td>token.emplace_back(token_type::ID,变量名)<br>⚠️重复的变量名不添加</td>\n</tr>\n<tr>\n<td>Keyword</td>\n<td>关键字</td>\n<td>token.emplace_back(token_type::关键字相应的TYPE,关键字字符串)</td>\n</tr>\n<tr>\n<td>Annotation</td>\n<td>注释</td>\n<td>无需生成token，两类注释：<br>1.//···\\n 2./*···*/</td>\n</tr>\n</tbody></table>\n<br>\n\n<hr>\n<h2><span id=\"samplec\">Sample.c</span></h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> abc <span class=\"token operator\">=</span> <span class=\"token number\">0123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token number\">123</span>abc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xxx <span class=\"token operator\">!=</span> yyy<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_do_something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//wow</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xxx <span class=\"token operator\">/</span> yyy <span class=\"token operator\">==</span> zzz<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_hello_world_123</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//haha</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        HAhaHa0000__ <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> hello0 <span class=\"token operator\">=</span><span class=\"token number\">0</span>world<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        i <span class=\"token operator\">=</span> i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*\n        qwertyuiop;\n        HAHAHAHAH;\n        aaaaaaaaaaaaaaaaaa;\n        return 0;\n    */</span>\n    intvoidconstbreakwhilecontinueifelse<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/**/</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n * sdadsdda/*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"本文介绍如何手撕词法分析器，整体来说难度不大，还是文件读取麻烦。 lexer.h#ifndef LEXER_H #define LEXER_H #include &lt;iostream&gt; #include &lt;fstream&gt; #include &lt;vect...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"编译原理","slug":"编译原理","count":7,"path":"api/categories/编译原理.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">lexer.h</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">main.cpp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Tips</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Sample.c</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"<11> Left Factoring","uid":"1a8f64477679eeab68479d654eb4e8ee","slug":"11-Left-Factoring","date":"2022-06-06T15:29:06.000Z","updated":"2022-06-06T16:21:25.701Z","comments":true,"path":"api/articles/11-Left-Factoring.json","keywords":null,"cover":[],"text":"本文实现了一个较为简单的算法——文法的左公因子提取。umm其实也称不上是算法。 我们的目标非常明确，就是将文法产生式的左公因式都提出来，需要注意以下几点： 在一个产生式中需要提取范围最大的公因式，即拥有该左公因式的右部应该尽可能得多 提取左公因子之后会产生新的产生式，该产生式也可...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"编译原理","slug":"编译原理","count":7,"path":"api/categories/编译原理.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"Apply ANN in MNIST","uid":"27d8ddbd7db795b00aa745f14f40ef75","slug":"Apply-ANN-in-MNIST","date":"2022-05-20T03:44:06.000Z","updated":"2022-07-13T16:03:19.229Z","comments":true,"path":"api/articles/Apply-ANN-in-MNIST.json","keywords":null,"cover":null,"text":"看完了3Blue1Brown的神经网络三部曲，感觉眼睛明亮了，内心更通透了，手指控制不住地就开始跳动。 接下来请欣赏寿司神经网络——手写数字集MNIST登场！ import numpy as np import pandas as pd import joblib as jb 激...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"Machine Learning","slug":"Machine-Learning","count":3,"path":"api/categories/Machine-Learning.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"},{"name":"ANN","slug":"ANN","count":1,"path":"api/tags/ANN.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}