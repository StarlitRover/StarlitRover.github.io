{"title":"Lexer（Ver. Hand）","uid":"e7d5cd857c1aa61505680c49d614561a","slug":"Lexer（Ver-Hand）","date":"2022-05-29T16:39:19.000Z","updated":"2022-07-17T16:52:30.380Z","comments":true,"path":"api/articles/Lexer（Ver-Hand）.json","keywords":null,"cover":[],"content":"<p>$\\qquad$本文介绍如何手撕词法分析器，整体来说难度不大，还是文件读取麻烦。</p>\n<img src=\"/images/编译原理/17.png\" style=\"zoom:100%;\">\n\n<span id=\"more\"></span>\n\n<h2><span id=\"lexerh\">lexer.h</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEXER_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEXER_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">token_type</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    INT,</span><br><span class=\"line\">    VOID,</span><br><span class=\"line\">    CONST,</span><br><span class=\"line\">    IF,</span><br><span class=\"line\">    ELSE,</span><br><span class=\"line\">    WHILE,</span><br><span class=\"line\">    BREAK,</span><br><span class=\"line\">    CONTINUE,</span><br><span class=\"line\">    RETURN,</span><br><span class=\"line\">    ID,</span><br><span class=\"line\">    NUM,</span><br><span class=\"line\">    ASSIGN,</span><br><span class=\"line\">    OR,</span><br><span class=\"line\">    AND,</span><br><span class=\"line\">    CMP,</span><br><span class=\"line\">    LPARENT,</span><br><span class=\"line\">    RPARENT,</span><br><span class=\"line\">    LBRACKET,</span><br><span class=\"line\">    RBRACKET,</span><br><span class=\"line\">    LBRACE,</span><br><span class=\"line\">    RBRACE,</span><br><span class=\"line\">    SEMICN,</span><br><span class=\"line\">    COMMA,</span><br><span class=\"line\">    BINOPP,</span><br><span class=\"line\">    PLUSSUB,</span><br><span class=\"line\">    NOT</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;string&gt; token_name =</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;INT\\t\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;VOID\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;CONST\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;IF\\t\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;ELSE\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;WHILE\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;BREAK\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;CONTINUE&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;RETURN\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;ID\\t\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;NUM\\t\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;ASSIGN\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;OR\\t\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;AND\\t\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;CMP\\t\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LPARENT\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;RPARENT\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LBRACKET&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;RBRACKET&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LBRACE\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;RBRACE\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;SEMICN\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;COMMA\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;BINOPP\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;PLUSSUB\\t&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;NOT\\t\\t&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> lineno = <span class=\"number\">1</span>;</span><br><span class=\"line\">vector&lt;pair&lt;token_type, string&gt;&gt; tokens;</span><br><span class=\"line\">string token_str;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isHexDigit</span><span class=\"params\">(<span class=\"type\">char</span> ch)</span>    <span class=\"comment\">//返回是否是16进制的字符，即0~9,a~f,A~F</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;f&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;F&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isIdentifierChar</span><span class=\"params\">(<span class=\"type\">char</span> ch)</span>    <span class=\"comment\">//返回是否是组成标识符的字符</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isalpha</span>(ch) || <span class=\"built_in\">isdigit</span>(ch) || ch == <span class=\"string\">&#x27;_&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// token identifiers</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Number</span><span class=\"params\">(ifstream &amp;fin)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"comment\">//代表是否是非法十六进制、八进制、十进制数</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> isInvalidHex = <span class=\"number\">0</span>, isInvalidOct = <span class=\"number\">0</span>, isInvalidDec = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//第一位的处理，根据0与非0分别考虑</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token_str == <span class=\"string\">&quot;0&quot;</span>)            <span class=\"comment\">//OCT or HEX or ZERO</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> decnum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;x&#x27;</span> || fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;X&#x27;</span>)    <span class=\"comment\">//HEX</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">            token_str += ch;</span><br><span class=\"line\">            <span class=\"type\">bool</span> is0x = <span class=\"number\">1</span>;     <span class=\"comment\">//判断是否是单个的0x，能进入下面的while就证明不是</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"built_in\">isHexDigit</span>(fin.<span class=\"built_in\">peek</span>()))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                is0x = <span class=\"number\">0</span>;</span><br><span class=\"line\">                fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">                token_str += ch;</span><br><span class=\"line\">                decnum &lt;&lt;= <span class=\"number\">4</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(ch))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    decnum += ch - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;f&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    decnum += ch - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    decnum += ch - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">isIdentifierChar</span>(fin.<span class=\"built_in\">peek</span>()) || is0x)<span class=\"comment\">//混入了不是16进制的其它字母</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                isInvalidHex = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                token_str = <span class=\"built_in\">to_string</span>(decnum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fin.<span class=\"built_in\">peek</span>() &gt;= <span class=\"string\">&#x27;1&#x27;</span> &amp;&amp; fin.<span class=\"built_in\">peek</span>() &lt;= <span class=\"string\">&#x27;7&#x27;</span>) <span class=\"comment\">//OCT</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (fin.<span class=\"built_in\">peek</span>() &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; fin.<span class=\"built_in\">peek</span>() &lt;= <span class=\"string\">&#x27;7&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">                token_str += ch;</span><br><span class=\"line\">                decnum &lt;&lt;= <span class=\"number\">3</span>;</span><br><span class=\"line\">                decnum += ch - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">isIdentifierChar</span>(fin.<span class=\"built_in\">peek</span>()))         <span class=\"comment\">//混入了8以上的数字或字母</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                isInvalidOct = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                token_str = <span class=\"built_in\">to_string</span>(decnum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">isIdentifierChar</span>(fin.<span class=\"built_in\">peek</span>()))        <span class=\"comment\">//invalid oct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            isInvalidOct = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>                                        <span class=\"comment\">//ZERO</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            token_str = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>                            <span class=\"comment\">//DEC</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(fin.<span class=\"built_in\">peek</span>()))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">            token_str += ch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isIdentifierChar</span>(fin.<span class=\"built_in\">peek</span>()))    <span class=\"comment\">//混入了字母</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            isInvalidDec = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInvalidHex || isInvalidOct || isInvalidDec) <span class=\"comment\">//是非法数字，就把剩下的字母数字读完</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">isIdentifierChar</span>(fin.<span class=\"built_in\">peek</span>()))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">            token_str += ch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isInvalidHex) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;31mInvalid Hex number at Line %d: %s\\033[0m\\n&quot;</span>, lineno, token_str.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isInvalidOct) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;31mInvalid Oct number at Line %d: %s\\033[0m\\n&quot;</span>, lineno, token_str.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isInvalidDec) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;31mInvalid Dec number at Line %d: %s\\033[0m\\n&quot;</span>, lineno, token_str.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>                                               <span class=\"comment\">//是合法数字，正常返回</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tokens.<span class=\"built_in\">emplace_back</span>(token_type::NUM, token_str);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Identifier</span><span class=\"params\">(ifstream &amp;fin)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    string st;</span><br><span class=\"line\">    st = token_str;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch = fin.<span class=\"built_in\">peek</span>(), (ch &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;z&#x27;</span>) || (ch &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) || ch == <span class=\"string\">&#x27;_&#x27;</span> || ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">        st += ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (st == <span class=\"string\">&quot;int&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tokens.<span class=\"built_in\">emplace_back</span>(INT, st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (st == <span class=\"string\">&quot;void&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tokens.<span class=\"built_in\">emplace_back</span>(VOID, st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (st == <span class=\"string\">&quot;const&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tokens.<span class=\"built_in\">emplace_back</span>(CONST, st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (st == <span class=\"string\">&quot;if&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tokens.<span class=\"built_in\">emplace_back</span>(IF, st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (st == <span class=\"string\">&quot;else&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tokens.<span class=\"built_in\">emplace_back</span>(ELSE, st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (st == <span class=\"string\">&quot;while&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tokens.<span class=\"built_in\">emplace_back</span>(WHILE, st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (st == <span class=\"string\">&quot;break&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tokens.<span class=\"built_in\">emplace_back</span>(BREAK, st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (st == <span class=\"string\">&quot;continue&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tokens.<span class=\"built_in\">emplace_back</span>(CONTINUE, st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (st == <span class=\"string\">&quot;return&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tokens.<span class=\"built_in\">emplace_back</span>(RETURN, st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tokens.<span class=\"built_in\">emplace_back</span>(ID, st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Annotation</span><span class=\"params\">(ifstream &amp;fin)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token_str == <span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (fin.<span class=\"built_in\">peek</span>() != EOF)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++lineno;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;\\n&#x27;</span> || fin.<span class=\"built_in\">peek</span>() == EOF) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> lineno2 = lineno;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (fin.<span class=\"built_in\">peek</span>() != EOF)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;\\n&#x27;</span>) ++lineno;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;*&#x27;</span> &amp;&amp; fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;/&#x27;</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;*&#x27;</span> &amp;&amp; fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;31mUnterminated %s comment at line %d.\\033[0m\\n&quot;</span>, <span class=\"string\">&quot;/*&quot;</span>, lineno2);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">And</span><span class=\"params\">(ifstream &amp;fin)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tokens.<span class=\"built_in\">emplace_back</span>(AND, <span class=\"string\">&quot;&amp;&amp;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;&amp;&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;31mInvalid token \\&quot;&amp;\\&quot; at Line %d: Do you mean \\&quot;&amp;&amp;\\&quot; ?\\033[0m\\n&quot;</span>, lineno);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Or</span><span class=\"params\">(ifstream &amp;fin)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tokens.<span class=\"built_in\">emplace_back</span>(OR, <span class=\"string\">&quot;||&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;|&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;31mInvalid token \\&quot;|\\&quot; at Line %d: Do you mean \\&quot;||\\&quot; ?\\033[0m\\n&quot;</span>, lineno);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//LEXER_H</span></span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"maincpp\">main.cpp</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;lexer.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// read file</span></span><br><span class=\"line\">    ifstream fin;</span><br><span class=\"line\">    fin.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;../sample.c&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fin)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;File not found&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fin.<span class=\"built_in\">get</span>(ch))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        token_str = <span class=\"built_in\">move</span>(<span class=\"built_in\">string</span>(<span class=\"number\">1</span>, ch));</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (ch)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;\\n&#x27;</span>:</span><br><span class=\"line\">                ++lineno;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27; &#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;\\t&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;&#123;&#x27;</span>:</span><br><span class=\"line\">                tokens.<span class=\"built_in\">emplace_back</span>(token_type::LBRACE, <span class=\"string\">&quot;&#123;&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;&#125;&#x27;</span>:</span><br><span class=\"line\">                tokens.<span class=\"built_in\">emplace_back</span>(token_type::RBRACE, <span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;(&#x27;</span>:</span><br><span class=\"line\">                tokens.<span class=\"built_in\">emplace_back</span>(token_type::LPARENT, <span class=\"string\">&quot;(&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;)&#x27;</span>:</span><br><span class=\"line\">                tokens.<span class=\"built_in\">emplace_back</span>(token_type::RPARENT, <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;[&#x27;</span>:</span><br><span class=\"line\">                tokens.<span class=\"built_in\">emplace_back</span>(token_type::LBRACKET, <span class=\"string\">&quot;[&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;]&#x27;</span>:</span><br><span class=\"line\">                tokens.<span class=\"built_in\">emplace_back</span>(token_type::RBRACKET, <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;;&#x27;</span>:</span><br><span class=\"line\">                tokens.<span class=\"built_in\">emplace_back</span>(token_type::SEMICN, <span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;,&#x27;</span>:</span><br><span class=\"line\">                tokens.<span class=\"built_in\">emplace_back</span>(token_type::COMMA, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">                tokens.<span class=\"built_in\">emplace_back</span>(token_type::PLUSSUB, <span class=\"built_in\">string</span>(<span class=\"number\">1</span>, ch));</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;%&#x27;</span>:</span><br><span class=\"line\">                tokens.<span class=\"built_in\">emplace_back</span>(token_type::BINOPP, <span class=\"built_in\">string</span>(<span class=\"number\">1</span>, ch));</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;*&#x27;</span> || fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">                    <span class=\"built_in\">Annotation</span>(fin);</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    tokens.<span class=\"built_in\">emplace_back</span>(token_type::BINOPP, <span class=\"built_in\">string</span>(<span class=\"number\">1</span>, ch));</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;!&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;=&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">                    tokens.<span class=\"built_in\">emplace_back</span>(token_type::CMP, <span class=\"string\">&quot;!=&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    tokens.<span class=\"built_in\">emplace_back</span>(token_type::NOT, <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;&amp;&#x27;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">And</span>(fin);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;|&#x27;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">Or</span>(fin);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;=&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;=&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">                    tokens.<span class=\"built_in\">emplace_back</span>(token_type::CMP, <span class=\"string\">&quot;==&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    tokens.<span class=\"built_in\">emplace_back</span>(token_type::ASSIGN, <span class=\"string\">&quot;=&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;&gt;&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;=&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">                    tokens.<span class=\"built_in\">emplace_back</span>(token_type::CMP, <span class=\"string\">&quot;&gt;=&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    tokens.<span class=\"built_in\">emplace_back</span>(token_type::CMP, <span class=\"string\">&quot;&gt;&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;&lt;&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fin.<span class=\"built_in\">peek</span>() == <span class=\"string\">&#x27;=&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    fin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">                    tokens.<span class=\"built_in\">emplace_back</span>(token_type::CMP, <span class=\"string\">&quot;&lt;=&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    tokens.<span class=\"built_in\">emplace_back</span>(token_type::CMP, <span class=\"string\">&quot;&lt;&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(ch))</span><br><span class=\"line\">                    <span class=\"built_in\">Number</span>(fin);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">isalpha</span>(ch) || ch == <span class=\"string\">&#x27;_&#x27;</span>)</span><br><span class=\"line\">                    <span class=\"built_in\">Identifier</span>(fin);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"built_in\">Annotation</span>(fin))</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;31mUnexpected character \\&quot;%c\\&quot; at Line %d.\\033[0m\\n&quot;</span>, ch, lineno);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t: tokens)</span><br><span class=\"line\">        cout &lt;&lt; token_name[t.first] &lt;&lt; <span class=\"string\">&quot;\\t\\t&quot;</span> &lt;&lt; t.second &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"tips\">Tips</span></h2><ol>\n<li><p><code>fin</code>是一个文件输入流，我们从中读取需要识别的程序代码</p>\n</li>\n<li><p>顶层逻辑是读取当前文件指针指向的字符<code>ch</code>，根据<code>ch</code>用<code>switch</code>分配到各个token识别子函数，用子函数读取一个完整的token（一两个字符的token就不设置函数了）</p>\n</li>\n<li><p>单个和双个字符的token识别已经在顶层中完成，即’\\n’、‘\\t’、空格、所有括号、逗号分号、所有运算符和比较符，可以参照这部分代码 </p>\n</li>\n<li><p>token的数据结构是 <code>vector&lt;pair&lt;token_type,string&gt;&gt;</code>·，其中token_type是一个枚举类型，表示该token的类型；string则是存储该token的内容，一般为其字面值</p>\n</li>\n<li><p>用<code>tokens.emplace_back(TYPE,Str)</code>添加token，参见<code>switch</code>中的语句</p>\n</li>\n<li><p>每个token识别函数都会返回一个<code>bool</code>·值来表明该类型的token是否识别成功，如果识别成功则返回<code>true</code>，并需要将相应的token pair添加到<code>tokens</code>；若识别失败则返回<code>false</code>，并给出相应的错误提示.   </p>\n</li>\n<li><p>错误提示规范：</p>\n<p> <code>printf(“\\033[1;31m【Error Type】 at Line %d：【info】\\033[0m\\n”,lineno);</code></p>\n<p> 【Error Type】是错误类型；【info】是附加信息，可以省略</p>\n</li>\n<li><p>注意如果识别失败，将有两种策略</p>\n<ol>\n<li>将文件读指针退回去：比如说在识别关键字token的函数<code>Keyword(fin)</code>中发现这其实是一个变量名，那么我们需要将文件指针退回到调用函数之前</li>\n<li>将错就错：对于一些很好理解的错误，我们可以直接帮他进行修复，比如说读入一个’&amp;’结果发现下一个字符不是’&amp;’，很明显是用户少打了，那么我们依然可以采取<code>tokens.emplace_back(AND, &quot;&amp;&amp;&quot;);</code>，并给出错误提示“Do you mean “&amp;&amp;” ?”（<code>And</code>和<code>Or</code>函数采用的就是这个策略）</li>\n</ol>\n</li>\n<li><p>token识别函数可以参照 <code>bool And(ifstream &amp;fin)</code>和<code>bool Or(ifstream &amp;fin)</code></p>\n</li>\n<li><p>需要在本地运行时，只需在main.cpp同目录下创建sample.c即可</p>\n</li>\n<li><p>每个token识别函数的形参都是文件输入流变量<code>fin</code>的引用，主要使用<code>fin</code>的以下三个函数</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fin.get(ch)</td>\n<td>获取文件的下一个字符给ch，并将文件读指针往下移动一位</td>\n</tr>\n<tr>\n<td>ch&#x3D;fin.peek()</td>\n<td>获取文件的下一个字符给ch，但不移动文件读指针（peek v. 窥视；窥见）</td>\n</tr>\n<tr>\n<td>fin.seekg(-k, ios::cur)</td>\n<td>将文件读指针回退k位，一般用于读入一连串字符后发现识别失败，那么需要将文件指针退回去</td>\n</tr>\n</tbody></table>\n<ol start=\"12\">\n<li>几个全局变量及其含义</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>全局变量</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>token_name</td>\n<td>通过token_name[token_type] 可以获取token_type的字面字符串（因为枚举类型的本质是整数）</td>\n</tr>\n<tr>\n<td>lineno</td>\n<td>当前文件读指针的行数，报错时需要显示</td>\n</tr>\n<tr>\n<td>tokens</td>\n<td>存取所有token pair的vector</td>\n</tr>\n<tr>\n<td>token_str</td>\n<td>存取当前token的字符串值，一方面根据该变量的长度可以确定回退位数，另一方面作为token的内容 <br>  ⚠️读入的第一个字符会存在这个变量中</td>\n</tr>\n</tbody></table>\n<ol start=\"13\">\n<li>实现的token识别函数</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>识别对象</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Number</td>\n<td>八进制、十进制、十六进制</td>\n<td>token.emplace_back(token_type::NUM,转成十进制数值后的字符串)<br>需要具备识别非法数值的能力</td>\n</tr>\n<tr>\n<td>Identifier</td>\n<td>变量名</td>\n<td>token.emplace_back(token_type::ID,变量名)<br>⚠️重复的变量名不添加</td>\n</tr>\n<tr>\n<td>Keyword</td>\n<td>关键字</td>\n<td>token.emplace_back(token_type::关键字相应的TYPE,关键字字符串)</td>\n</tr>\n<tr>\n<td>Annotation</td>\n<td>注释</td>\n<td>无需生成token，两类注释：<br>1.&#x2F;&#x2F;···\\n 2.&#x2F;*···*&#x2F;</td>\n</tr>\n</tbody></table>\n<br>\n\n<hr>\n<h2><span id=\"samplec\">Sample.c</span></h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> abc = <span class=\"number\">0123</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"number\">123</span>abc;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xxx != yyy)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _do_something(); <span class=\"comment\">//wow</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(xxx / yyy == zzz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _hello_world_123() <span class=\"comment\">//haha</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        HAhaHa0000__ = <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> hello0 =<span class=\"number\">0</span>world;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i = i<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">0</span>+<span class=\"number\">1</span>==<span class=\"number\">2</span>)    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        qwertyuiop;</span></span><br><span class=\"line\"><span class=\"comment\">        HAHAHAHAH;</span></span><br><span class=\"line\"><span class=\"comment\">        aaaaaaaaaaaaaaaaaa;</span></span><br><span class=\"line\"><span class=\"comment\">        return 0;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    intvoidconstbreakwhilecontinueifelse;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0xff</span>; <span class=\"comment\">/**/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * sdadsdda/*/</span></span><br></pre></td></tr></table></figure>","text":"$\\qquad$本文介绍如何手撕词法分析器，整体来说难度不大，还是文件读取麻烦。 lexer.h12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"编译原理","slug":"编译原理","count":7,"path":"api/categories/编译原理.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">lexer.h</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">main.cpp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Tips</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Sample.c</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"<11> Left Factoring","uid":"1a8f64477679eeab68479d654eb4e8ee","slug":"11-Left-Factoring","date":"2022-06-06T15:29:06.000Z","updated":"2022-06-06T16:21:25.701Z","comments":true,"path":"api/articles/11-Left-Factoring.json","keywords":null,"cover":[],"text":"$\\qquad$本文实现了一个较为简单的算法——文法的左公因子提取。umm其实也称不上是算法。 $\\qquad$我们的目标非常明确，就是将文法产生式的左公因式都提出来，需要注意以下几点： 在一个产生式中需要提取范围最大的公因式，即拥有该左公因式的右部应该尽可能得多 提取左公因子之...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"编译原理","slug":"编译原理","count":7,"path":"api/categories/编译原理.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"Apply ANN in MNIST","uid":"27d8ddbd7db795b00aa745f14f40ef75","slug":"Apply-ANN-in-MNIST","date":"2022-05-20T03:44:06.000Z","updated":"2022-07-13T16:03:19.229Z","comments":true,"path":"api/articles/Apply-ANN-in-MNIST.json","keywords":null,"cover":null,"text":"$\\qquad$看完了3Blue1Brown的神经网络三部曲，感觉眼睛明亮了，内心更通透了，手指控制不住地就开始跳动。 $\\qquad$接下来请欣赏寿司神经网络——手写数字集MNIST登场！ 123import numpy as npimport pandas as pdimpo...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"Machine Learning","slug":"Machine-Learning","count":3,"path":"api/categories/Machine-Learning.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"},{"name":"ANN","slug":"ANN","count":1,"path":"api/tags/ANN.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}