{"title":"「1077」Kuchiguse","uid":"fd5509f1a9c73776f2474d74cf48b6da","slug":"「1077」Kuchiguse","date":"2022-10-08T08:39:36.000Z","updated":"2022-10-08T08:53:54.082Z","comments":true,"path":"api/articles/「1077」Kuchiguse.json","keywords":null,"cover":null,"content":"<p>The Japanese language is notorious for its sentence ending particles. Personal preference of such particles can be considered as a reflection of the speaker’s personality. Such a preference is called “Kuchiguse” and is often exaggerated artistically in Anime and Manga. For example, the artificial sentence ending particle “nyan~” is often used as a stereotype for characters with a cat-like personality:</p>\n<ul>\n<li><p>Itai nyan~ (It hurts, nyan~)</p>\n</li>\n<li><p>Ninjin wa iyada nyan~ (I hate carrots, nyan~)</p>\n</li>\n</ul>\n<p>Now given a few lines spoken by the same character, can you find her Kuchiguse?</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line is an integer N (2≤N≤100). Following are N file lines of 0~256 (inclusive) characters in length, each representing a character’s spoken line. The spoken lines are case sensitive.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in one line the kuchiguse of the character, i.e., the longest common suffix of all N lines. If there is no such suffix, write <code>nai</code>.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">Itai nyan~</span><br><span class=\"line\">Ninjin wa iyadanyan~</span><br><span class=\"line\">uhhh nyan~</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nyan~</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">Itai!</span><br><span class=\"line\">Ninjinnwaiyada T_T</span><br><span class=\"line\">T_T</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nai</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$寻找最长公共后缀，无则输出“nai”。</p>\n<p>$\\qquad$最简单的想法就是先把所有句子存到一个vector里，然后一起从后往前数。</p>\n<p>$\\qquad$事实上不需要这么麻烦，只要每次读入一个新句子后和当前公共后缀从后至前进行比较，然后存取新的公共后缀。当然嫌从后往前麻烦，就把他们都reverse一下。</p>\n<p>$\\qquad$⚠️使用getline时注意上一行是否读完，包括’\\n’（需要getchar一下）。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    string ans, tmp;</span><br><span class=\"line\">    <span class=\"built_in\">getchar</span>(); <span class=\"comment\">//get &#x27;\\n&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(cin, ans);</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(ans.<span class=\"built_in\">begin</span>(), ans.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin, tmp);</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(tmp.<span class=\"built_in\">begin</span>(), tmp.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; <span class=\"built_in\">min</span>(ans.<span class=\"built_in\">size</span>(), tmp.<span class=\"built_in\">size</span>()); ++k)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ans[k] != tmp[k])</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        ans = ans.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(ans.<span class=\"built_in\">begin</span>(), ans.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    cout &lt;&lt; (ans.<span class=\"built_in\">empty</span>() ? <span class=\"string\">&quot;nai&quot;</span> : ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"The Japanese language is notorious for its sentence ending particles. Personal preference of such particles can be considered as a reflectio...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"reverse","slug":"reverse","count":4,"path":"api/tags/reverse.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1078」Hashing","uid":"c2d476bf277e1b89715673299c98c76c","slug":"「1078」Hashing","date":"2022-10-08T10:51:59.000Z","updated":"2022-10-17T04:09:10.412Z","comments":true,"path":"api/articles/「1078」Hashing.json","keywords":null,"cover":null,"text":"The task of this problem is simple: insert a sequence of distinct positive integers into a hash table, and output the positions of the input...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"hash","slug":"hash","count":2,"path":"api/tags/hash.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1076」Forwards on Weibo","uid":"bdaf6b5d6e486b0211610bff2d92703a","slug":"「1076」Forwards-on-Weibo","date":"2022-10-06T14:08:39.000Z","updated":"2022-10-08T08:41:43.916Z","comments":true,"path":"api/articles/「1076」Forwards-on-Weibo.json","keywords":null,"cover":null,"text":"Weibo is known as the Chinese version of Twitter. One user on Weibo may have many followers, and may follow many other users as well. Hence ...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"BFS","slug":"BFS","count":10,"path":"api/tags/BFS.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}