{"title":"「1102」Invert a Binary Tree","uid":"11aaeea099b9cb0ef7fb12c65a5510db","slug":"「1102」Invert-a-Binary-Tree","date":"2022-10-29T12:36:57.000Z","updated":"2022-10-29T12:42:25.841Z","comments":true,"path":"api/articles/「1102」Invert-a-Binary-Tree.json","keywords":null,"cover":null,"content":"<p>The following is from Max Howell @twitter:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Google: 90% of our engineers use the software you wrote (Homebrew), but you can&#x27;t invert a binary tree on a whiteboard so fuck off.</span><br></pre></td></tr></table></figure>\n\n<p>Now it’s your turn to prove that YOU CAN invert a binary tree!</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤10) which is the total number of nodes in the tree – and hence the nodes are numbered from 0 to N−1. Then N lines follow, each corresponds to a node from 0 to N−1, and gives the indices of the left and right children of the node. If the child does not exist, a <code>-</code> will be put at the position. Any pair of children are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in the first line the level-order, and then in the second line the in-order traversal sequences of the inverted tree. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br><span class=\"line\">1 -</span><br><span class=\"line\">- -</span><br><span class=\"line\">0 -</span><br><span class=\"line\">2 7</span><br><span class=\"line\">- -</span><br><span class=\"line\">- -</span><br><span class=\"line\">5 -</span><br><span class=\"line\">4 6</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 7 2 6 4 0 5 1</span><br><span class=\"line\">6 5 7 4 3 2 0 1</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$输出反转二叉树的层次和中序遍历。</p>\n<p>$\\qquad$没什么难度，就是把二叉树的左右节点都互换一下。</p>\n<p>$\\qquad$根节点的确定只要看哪个节点没父节点即可。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; son;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; in;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">in_order</span><span class=\"params\">(<span class=\"type\">int</span> root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">in_order</span>(son[root].second);</span><br><span class=\"line\">    in.<span class=\"built_in\">push_back</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">in_order</span>(son[root].first);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    son.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    string l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> root = (n - <span class=\"number\">1</span>) * n / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: son)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">        k.first = (l == <span class=\"string\">&quot;-&quot;</span> ? <span class=\"number\">-1</span> : (root -= <span class=\"built_in\">stoi</span>(l), <span class=\"built_in\">stoi</span>(l)));</span><br><span class=\"line\">        k.second = (r == <span class=\"string\">&quot;-&quot;</span> ? <span class=\"number\">-1</span> : (root -= <span class=\"built_in\">stoi</span>(r), <span class=\"built_in\">stoi</span>(r)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; root;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; crt&#123;<span class=\"number\">3</span>&#125;, nxt;</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> k: crt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (son[k].first != <span class=\"number\">-1</span>) nxt.<span class=\"built_in\">push_back</span>(son[k].first);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (son[k].second != <span class=\"number\">-1</span>) nxt.<span class=\"built_in\">push_back</span>(son[k].second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"built_in\">int</span>(nxt.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>); i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; nxt[i];</span><br><span class=\"line\">        crt = std::<span class=\"built_in\">move</span>(nxt);</span><br><span class=\"line\">        nxt = <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!crt.<span class=\"built_in\">empty</span>());</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">in_order</span>(root);</span><br><span class=\"line\">    cout &lt;&lt; in[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; in[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"The following is from Max Howell @twitter: 1Google: 90% of our engineers use the software you wrote (Homebrew), but you can&#x27;t invert a ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"BFS","slug":"BFS","count":10,"path":"api/tags/BFS.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1103」Integer Factorization","uid":"4ef3e4e200e4b84799be544dd9cdda17","slug":"「1103」Integer-Factorization","date":"2022-11-02T02:26:51.000Z","updated":"2022-11-02T10:51:26.112Z","comments":true,"path":"api/articles/「1103」Integer-Factorization.json","keywords":null,"cover":null,"text":"The K−P factorization of a positive integer N is to write N as the sum of the P-th power of K positive integers. You are supposed to write a...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1101」Quick Sort","uid":"4d3cc8d027fb9a0d2261e74e193155cc","slug":"「1101」Quick-Sort","date":"2022-10-29T09:44:37.000Z","updated":"2022-10-29T10:02:13.042Z","comments":true,"path":"api/articles/「1101」Quick-Sort.json","keywords":null,"cover":null,"text":"There is a classical process named partition in the famous quick sort algorithm. In this process we typically choose one element as the pivo...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}