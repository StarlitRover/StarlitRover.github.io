{"title":"「1107」Social Clusters","uid":"c00bb795d937e8dc21c5c90e4285b807","slug":"「1107」Social-Clusters","date":"2022-11-10T10:09:22.000Z","updated":"2022-11-10T10:43:39.805Z","comments":true,"path":"api/articles/「1107」Social-Clusters.json","keywords":null,"cover":null,"content":"<p>When register on a social network, you are always asked to specify your hobbies in order to find some potential friends with the same hobbies. A <strong>social cluster</strong> is a set of people who have some of their hobbies in common. You are supposed to find all the clusters.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each test case, the first line contains a positive integer $N (≤1000)$, the total number of people in a social network. Hence the people are numbered from 1 to N. Then N lines follow, each gives the hobby list of a person in the format:</p>\n<p>$K_i​:\\ h_i​[1]\\ h_i​[2]\\ …\\ h_i​[K_i​]$</p>\n<p>where $K_i​ (&gt;0)$ is the number of hobbies, and $h_i​[j]$ is the index of the j-th hobby, which is an integer in [1, 1000].</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each case, print in one line the total number of clusters in the network. Then in the second line, print the numbers of people in the clusters in non-increasing order. The numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br><span class=\"line\">3: 2 7 10</span><br><span class=\"line\">1: 4</span><br><span class=\"line\">2: 5 3</span><br><span class=\"line\">1: 4</span><br><span class=\"line\">1: 3</span><br><span class=\"line\">1: 4</span><br><span class=\"line\">4: 6 8 1 5</span><br><span class=\"line\">1: 4</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">4 3 1</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$请你将一群人划分为几个没有爱好交集的群体，爱好用编号给出。</p>\n<p>$\\qquad$一开始没有用并查集，直接的想法是对爱好进行分组，即让每个爱好指向一个分组编号，如果一个人有着不同分组内的爱好，那么就把不同分组的统计量全部加到一个组上，然后将所有出现的爱好指向这个组。乍一看没啥问题，但在将一个爱好的分组指向重定向时，本来同属于一个组的爱好还是指向原来的组，事实上这个组已经被合并到新的组去了，我们不应再用这个组去统计人数了，结果后面有这些爱好的人还是会被统计到原来的组去。</p>\n<p>$\\qquad$并查集就是给每个爱好都设置一个父节点，父节点就是自己的节点R可以认为是一个组织的头头，所有祖宗节点（不断溯源父节点的结果）为R的节点被认为是属于R组织。基于这样一个想法，我们首先读入一个人的所有爱好，然后选取第一个爱好所在组织的头头（没有组织的话就是自己）为合并组织的头头，然后将其余爱好所在其他组织的头头都合并到这个头头上来，同时将先前统计的人数也进行合并，被合并头头的统计数量归0。</p>\n<p>$\\qquad$这样可以保证最后统计量非零的一定都是头头，而且所有统计量一定都汇总到了头头那。因为每次统计量都必然会被转移到当前头头处，如果说以后这个头头被合并了那么这个统计量会一起转移。简单点说，就是每次统计量都是位于该时刻的头头们处，那么最后也是一样。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, k;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dad</span><span class=\"params\">(<span class=\"number\">1001</span>)</span>, <span class=\"title\">num</span><span class=\"params\">(<span class=\"number\">1001</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">iota</span>(dad.<span class=\"built_in\">begin</span>(), dad.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d: &quot;</span>, &amp;m);</span><br><span class=\"line\">        cin &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"type\">int</span> r = dad[k], s;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r != dad[r]) r = dad[r];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; m; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; k;</span><br><span class=\"line\">            s = dad[k];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (s != dad[s]) s = dad[s];</span><br><span class=\"line\">            num[r] += num[s], num[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dad[s] = dad[k] = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num[r] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(num.<span class=\"built_in\">begin</span>(), num.<span class=\"built_in\">end</span>(), greater&lt;&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> tail = <span class=\"built_in\">find</span>(num.<span class=\"built_in\">begin</span>(), num.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    cout &lt;&lt; (tail - num.<span class=\"built_in\">begin</span>()) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; *num.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = num.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>; it != tail; ++it)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *it;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"When register on a social network, you are always asked to specify your hobbies in order to find some potential friends with the same hobbie...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"并查集","slug":"并查集","count":4,"path":"api/tags/并查集.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1108」Finding Average","uid":"80283fa8bfdc49e4840f7226c64452a7","slug":"「1108」Finding-Average","date":"2022-11-12T13:58:13.000Z","updated":"2022-11-12T14:27:03.053Z","comments":true,"path":"api/articles/「1108」Finding-Average.json","keywords":null,"cover":null,"text":"The basic task is simple: given N real numbers, you are supposed to calculate their average. But what makes it complicated is that some of t...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1106」Lowest Price in Supply Chain","uid":"9241d85f7d3a9c013c622065a01dc5ab","slug":"「1106」Lowest-Price-in-Supply-Chain","date":"2022-11-10T06:44:17.000Z","updated":"2022-11-10T06:54:51.994Z","comments":true,"path":"api/articles/「1106」Lowest-Price-in-Supply-Chain.json","keywords":null,"cover":null,"text":"A supply chain is a network of retailers（零售商）, distributors（经销商）, and suppliers（供应商）– everyone involved in moving a product from supplier to...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"BFS","slug":"BFS","count":10,"path":"api/tags/BFS.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}