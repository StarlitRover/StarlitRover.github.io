{"title":"「1016」Phone Bills","uid":"4cf831a9ea6bfd5b5d2bee7ee829301b","slug":"1016-Phone-Bills","date":"2022-04-04T03:35:13.000Z","updated":"2022-04-04T04:58:35.193Z","comments":true,"path":"api/articles/1016-Phone-Bills.json","keywords":null,"cover":[],"content":"<p>➳<a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805493648703488\">ENTRY</a></p>\n<p>$\\qquad$A long-distance telephone company charges its customers by the following rules:</p>\n<p>$\\qquad$Making a long-distance call costs a certain amount per minute, depending on the time of day when the call is made. When a customer starts connecting a long-distance call, the time will be recorded, and so will be the time when the customer hangs up the phone. Every calendar month, a bill is sent to the customer for each minute called (at a rate determined by the time of day). Your job is to prepare the bills for each month, given a set of phone call records.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>$\\qquad$Each input file contains one test case. Each case has two parts: the rate structure, and the phone call records.</p>\n<p>$\\qquad$The rate structure consists of a line with 24 non-negative integers denoting the toll (cents&#x2F;minute) from 00:00 - 01:00, the toll from 01:00 - 02:00, and so on for each hour in the day.</p>\n<p>$\\qquad$The next line contains a positive number <em>N</em> (≤1000), followed by <em>N</em> lines of records. Each phone call record consists of the name of the customer (string of up to 20 characters without space), the time and date (<code>MM:dd:HH:mm</code>), and the word <code>on-line</code> or <code>off-line</code>.</p>\n<p>$\\qquad$For each test case, all dates will be within a single month. Each <code>on-line</code> record is paired with the chronologically next record for the same customer provided it is an <code>off-line</code> record. Any <code>on-line</code> records that are not paired with an <code>off-line</code> record are ignored, as are <code>off-line</code> records not paired with an <code>on-line</code> record. It is guaranteed that at least one call is well paired in the input. You may assume that no two records for the same customer have the same time. Times are recorded using a 24-hour clock.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>$\\qquad$For each test case, you must print a phone bill for each customer.</p>\n<p>$\\qquad$Bills must be printed in alphabetical order of customers’ names. For each customer, first print in a line the name of the customer and the month of the bill in the format shown by the sample. Then for each time period of a call, print in one line the beginning and ending time and date (<code>dd:HH:mm</code>), the lasting time (in minute) and the charge of the call. The calls must be listed in chronological order. Finally, print the total charge for the month in the format shown by the sample.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 10 10 10 10 10 20 20 20 15 15 15 15 15 15 15 20 30 20 15 15 10 10 10</span><br><span class=\"line\">10</span><br><span class=\"line\">CYLL 01:01:06:01 on-line</span><br><span class=\"line\">CYLL 01:28:16:05 off-line</span><br><span class=\"line\">CYJJ 01:01:07:00 off-line</span><br><span class=\"line\">CYLL 01:01:08:03 off-line</span><br><span class=\"line\">CYJJ 01:01:05:59 on-line</span><br><span class=\"line\">aaa 01:01:01:03 on-line</span><br><span class=\"line\">aaa 01:02:00:01 on-line</span><br><span class=\"line\">CYLL 01:28:15:41 on-line</span><br><span class=\"line\">aaa 01:05:02:24 on-line</span><br><span class=\"line\">aaa 01:04:23:59 off-line</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CYJJ 01</span><br><span class=\"line\">01:05:59 01:07:00 61 $12.10</span><br><span class=\"line\">Total amount: $12.10</span><br><span class=\"line\">CYLL 01</span><br><span class=\"line\">01:06:01 01:08:03 122 $24.40</span><br><span class=\"line\">28:15:41 28:16:05 24 $3.85</span><br><span class=\"line\">Total amount: $28.25</span><br><span class=\"line\">aaa 01</span><br><span class=\"line\">02:00:01 04:23:59 4318 $638.80</span><br><span class=\"line\">Total amount: $638.80</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$有一阵子没码题目了，感觉脑子和手都生锈了。用这道题来复健着实折磨。</p>\n<p>$\\qquad$极简翻译：首先给出每小时内通话的收费标准（美分&#x2F;min）。然后给出同一月内不同用户的通话记录，通话记录的状态包括<code>on-line</code>和<code>off-line</code>，然而对于一个用户而言两者也并非完全匹配，那么就需要找出每个用户所有匹配的通话记录对，最后按字母顺序依次输出本月内每个用户（按时间顺序）的所有匹配记录对，以及每一对相应的时长（min）与收费（$），最后输出该用户在本月的总收费。</p>\n<img src=\"/images/PTA-数据结构与算法题目集/7-46/bye.png\" style=\"zoom:70%;\">\n\n<p>$\\qquad$脑袋隐隐作痛，有几个棘手的地方：</p>\n<ol>\n<li>同一个用户通话记录的匹配</li>\n<li>一次通话的费用计算</li>\n<li>用户名字和通话记录都要按顺序输出</li>\n</ol>\n<p>$\\qquad$首先定义了一个日期类，包含了时间的日时分，以及记录的状态和是否已匹配，同时重载了&lt;，&lt;&lt;运算符，实现了换算成分钟的<code>minutes()</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">date</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> d, h, m;</span><br><span class=\"line\">    <span class=\"type\">bool</span> isOnline, isPaired = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> date &amp;rhs) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">minutes</span>() &lt; rhs.<span class=\"built_in\">minutes</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minutes</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;d * <span class=\"number\">1440</span> + <span class=\"keyword\">this</span>-&gt;h * <span class=\"number\">60</span> + <span class=\"keyword\">this</span>-&gt;m; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">friend</span> ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;os, <span class=\"type\">const</span> date &amp;t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02d:%02d:%02d&quot;</span>, t.d, t.h, t.m);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> os;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">date</span>(<span class=\"type\">int</span> _d = <span class=\"number\">-1</span>, <span class=\"type\">int</span> _h = <span class=\"number\">-1</span>, <span class=\"type\">int</span> _m = <span class=\"number\">-1</span>, <span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>) : <span class=\"built_in\">d</span>(_d), <span class=\"built_in\">h</span>(_h), <span class=\"built_in\">m</span>(_m), <span class=\"built_in\">isOnline</span>(flag) &#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$这里我用<code>set&lt;date&gt;</code>容器来存储一个用户的通话记录，由于我重载了date的&lt;，因此会自动按照时间先后进行存储，而用户与其通话记录集合则用<code>map&lt;string,set&lt;date&gt;&gt;</code>记录，<code>map</code>会自动按照名字顺序排序。</p>\n<p>$\\qquad$匹配的要求感觉题目说的不是很清楚，简单地说，只有同一个用户在相邻时间点（之间没有其他记录）的<code>on-line</code>和<code>off-line</code>可以匹配成功，其余无法匹配的记录直接忽略。那么我在遍历集合的时候，遇到<code>on-line</code>就保留其时间，遇到<code>off-line</code>就检查保留的<code>on-line</code>记录是否已匹配，未匹配就计算相应费用，并标记匹配变量。</p>\n<p>$\\qquad$计算费用我是直接分类计算，<code>on-line</code>和<code>off-line</code>的当天单独计算，中间的天数直接乘以通话一天的总费用（⚠️这样计算的话还需要单独考虑同一天内，以及<strong>同一天同一小时内</strong>的通话记录）。还有一种方法是先分别计算两个状态从<code>00:00:00</code>开始的费用，然后直接相减，就不需要考虑这么多了。事实上，这个思路适用所有涉及到时间的计算。</p>\n<hr>\n<h2><span id=\"cde\">C☺DE</span></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">toll</span><span class=\"params\">(<span class=\"number\">25</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">date</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> d, h, m;</span><br><span class=\"line\">    <span class=\"type\">bool</span> isOnline, isPaired = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> date &amp;rhs) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">minutes</span>() &lt; rhs.<span class=\"built_in\">minutes</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minutes</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;d * <span class=\"number\">1440</span> + <span class=\"keyword\">this</span>-&gt;h * <span class=\"number\">60</span> + <span class=\"keyword\">this</span>-&gt;m; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">friend</span> ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;os, <span class=\"type\">const</span> date &amp;t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02d:%02d:%02d&quot;</span>, t.d, t.h, t.m);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> os;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">date</span>(<span class=\"type\">int</span> _d = <span class=\"number\">-1</span>, <span class=\"type\">int</span> _h = <span class=\"number\">-1</span>, <span class=\"type\">int</span> _m = <span class=\"number\">-1</span>, <span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>) : <span class=\"built_in\">d</span>(_d), <span class=\"built_in\">h</span>(_h), <span class=\"built_in\">m</span>(_m), <span class=\"built_in\">isOnline</span>(flag) &#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">cost</span><span class=\"params\">(<span class=\"type\">const</span> date &amp;on, <span class=\"type\">const</span> date &amp;off)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (on.d == off.d &amp;&amp; on.h == off.h)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (off.m - on.m) * toll[on.h] / <span class=\"number\">100.0</span>;</span><br><span class=\"line\">    <span class=\"type\">float</span> sum = (<span class=\"number\">60</span> - on.m) * toll[on.h] + off.m * toll[off.h];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (on.d &lt; off.d)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = on.h + <span class=\"number\">1</span>; i &lt; <span class=\"number\">24</span>; ++i)</span><br><span class=\"line\">            sum += <span class=\"number\">60</span> * toll[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; off.h; ++i)</span><br><span class=\"line\">            sum += <span class=\"number\">60</span> * toll[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = on.h + <span class=\"number\">1</span>; i &lt; off.h; ++i)</span><br><span class=\"line\">            sum += <span class=\"number\">60</span> * toll[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = on.d + <span class=\"number\">1</span>; i &lt; off.d; ++i)</span><br><span class=\"line\">        sum += <span class=\"number\">60</span> * toll[<span class=\"number\">24</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum / <span class=\"number\">100.0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">24</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; toll[i];</span><br><span class=\"line\">        toll[<span class=\"number\">24</span>] += toll[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, M, d, h, m;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    string name, flag;</span><br><span class=\"line\">    map&lt;string, set&lt;date&gt;&gt; record;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; name;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d:%d:%d:%d&quot;</span>, &amp;M, &amp;d, &amp;h, &amp;m);</span><br><span class=\"line\">        cin &gt;&gt; flag;</span><br><span class=\"line\">        record[name].<span class=\"built_in\">emplace</span>(d, h, m, (flag == <span class=\"string\">&quot;on-line&quot;</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;r: record)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name = r.first;</span><br><span class=\"line\">        <span class=\"type\">float</span> money = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        date pre_online;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: r.second)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k.isOnline)</span><br><span class=\"line\">                pre_online = k;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!pre_online.isPaired &amp;&amp; pre_online.d != <span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sum == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %02d\\n&quot;</span>, name.<span class=\"built_in\">c_str</span>(), M);</span><br><span class=\"line\">                money = <span class=\"built_in\">cost</span>(pre_online, k);</span><br><span class=\"line\">                pre_online.isPaired = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                cout &lt;&lt; pre_online &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; k &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; (k.<span class=\"built_in\">minutes</span>() - pre_online.<span class=\"built_in\">minutes</span>());</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; $%.2f\\n&quot;</span>, money);</span><br><span class=\"line\">                sum += money;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Total amount: $%.2f\\n&quot;</span>, sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"σ-notes\">Σ Notes</span></h2><ol>\n<li>$1&#x3D;100美分，&#x2F;100.0！</li>\n<li>如果一个用户一对匹配的通话记录都没有，那么就无需输出</li>\n<li><code>toll[24]</code>存放的是通话一天的收费标准（美分&#x2F;min）</li>\n<li>测试点说明：0-Sample，1、2-不要输出没有费用的用户，3-含有同一天同一小时内的通话记录</li>\n</ol>\n","text":"➳ENTRY $\\qquad$A long-distance telephone company charges its customers by the following rules: $\\qquad$Making a long-distance call costs a c...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C☺DE</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Σ Notes</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1017」Queueing at Bank","uid":"f28bb9815d595dfd2f2742951bf93359","slug":"1017-Queueing-at-Bank","date":"2022-04-08T05:03:29.000Z","updated":"2022-07-04T03:49:11.938Z","comments":true,"path":"api/articles/1017-Queueing-at-Bank.json","keywords":null,"cover":null,"text":"➳ENTRY $\\qquad$Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area ...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"pair","slug":"pair","count":6,"path":"api/tags/pair.json"},{"name":"vector","slug":"vector","count":17,"path":"api/tags/vector.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「Section 8」控制器","uid":"9c235338e8419467c57a9cf3dae4161a","slug":"控制器","date":"2022-04-02T11:10:12.000Z","updated":"2022-04-02T13:25:16.028Z","comments":true,"path":"api/articles/控制器.json","keywords":null,"cover":[],"text":" 控制器是整个计算机的指挥中心，协调计算机的各部件进行工作。其实质工作就是解释程序，每次从存储器中读取一条指令，经过分析译码产生一串操作命令，再发给各功能部件，控制各部件的动作，以实现指令和程序的功能。（取指令→分析指令→执行指令→取指令） 总线（bus） 构成 AB（单向）：地...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"计算机组成原理","slug":"计算机组成原理","count":8,"path":"api/categories/计算机组成原理.json"}],"tags":[{"name":"notes","slug":"notes","count":13,"path":"api/tags/notes.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}