{"title":"「1095」Cars on Campus","uid":"ba694c9323b17ea3ea3e3b2ebd47bf82","slug":"「1095」Cars-on-Campus","date":"2022-10-25T03:42:18.000Z","updated":"2022-10-25T04:12:50.272Z","comments":true,"path":"api/articles/「1095」Cars-on-Campus.json","keywords":null,"cover":null,"content":"<p>Zhejiang University has 8 campuses and a lot of gates. From each gate we can collect the in&#x2F;out times and the plate numbers of the cars crossing the gate. Now with all the information available, you are supposed to tell, at any specific time point, the number of cars parking on campus, and at the end of the day find the cars that have parked for the longest time period.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. Each case starts with two positive integers $N (≤10^4)$, the number of records, and $K (≤8×10^4)$ the number of queries. Then N lines follow, each gives a record in the format:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plate_number hh:mm:ss status</span><br></pre></td></tr></table></figure>\n\n<p>where <code>plate_number</code> is a string of 7 English capital letters or 1-digit numbers; <code>hh:mm:ss</code> represents the time point in a day by hour:minute:second, with the earliest time being <code>00:00:00</code> and the latest <code>23:59:59</code>; and <code>status</code> is either <code>in</code> or <code>out</code>.</p>\n<p>Note that all times will be within a single day. Each <code>in</code> record is paired with the chronologically next record for the same car provided it is an <code>out</code> record. Any <code>in</code> records that are not paired with an <code>out</code> record are ignored, as are <code>out</code> records not paired with an <code>in</code> record. It is guaranteed that at least one car is well paired in the input, and no car is both <code>in</code> and <code>out</code> at the same moment. Times are recorded using a 24-hour clock.</p>\n<p>Then K lines of queries follow, each gives a time point in the format <code>hh:mm:ss</code>. Note: the queries are given in <strong>ascending</strong> order of the times.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each query, output in a line the total number of cars parking on campus. The last line of output is supposed to give the plate number of the car that has parked for the longest time period, and the corresponding time length. If such a car is not unique, then output all of their plate numbers in a line in alphabetical order, separated by a space.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">16 7</span><br><span class=\"line\">JH007BD 18:00:01 in</span><br><span class=\"line\">ZD00001 11:30:08 out</span><br><span class=\"line\">DB8888A 13:00:00 out</span><br><span class=\"line\">ZA3Q625 23:59:50 out</span><br><span class=\"line\">ZA133CH 10:23:00 in</span><br><span class=\"line\">ZD00001 04:09:59 in</span><br><span class=\"line\">JH007BD 05:09:59 in</span><br><span class=\"line\">ZA3Q625 11:42:01 out</span><br><span class=\"line\">JH007BD 05:10:33 in</span><br><span class=\"line\">ZA3Q625 06:30:50 in</span><br><span class=\"line\">JH007BD 12:23:42 out</span><br><span class=\"line\">ZA3Q625 23:55:00 in</span><br><span class=\"line\">JH007BD 12:24:23 out</span><br><span class=\"line\">ZA133CH 17:11:22 out</span><br><span class=\"line\">JH007BD 18:07:01 out</span><br><span class=\"line\">DB8888A 06:30:50 in</span><br><span class=\"line\">05:10:00</span><br><span class=\"line\">06:30:50</span><br><span class=\"line\">11:00:00</span><br><span class=\"line\">12:23:42</span><br><span class=\"line\">14:00:00</span><br><span class=\"line\">18:00:00</span><br><span class=\"line\">23:59:00</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">JH007BD ZD00001 07:20:09</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$给浙大停车场写个计数统计小程序。给出N条汽车进出记录，然后对K个时间点输出当前停车场内的汽车数量，最后输出当天内停车时间最长的所有车牌号，以及相应的停车时间。妈妈再也不用担心我进浙大啦～浙大保安：我用脚趾头都数得出来，抢我饭碗，滚</p>\n<p>$\\qquad$首先有以下几个注意点：</p>\n<ol>\n<li><p>一辆车一天内可能有多次进出记录</p>\n</li>\n<li><p>进出记录只有在时间轴上相邻才可以匹配（即in记录下一个时间点记录为out），忽略无法匹配的记录</p>\n</li>\n<li><p>记录输入的顺序不是时间顺序，时间点查询则是按照时间顺序</p>\n</li>\n</ol>\n<p>$\\qquad$首先所有涉及到时间的值全都换算成s。由于记录是无序输入，所以起初不能确定哪些记录需要忽略，因此每辆车的记录都用一个<code>set&lt;pair&lt;int,bool&gt;&gt;</code>来存储进出（true&#x2F;false）的时间戳，外面再套一个map以便用车牌号查询。</p>\n<p>$\\qquad$因为要统计某个时间点校内汽车数量，因此我们需要一个全局时间戳变量<code>vector&lt;pair&lt;int,bool&gt;&gt; stamp</code>存储所有汽车进出记录，只统计数量就无需存储车牌号。</p>\n<p>$\\qquad$在所有记录都读取完成后，就对每个车辆能成功匹配（out记录前一个是否为in记录）的记录对的进出时间点存入stamp，顺便用一个map统计停车时长。</p>\n<p>$\\qquad$存完后对stamp排个序，接着就可以读入查询时间点t了，对t时刻前的记录进行计数，如果是in就+1，out则-1。注意到查询时间点是按照时间顺序的，因此无序回退，遍历一次stamp足矣。</p>\n<p>$\\qquad$最后遍历一遍停车时长map，找到停最久的那几辆车，输出即可。</p>\n<p>$\\qquad$一遍过，似乎没什么大坑，测试样例已经涵盖很多注意点了。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k, h, m, s, t;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    map&lt;string, set&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">bool</span>&gt;&gt;&gt; record;</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">p</span><span class=\"params\">(<span class=\"number\">7</span>, <span class=\"number\">0</span>)</span>, <span class=\"title\">st</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s %d:%d:%d %s&quot;</span>, &amp;p[<span class=\"number\">0</span>], &amp;h, &amp;m, &amp;s, &amp;st[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        t = <span class=\"number\">3600</span> * h + <span class=\"number\">60</span> * m + s;</span><br><span class=\"line\">        record[p].<span class=\"built_in\">emplace</span>(t, st[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;i&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">bool</span>&gt;&gt; stamp;</span><br><span class=\"line\">    map&lt;string, <span class=\"type\">int</span>&gt; time;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;r: record)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> pre = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;w: r.second)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (w.second) pre = w.first;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pre &gt; <span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                stamp.<span class=\"built_in\">emplace_back</span>(pre, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                stamp.<span class=\"built_in\">emplace_back</span>(w.first, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                time[r.first] += (w.first - pre);</span><br><span class=\"line\">                pre = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(stamp.<span class=\"built_in\">begin</span>(), stamp.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> idx = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d:%d:%d&quot;</span>, &amp;h, &amp;m, &amp;s);</span><br><span class=\"line\">        t = <span class=\"number\">3600</span> * h + <span class=\"number\">60</span> * m + s;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (idx &lt; stamp.<span class=\"built_in\">size</span>() &amp;&amp; stamp[idx].first &lt;= t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cnt += stamp[idx].second ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">            ++idx;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, cnt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"type\">max_t</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    set&lt;string&gt; plt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;w: time)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (w.second &gt; <span class=\"type\">max_t</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            plt.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            plt.<span class=\"built_in\">emplace</span>(w.first);</span><br><span class=\"line\">            <span class=\"type\">max_t</span> = w.second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (w.second == <span class=\"type\">max_t</span>)</span><br><span class=\"line\">            plt.<span class=\"built_in\">emplace</span>(w.first);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;w: plt)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s &quot;</span>, w.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02d:%02d:%02d&quot;</span>, <span class=\"type\">max_t</span> / <span class=\"number\">3600</span>, <span class=\"type\">max_t</span> % <span class=\"number\">3600</span> / <span class=\"number\">60</span>, <span class=\"type\">max_t</span> % <span class=\"number\">60</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Zhejiang University has 8 campuses and a lot of gates. From each gate we can collect the in&#x2F;out times and the plate numbers of the cars...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1096」Consecutive Factors","uid":"4284065e5cb88855913cdeb3766387e3","slug":"「1096」Consecutive-Factors","date":"2022-10-25T07:31:44.000Z","updated":"2022-10-25T07:49:32.057Z","comments":true,"path":"api/articles/「1096」Consecutive-Factors.json","keywords":null,"cover":null,"text":"Among all the factors of a positive integer N, there may exist several consecutive numbers. For example, 630 can be factored as 3×5×6×7, whe...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1094」The Largest Generation","uid":"aee00b96e421a4a9f4457610d24d4237","slug":"「1094」The-Largest-Generation","date":"2022-10-23T11:10:15.000Z","updated":"2022-10-23T11:18:10.143Z","comments":true,"path":"api/articles/「1094」The-Largest-Generation.json","keywords":null,"cover":null,"text":"A family hierarchy is usually presented by a pedigree tree where all the nodes on the same level belong to the same generation. Your task is...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"BFS","slug":"BFS","count":10,"path":"api/tags/BFS.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}