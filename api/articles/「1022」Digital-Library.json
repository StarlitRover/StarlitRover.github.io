{"title":"「1022」Digital Library","uid":"8e6bb31e56ec41155c96a89b29398eaf","slug":"「1022」Digital-Library","date":"2022-07-06T10:55:03.000Z","updated":"2022-07-06T11:10:27.508Z","comments":true,"path":"api/articles/「1022」Digital-Library.json","keywords":null,"cover":null,"content":"<p><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805480801550336\">➳ENTRY</a></p>\n<p>A Digital Library contains millions of books, stored according to their titles, authors, key words of their abstracts, publishers, and published years. Each book is assigned an unique 7-digit number as its ID. Given any query from a reader, you are supposed to output the resulting books, sorted in increasing order of their ID’s.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains a positive integer $N (≤10^4)$ which is the total number of books. Then N blocks follow, each contains the information of a book in 6 lines:</p>\n<ul>\n<li>Line #1: the 7-digit ID number;</li>\n<li>Line #2: the book title – a string of no more than 80 characters;</li>\n<li>Line #3: the author – a string of no more than 80 characters;</li>\n<li>Line #4: the key words – each word is a string of no more than 10 characters without any white space, and the keywords are separated by exactly one space;</li>\n<li>Line #5: the publisher – a string of no more than 80 characters;</li>\n<li>Line #6: the published year – a 4-digit number which is in the range [1000, 3000].</li>\n</ul>\n<p>It is assumed that each book belongs to one author only, and contains no more than 5 key words; there are no more than 1000 distinct key words in total; and there are no more than 1000 distinct publishers.</p>\n<p>After the book information, there is a line containing a positive integer M (≤1000) which is the number of user’s search queries. Then M lines follow, each in one of the formats shown below:</p>\n<ul>\n<li>1: a book title</li>\n<li>2: name of an author</li>\n<li>3: a key word</li>\n<li>4: name of a publisher</li>\n<li>5: a 4-digit number representing the year</li>\n</ul>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each query, first print the original query in a line, then output the resulting book ID’s in increasing order, each occupying a line. If no book is found, print <code>Not Found</code> instead.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">1111111</span><br><span class=\"line\">The Testing Book</span><br><span class=\"line\">Yue Chen</span><br><span class=\"line\">test code debug sort keywords</span><br><span class=\"line\">ZUCS Print</span><br><span class=\"line\">2011</span><br><span class=\"line\">3333333</span><br><span class=\"line\">Another Testing Book</span><br><span class=\"line\">Yue Chen</span><br><span class=\"line\">test code sort keywords</span><br><span class=\"line\">ZUCS Print2</span><br><span class=\"line\">2012</span><br><span class=\"line\">2222222</span><br><span class=\"line\">The Testing Book</span><br><span class=\"line\">CYLL</span><br><span class=\"line\">keywords debug book</span><br><span class=\"line\">ZUCS Print2</span><br><span class=\"line\">2011</span><br><span class=\"line\">6</span><br><span class=\"line\">1: The Testing Book</span><br><span class=\"line\">2: Yue Chen</span><br><span class=\"line\">3: keywords</span><br><span class=\"line\">4: ZUCS Print</span><br><span class=\"line\">5: 2011</span><br><span class=\"line\">3: blablabla</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1: The Testing Book</span><br><span class=\"line\">1111111</span><br><span class=\"line\">2222222</span><br><span class=\"line\">2: Yue Chen</span><br><span class=\"line\">1111111</span><br><span class=\"line\">3333333</span><br><span class=\"line\">3: keywords</span><br><span class=\"line\">1111111</span><br><span class=\"line\">2222222</span><br><span class=\"line\">3333333</span><br><span class=\"line\">4: ZUCS Print</span><br><span class=\"line\">1111111</span><br><span class=\"line\">5: 2011</span><br><span class=\"line\">1111111</span><br><span class=\"line\">2222222</span><br><span class=\"line\">3: blablabla</span><br><span class=\"line\">Not Found</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$输入每本书的编号，书名，作者，关键词，出版社和年份，然后根据不同的查询方式给出相应的查询结果。</p>\n<p>$\\qquad$本题看着很复杂，但是用map容器可以直接秒杀。对于关键词，我们并不清楚一行有几个，但题目明确告知是以单个空格分隔的，因此我们可以先读取一行然后单个字符地加入word变量遇到空格后再加入map并清空word。</p>\n<p>$\\qquad$大概有两个注意事项：</p>\n<ol>\n<li><p>一行中最后一个关键词是没有空格的</p>\n</li>\n<li><p>如果将书本的ID用int类型来存储，那么需要注意有前置0的ID，输出的时候需要格式化，否则测试点3、4将过不去</p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"cde\">C☺DE</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    map&lt;string, set&lt;<span class=\"type\">int</span>&gt;&gt; title, author, publisher, keyword, year;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; id;</span><br><span class=\"line\">        cin.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin, str);</span><br><span class=\"line\">        title[str].<span class=\"built_in\">insert</span>(id);</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin, str);</span><br><span class=\"line\">        author[str].<span class=\"built_in\">insert</span>(id);</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin, str);</span><br><span class=\"line\">        string word = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> c: str)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">                word += c;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                keyword[word].<span class=\"built_in\">insert</span>(id);</span><br><span class=\"line\">                word = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        keyword[word].<span class=\"built_in\">insert</span>(id);</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin, str);</span><br><span class=\"line\">        publisher[str].<span class=\"built_in\">insert</span>(id);</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin, str);</span><br><span class=\"line\">        year[str].<span class=\"built_in\">insert</span>(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> m, format;</span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    cin.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin, str);</span><br><span class=\"line\">        cout &lt;&lt; str &lt;&lt; endl;</span><br><span class=\"line\">        format = str[<span class=\"number\">0</span>] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        str.<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (format)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (title[str].<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    cout &lt;&lt; <span class=\"string\">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: title[str])</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%07d\\n&quot;</span>, k);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (author[str].<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    cout &lt;&lt; <span class=\"string\">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: author[str])</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%07d\\n&quot;</span>, k);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (keyword[str].<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    cout &lt;&lt; <span class=\"string\">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: keyword[str])</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%07d\\n&quot;</span>, k);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (publisher[str].<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    cout &lt;&lt; <span class=\"string\">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: publisher[str])</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%07d\\n&quot;</span>, k);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (year[str].<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    cout &lt;&lt; <span class=\"string\">&quot;Not Found&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;k: year[str])</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%07d\\n&quot;</span>,k);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"➳ENTRY A Digital Library contains millions of books, stored according to their titles, authors, key words of their abstracts, publishers, an...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C☺DE</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1023」Have Fun with Numbers","uid":"9b81a29ab125985da823773d07744634","slug":"「1023」Have-Fun-with-Numbers","date":"2022-07-07T02:33:40.000Z","updated":"2022-07-07T03:17:08.534Z","comments":true,"path":"api/articles/「1023」Have-Fun-with-Numbers.json","keywords":null,"cover":null,"text":"➳ENTRY Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication. Double it we wi...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1021」Deepest Root","uid":"984c45eac2cbd15ed424e46306609be5","slug":"「1021」Deepest-Root","date":"2022-07-05T03:27:49.000Z","updated":"2022-07-17T15:23:59.994Z","comments":true,"path":"api/articles/「1021」Deepest-Root.json","keywords":null,"cover":null,"text":"➳ENTRY A graph which is connected and acyclic can be considered a tree. The height of the tree depends on the selected root. Now you are sup...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"},{"name":"BFS","slug":"BFS","count":10,"path":"api/tags/BFS.json"},{"name":"vector","slug":"vector","count":17,"path":"api/tags/vector.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}