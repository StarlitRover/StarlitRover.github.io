{"title":"「1114」Family Property","uid":"7239e6ffaff5533d5d38121f0a34ad8b","slug":"「1114」Family-Property","date":"2022-11-16T02:09:36.000Z","updated":"2022-11-16T02:19:44.538Z","comments":true,"path":"api/articles/「1114」Family-Property.json","keywords":null,"cover":null,"content":"<p>This time, you are supposed to help us collect the data for family-owned property. Given each person’s family members, and the estate（房产）info under his&#x2F;her own name, we need to know the size of each family, and the average area and number of sets of their real estate.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤1000). Then N lines follow, each gives the infomation of a person who owns estate in the format:</p>\n<p><code>ID</code> <code>Father</code> <code>Mother</code> k Child1​⋯Childk​ Mestate​ <code>Area</code></p>\n<p>where <code>ID</code> is a unique 4-digit identification number for each person; <code>Father</code> and <code>Mother</code> are the <code>ID</code>‘s of this person’s parents (if a parent has passed away, <code>-1</code> will be given instead); k (0≤k≤5) is the number of children of this person; Childi​’s are the <code>ID</code>‘s of his&#x2F;her children; Mestate​ is the total number of sets of the real estate under his&#x2F;her name; and <code>Area</code> is the total area of his&#x2F;her estate.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each case, first print in a line the number of families (all the people that are related directly or indirectly are considered in the same family). Then output the family info in the format:</p>\n<p><code>ID</code> <code>M</code> AVGsets​ AVGarea​</p>\n<p>where <code>ID</code> is the smallest ID in the family; <code>M</code> is the total number of family members; AVGsets​ is the average number of sets of their real estate; and AVGarea​ is the average area. The average numbers must be accurate up to 3 decimal places. The families must be given in descending order of their average areas, and in ascending order of the ID’s if there is a tie.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">6666 5551 5552 1 7777 1 100</span><br><span class=\"line\">1234 5678 9012 1 0002 2 300</span><br><span class=\"line\">8888 -1 -1 0 1 1000</span><br><span class=\"line\">2468 0001 0004 1 2222 1 500</span><br><span class=\"line\">7777 6666 -1 0 2 300</span><br><span class=\"line\">3721 -1 -1 1 2333 2 150</span><br><span class=\"line\">9012 -1 -1 3 1236 1235 1234 1 100</span><br><span class=\"line\">1235 5678 9012 0 1 50</span><br><span class=\"line\">2222 1236 2468 2 6661 6662 1 300</span><br><span class=\"line\">2333 -1 3721 3 6661 6662 6663 1 100</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">8888 1 1.000 1000.000</span><br><span class=\"line\">0001 15 0.600 100.000</span><br><span class=\"line\">5551 4 0.750 100.000</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$打地主，分田地（bushi</p>\n<p>$\\qquad$给出一群人拥有的房产数和总房产面积，以及他的父母、子女信息，输出家族个数，以及每个家族的人数、平均房产数和平均面积。</p>\n<p>$\\qquad$本质上就是给出一个图求出连通分图的个数。我们认为在一代内有血缘关系的人之间存在一条边，即亲子关系，然后用一个邻接表存储所有边。接着对所有人进行BFS，同时flag标记是否已被访问。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tuple&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> tuple&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">double</span>, <span class=\"type\">double</span>&gt; tiidd;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">info</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; edge;</span><br><span class=\"line\">    <span class=\"type\">int</span> est = <span class=\"number\">0</span>, area = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, id, f, m, k, c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, info&gt; p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d %d&quot;</span>, &amp;id, &amp;f, &amp;m, &amp;k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f != <span class=\"number\">-1</span>)</span><br><span class=\"line\">            p[id].edge.<span class=\"built_in\">insert</span>(f), p[f].edge.<span class=\"built_in\">insert</span>(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m != <span class=\"number\">-1</span>)</span><br><span class=\"line\">            p[id].edge.<span class=\"built_in\">insert</span>(m), p[m].edge.<span class=\"built_in\">insert</span>(id);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; k; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;c);</span><br><span class=\"line\">            p[id].edge.<span class=\"built_in\">insert</span>(c);</span><br><span class=\"line\">            p[c].edge.<span class=\"built_in\">insert</span>(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;p[id].est, &amp;p[id].area);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;tiidd&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;r: p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r.second.flag) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        r.second.flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        set&lt;<span class=\"type\">int</span>&gt; crt&#123;r.first&#125;, nxt;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum_est = r.second.est, sum_area = r.second.area, num = <span class=\"number\">1</span>, min_id = r.first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!crt.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t: crt)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;z: p[t].edge)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (p[z].flag) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    min_id = <span class=\"built_in\">min</span>(min_id, z);</span><br><span class=\"line\">                    p[z].flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    ++num, sum_est += p[z].est, sum_area += p[z].area;</span><br><span class=\"line\">                    nxt.<span class=\"built_in\">insert</span>(z);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            crt = std::<span class=\"built_in\">move</span>(nxt);</span><br><span class=\"line\">            nxt = <span class=\"built_in\">set</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans.<span class=\"built_in\">emplace_back</span>(min_id, num, <span class=\"number\">1.0</span> * sum_est / num, <span class=\"number\">1.0</span> * sum_area / num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(ans.<span class=\"built_in\">begin</span>(), ans.<span class=\"built_in\">end</span>(),</span><br><span class=\"line\">         [](tiidd &amp;a, tiidd &amp;b) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">3</span>&gt;(a) == <span class=\"built_in\">get</span>&lt;<span class=\"number\">3</span>&gt;(b) ? <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(a) &lt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(b) : <span class=\"built_in\">get</span>&lt;<span class=\"number\">3</span>&gt;(a) &gt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">3</span>&gt;(b); &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%zu\\n&quot;</span>, ans.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t: ans)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%04d %d %.3f %.3f\\n&quot;</span>, <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(t), <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(t), <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(t), <span class=\"built_in\">get</span>&lt;<span class=\"number\">3</span>&gt;(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"This time, you are supposed to help us collect the data for family-owned property. Given each person’s family members, and the estate（房产）inf...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"},{"name":"set","slug":"set","count":16,"path":"api/tags/set.json"},{"name":"BFS","slug":"BFS","count":10,"path":"api/tags/BFS.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"Lab3: page tables","uid":"65d0a1b9a75654efd6950a77e52b0ae4","slug":"Lab3-page-tables","date":"2022-11-17T16:34:38.000Z","updated":"2022-11-19T10:11:48.601Z","comments":true,"path":"api/articles/Lab3-page-tables.json","keywords":null,"cover":[],"text":"$\\qquad$兄弟们，我XV6又回来啦，这个栏目的灰都能把人埋了，鸽子王实锤（当然不是因为懒(⁎⁍̴̛ᴗ⁍̴̛⁎)）。不过虽迟但到！主要有时候看完文档和课程后又去搞其他飞机了，回来时，发现一切回到原点。这周发现再不搞真搞不完了，Lab3是关于页表的，文档戳这。 ❖ Coding ☑︎ S...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/categories/操作系统.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"xv6","slug":"xv6","count":3,"path":"api/tags/xv6.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1113」Integer Set Partition","uid":"e36208e2f8f3b544d6aecbeda1298b6f","slug":"「1113」Integer-Set-Partition","date":"2022-11-15T10:47:35.000Z","updated":"2022-11-15T10:56:14.721Z","comments":true,"path":"api/articles/「1113」Integer-Set-Partition.json","keywords":null,"cover":null,"text":"Given a set of N (&gt;1) positive integers, you are supposed to partition them into two disjoint sets A1​ and A2​ of n1​ and n2​ numbers, re...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}