{"title":"『1155』Heap Paths","uid":"af9a9a9068aea13525f268c88dd33420","slug":"『1155』Heap-Paths","date":"2022-11-29T12:12:08.000Z","updated":"2022-11-29T12:32:32.017Z","comments":true,"path":"api/articles/『1155』Heap-Paths.json","keywords":null,"cover":null,"content":"<p>In computer science, a <strong>heap</strong> is a specialized tree-based data structure that satisfies the heap property: if P is a parent node of C, then the key (the value) of P is either greater than or equal to (in a max heap) or less than or equal to (in a min heap) the key of C. A common implementation of a heap is the binary heap, in which the tree is a complete binary tree. (Quoted from Wikipedia at <a href=\"https://en.wikipedia.org/wiki/Heap_(data_structure)\">https://en.wikipedia.org/wiki/Heap_(data_structure)</a>)</p>\n<p>One thing for sure is that all the keys along any path from the root to a leaf in a max&#x2F;min heap must be in non-increasing&#x2F;non-decreasing order.</p>\n<p>Your job is to check every path in a given complete binary tree, in order to tell if it is a heap or not.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (1&lt;N≤1,000), the number of keys in the tree. Then the next line contains N distinct integer keys (all in the range of <strong>int</strong>), which gives the level order traversal sequence of a complete binary tree.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each given tree, first print all the paths from the root to the leaves. Each path occupies a line, with all the numbers separated by a space, and no extra space at the beginning or the end of the line. The paths must be printed in the following order: for each node in the tree, all the paths in its right subtree must be printed before those in its left subtree.</p>\n<p>Finally print in a line <code>Max Heap</code> if it is a max heap, or <code>Min Heap</code> for a min heap, or <code>Not Heap</code> if it is not a heap at all.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br><span class=\"line\">98 72 86 60 65 12 23 50</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">98 86 23</span><br><span class=\"line\">98 86 12</span><br><span class=\"line\">98 72 65</span><br><span class=\"line\">98 72 60 50</span><br><span class=\"line\">Max Heap</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br><span class=\"line\">8 38 25 58 52 82 70 60</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 25 70</span><br><span class=\"line\">8 25 82</span><br><span class=\"line\">8 38 52</span><br><span class=\"line\">8 38 58 60</span><br><span class=\"line\">Min Heap</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-3\">Sample Input 3:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br><span class=\"line\">10 28 15 12 34 9 8 56</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-3\">Sample Output 3:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 15 8</span><br><span class=\"line\">10 15 9</span><br><span class=\"line\">10 28 34</span><br><span class=\"line\">10 28 12 56</span><br><span class=\"line\">Not Heap</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$按照叶子节点从右至左的顺序输出所有根节点到叶子节点的路径，并判断是小顶堆还是大顶堆。输入堆的层次遍历，由于堆是完全二叉树，因此可以根据节点索引$&lt;N$判断是否存在。</p>\n<p>$\\qquad$本质上就是树的DFS，优先遍历右子树，再遍历左子树。用一个vector存储从根节点到当前函数所在节点的路径（进入函数时压入当前节点编号，退出时把最后一个元素推出），如果当前节点是叶子节点，就将路径输出。递归过程中顺便记录每个节点与父节点之间的大小关系，如果有不同的大小关系说明不是堆。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> sign(x, y) (x==y?0:(x&gt;y)+1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n, jdg = <span class=\"number\">0</span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; level, path;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; n) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    path.<span class=\"built_in\">push_back</span>(level[r]);</span><br><span class=\"line\">    jdg |= <span class=\"built_in\">sign</span>(level[r], level[r / <span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">2</span> * r &gt; n &amp;&amp; <span class=\"number\">2</span> * r + <span class=\"number\">1</span> &gt; n)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; path.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%s&quot;</span>, path[i], i &lt; path.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> ? <span class=\"string\">&quot; &quot;</span> : <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">traverse</span>(<span class=\"number\">2</span> * r + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">traverse</span>(<span class=\"number\">2</span> * r);</span><br><span class=\"line\">    path.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    level.<span class=\"built_in\">resize</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        cin &gt;&gt; level[i];</span><br><span class=\"line\">    level[<span class=\"number\">0</span>] = level[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">traverse</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, jdg == <span class=\"number\">3</span> ? <span class=\"string\">&quot;Not Heap&quot;</span> : jdg == <span class=\"number\">2</span> ? <span class=\"string\">&quot;Min Heap&quot;</span> : <span class=\"string\">&quot;Max Heap&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"In computer science, a heap is a specialized tree-based data structure that satisfies the heap property: if P is a parent node of C, then th...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"traversal order","slug":"traversal-order","count":13,"path":"api/tags/traversal-order.json"},{"name":"heap","slug":"heap","count":3,"path":"api/tags/heap.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 3:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 3:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"『1156」Sexy Primes","uid":"8ed7bca38adabdf721bda6f764633180","slug":"『1156」Sexy-Primes","date":"2022-11-29T12:59:44.000Z","updated":"2022-11-29T14:44:20.206Z","comments":true,"path":"api/articles/『1156」Sexy-Primes.json","keywords":null,"cover":null,"text":"Sexy primes are pairs of primes of the form $(p, p+6)$, so-named since “sex” is the Latin word for “six”. (Quoted from http://mathworld.wolf...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"prime","slug":"prime","count":6,"path":"api/tags/prime.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1154」Vertex Coloring","uid":"09fcb22b7551ea744c57f07b69e5a972","slug":"「1154」Vertex-Coloring","date":"2022-11-29T10:43:33.000Z","updated":"2022-11-29T14:47:15.803Z","comments":true,"path":"api/articles/「1154」Vertex-Coloring.json","keywords":null,"cover":null,"text":"A proper vertex coloring is a labeling of the graph’s vertices with colors such that no two vertices sharing the same edge have the same col...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}