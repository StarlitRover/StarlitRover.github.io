{"title":"「1057」Stack","uid":"c3a496a07a213e1385fa77bc05492d6e","slug":"「1057」Stack","date":"2022-09-08T02:14:58.000Z","updated":"2022-09-08T03:10:22.187Z","comments":true,"path":"api/articles/「1057」Stack.json","keywords":null,"cover":null,"content":"<p>Stack is one of the most fundamental data structures, which is based on the principle of Last In First Out (LIFO). The basic operations include Push (inserting an element onto the top position) and Pop (deleting the top element). Now you are supposed to implement a stack with an extra operation: PeekMedian – return the median value of all the elements in the stack. With N elements, the median value is defined to be the $(N&#x2F;2)$-th smallest element if N is even, or $((N+1)&#x2F;2)$-th if N is odd.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains a positive integer $N (≤10^5)$. Then N lines follow, each contains a command in one of the following 3 formats:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Push key</span><br><span class=\"line\">Pop</span><br><span class=\"line\">PeekMedian</span><br></pre></td></tr></table></figure>\n\n<p>where <code>key</code> is a positive integer no more than $10^5$.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each <code>Push</code> command, insert <code>key</code> into the stack and output nothing. For each <code>Pop</code> or <code>PeekMedian</code> command, print in a line the corresponding returned value. If the command is invalid, print <code>Invalid</code> instead.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17</span><br><span class=\"line\">Pop</span><br><span class=\"line\">PeekMedian</span><br><span class=\"line\">Push 3</span><br><span class=\"line\">PeekMedian</span><br><span class=\"line\">Push 2</span><br><span class=\"line\">PeekMedian</span><br><span class=\"line\">Push 1</span><br><span class=\"line\">PeekMedian</span><br><span class=\"line\">Pop</span><br><span class=\"line\">Pop</span><br><span class=\"line\">Push 5</span><br><span class=\"line\">Push 4</span><br><span class=\"line\">PeekMedian</span><br><span class=\"line\">Pop</span><br><span class=\"line\">Pop</span><br><span class=\"line\">Pop</span><br><span class=\"line\">Pop</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Invalid</span><br><span class=\"line\">Invalid</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">4</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">3</span><br><span class=\"line\">Invalid</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$本以为是一个模拟栈的小题，没想到外加PeekMedian功能；本以为只需输出栈中间元素即可，没想到是所有元素排序后的中间元素。</p>\n<p>$\\qquad$本来想用multiset容器来实现元素自动排序的，不过中间元素的迭代器并不好求。不想超时还是只能用线性容器vector+二分搜索。</p>\n<p>$\\qquad$思想非常纯朴，一个stack来模拟，一个vector来排序。vector的插入和删除都使用二分搜索来寻找位置，勉勉强强不会超时。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, left, right, mid;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; stk;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; order;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"string\">&quot;Push&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; m;</span><br><span class=\"line\">            left = <span class=\"number\">0</span>, right = stk.<span class=\"built_in\">size</span>(), mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (left &lt; right - <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                (order[mid] &gt; m) ? (right = mid) : (left = mid);</span><br><span class=\"line\">                mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> fix = (!order.<span class=\"built_in\">empty</span>() &amp;&amp; order[left] &lt; m) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">            order.<span class=\"built_in\">insert</span>(order.<span class=\"built_in\">begin</span>() + left + fix, m);</span><br><span class=\"line\">            stk.<span class=\"built_in\">push</span>(m);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!stk.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s == <span class=\"string\">&quot;Pop&quot;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> t = stk.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                cout &lt;&lt; t &lt;&lt; endl;</span><br><span class=\"line\">                left = <span class=\"number\">0</span>, right = stk.<span class=\"built_in\">size</span>(), mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (left &lt; right)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (order[mid] != t)</span><br><span class=\"line\">                        (order[mid] &gt; t) ? (right = mid) : (left = mid);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                stk.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                order.<span class=\"built_in\">erase</span>(order.<span class=\"built_in\">begin</span>() + mid);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                cout &lt;&lt; order[(stk.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>) / <span class=\"number\">2</span>] &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Invalid&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"tips\">Tips</span></h2><p>$\\qquad$两次二分搜索还是有点差异的，Pop时你可以确定存在该元素，只要<code>order[mid]==value</code>    即可退出循环，而Push时我们寻找的是插入该元素的位置，退出循环的时候right和lleft最多差1（left &lt; right - 1为防止right&#x3D;left+1 &amp;&amp; mid&#x3D;&#x3D;left时而无限循环），此时order[mid]既有可能&#x3D;&#x3D;m，也有可能&lt;m，后者不能直接插入，因此引入一个fix对位置进行修正。</p>\n","text":"Stack is one of the most fundamental data structures, which is based on the principle of Last In First Out (LIFO). The basic operations incl...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"binary search","slug":"binary-search","count":7,"path":"api/tags/binary-search.json"},{"name":"stack","slug":"stack","count":3,"path":"api/tags/stack.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Tips</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1058」A+B in Hogwarts","uid":"2d08ef1e83c7532f13470f67dbd15fc9","slug":"「1058」A-B-in-Hogwarts","date":"2022-09-08T12:03:34.000Z","updated":"2022-09-08T12:14:35.574Z","comments":true,"path":"api/articles/「1058」A-B-in-Hogwarts.json","keywords":null,"cover":null,"text":"If you are a fan of Harry Potter, you would know the world of magic has its own currency system – as Hagrid explained it to Harry, “Seventee...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1056」Mice and Rice","uid":"f2cca43e895bb7a04b6723f4b34dca34","slug":"「1056」Mice-and-Rice","date":"2022-09-07T09:55:58.000Z","updated":"2022-09-11T08:40:34.775Z","comments":true,"path":"api/articles/「1056」Mice-and-Rice.json","keywords":null,"cover":null,"text":"Mice and Rice is the name of a programming contest in which each programmer must write a piece of code to control the movements of a mouse i...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}