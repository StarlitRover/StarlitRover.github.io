{"title":"「1044」Shopping in Mars","uid":"e150e507cccee9246ee324168daabc61","slug":"「1044」Shopping-in-Mars","date":"2022-08-23T05:43:36.000Z","updated":"2022-08-27T07:25:36.303Z","comments":true,"path":"api/articles/「1044」Shopping-in-Mars.json","keywords":null,"cover":null,"content":"<p>Shopping in Mars is quite a different experience. The Mars people pay by chained diamonds. Each diamond has a value (in Mars dollars M\\$). When making the payment, the chain can be cut at any position for only once and some of the diamonds are taken off the chain one by one. Once a diamond is off the chain, it cannot be taken back. For example, if we have a chain of 8 diamonds with values M\\$3, 2, 1, 5, 4, 6, 8, 7, and we must pay M\\$15. We may have 3 options:</p>\n<ol>\n<li>Cut the chain between 4 and 6, and take off the diamonds from the position 1 to 5 (with values 3+2+1+5+4&#x3D;15).</li>\n<li>Cut before 5 or after 6, and take off the diamonds from the position 4 to 6 (with values 5+4+6&#x3D;15).</li>\n<li>Cut before 8, and take off the diamonds from the position 7 to 8 (with values 8+7&#x3D;15).</li>\n</ol>\n<p>Now given the chain of diamond values and the amount that a customer has to pay, you are supposed to list all the paying options for the customer.</p>\n<p>If it is impossible to pay the exact amount, you must suggest solutions with minimum lost.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains 2 numbers: $N (≤10^5)$, the total number of diamonds on the chain, and$ M (≤10^8)$, the amount that the customer has to pay. Then the next line contains N positive numbers $D_1​⋯D_N​ (D_i​≤10^3\\ for\\ all\\ i&#x3D;1,⋯,N) $which are the values of the diamonds. All the numbers in a line are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print <code>i-j</code> in a line for each pair of $i≤j$ such that $D_i + … + D_j &#x3D; M$. Note that if there are more than one solution, all the solutions must be printed in increasing order of <code>i</code>.</p>\n<p>If there is no solution, output <code>i-j</code> for pairs of $i\\leq j$ such that $D_i + … + D_j &gt; M$ with $(D_i + … + D_j - M)$ minimized. Again all the solutions must be printed in increasing order of <code>i</code>.</p>\n<p>It is guaranteed that the total value of diamonds is sufficient to pay the given amount.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">16 15</span><br><span class=\"line\">3 2 1 5 4 6 8 7 16 10 15 11 9 12 14 13</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1-5</span><br><span class=\"line\">4-6</span><br><span class=\"line\">7-8</span><br><span class=\"line\">11-11</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 13</span><br><span class=\"line\">2 4 5 7 9</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2-4</span><br><span class=\"line\">4-5</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$最近怎么全是Mars的题目，妈妈再也不用担心我在老家找工作啦。</p>\n<p>$\\qquad$火星人喜欢用一串钻石来付钱，上面每颗钻石的价值不一，而且只能用其中连续的一小串来付。给定这一串钻石的价值和需要付费的商品价格，输出所有损失最小的钻石子串，题目保证钻石总价值&gt;商品价格，拒绝吃霸王餐，难得有原则的题目，点赞。</p>\n<p>$\\qquad$很显然的一个想法，从每一颗钻石开始往后遍历，找到钻石总价值刚好≥商品价值的end index，计算（钻石总价-商品价值），与全局最小值进行比较，若更小则替换原先序列；若相等则添加至当前序列尾部。</p>\n<p>$\\qquad$However，你很快会发现，这里面其实有着大量的重复计算，尤其是相邻的起始钻石所引导的序列之间会有很大一部分重合。简化的方式也非常简单，在for循环遍历中不必改变end index，因为下一个起始钻石的end index只会比当前大而不会小。我们只需要在进入下一次循环前将该轮钻石总价减去当前起始钻石的价值即可，这样就无需重复计算中间钻石，相当于整个过程每个钻石价值只会加一次。</p>\n<p>$\\qquad$一旦发现即使把后面的钻石都加上也无法达到商品价格，那么就可以直接break。</p>\n<p>$\\qquad$另外需要提防价值为0的石头钻石。</p>\n<hr>\n<h2><span id=\"c-d-e\">C ☺ D E</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dia</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; seq;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;d: dia)</span><br><span class=\"line\">        cin &gt;&gt; d;</span><br><span class=\"line\">    <span class=\"type\">int</span> min_lost = m, end = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (end &lt; n &amp;&amp; sum &lt; m)</span><br><span class=\"line\">            sum += dia[end++];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end == n &amp;&amp; sum &lt; m)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum - m &lt; min_lost)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            min_lost = sum - m;</span><br><span class=\"line\">            seq.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            seq.<span class=\"built_in\">emplace_back</span>(i + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum - m == min_lost)</span><br><span class=\"line\">            seq.<span class=\"built_in\">emplace_back</span>(i + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">        sum -= dia[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;s: seq)</span><br><span class=\"line\">        cout &lt;&lt; s.first &lt;&lt; <span class=\"string\">&quot;-&quot;</span> &lt;&lt; s.second &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Shopping in Mars is quite a different experience. The Mars people pay by chained diamonds. Each diamond has a value (in Mars dollars M\\$). W...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":5,"path":"api/tags/动态规划.json"},{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C ☺ D E</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1045」Favorite Color Stripe","uid":"126557f0372d68b5bf8540ce837256a8","slug":"「1045」Favorite-Color-Stripe","date":"2022-08-23T08:40:23.000Z","updated":"2022-08-23T13:21:09.290Z","comments":true,"path":"api/articles/「1045」Favorite-Color-Stripe.json","keywords":null,"cover":null,"text":"Eva is trying to make her own color stripe out of a given one. She would like to keep only her favorite colors in her favorite order by cutt...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":5,"path":"api/tags/动态规划.json"},{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"粒子群算法","uid":"67f2a5903961e96580b14bb51c7ce9c9","slug":"粒子群算法","date":"2022-08-22T02:55:53.000Z","updated":"2022-08-28T05:34:26.011Z","comments":true,"path":"api/articles/粒子群算法.json","keywords":null,"cover":[],"text":"$\\qquad$通过上一节我们得知遗传算法是一种智能的随机搜索算法，胡乱随机的过程中隐隐透着一丝章法，这是借鉴了大自然的生存法则。而今天登场的粒子群算法也源于日常生活。 $\\qquad$当地上掉落一坨蜂蜜时，我们希望找到它的方位，怎么办呢？于是乎我们放出100只蚂蚁，让他们在这片...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"智能算法","slug":"智能算法","count":4,"path":"api/categories/智能算法.json"}],"tags":[{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"},{"name":"数学煎馍","slug":"数学煎馍","count":4,"path":"api/tags/数学煎馍.json"},{"name":"Gurobi","slug":"Gurobi","count":2,"path":"api/tags/Gurobi.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}