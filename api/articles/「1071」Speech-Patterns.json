{"title":"「1071」Speech Patterns","uid":"7e7e82299d0e2e6bf939755399447a21","slug":"「1071」Speech-Patterns","date":"2022-09-29T06:36:48.000Z","updated":"2022-10-05T11:24:04.554Z","comments":true,"path":"api/articles/「1071」Speech-Patterns.json","keywords":null,"cover":null,"content":"<p>People often have a preference among synonyms of the same word. For example, some may prefer “the police”, while others may prefer “the cops”. Analyzing such patterns can help to narrow down a speaker’s identity, which is useful when validating, for example, whether it’s still the same person behind an online avatar.</p>\n<p>Now given a paragraph of text sampled from someone’s speech, can you find the person’s most commonly used word?</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, there is one line of text no more than 1048576 characters in length, terminated by a carriage return <code>\\n</code>. The input contains at least one alphanumerical character, i.e., one character from the set [<code>0-9 A-Z a-z</code>].</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in one line the most commonly occurring word in the input text, followed by a space and the number of times it has occurred in the input. If there are more than one such words, print the lexicographically smallest one. The word should be printed in all lower case. Here a “word” is defined as a continuous sequence of alphanumerical characters separated by non-alphanumerical characters or the line beginning&#x2F;end.</p>\n<p>Note that words are case <strong>insensitive</strong>.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Can1: &quot;Can a can can a can?  It can!&quot;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">can 5</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$统计一句话中出现频次最高的word，这里word指的是一串只有数字字母的连续字符串。</p>\n<p>$\\qquad$map统计每个word的频次，isalnum函数判断是否为数字字母，tolower函数负责转换大写字母。</p>\n<p>$\\qquad$万事俱备，只欠东风。我们每次先将non-alphanumerical的字符跳过，然后连续采集alphanumerical字符，顺便转换成小写字母，tolower函数只对大写字母有效果，其余字符返回本身。计数的同时比较是否是当前频次最高的单词，如果与最大频次一样再比较字母序。</p>\n<p>$\\qquad$思路简单明了，中途遇到了一个有意思的小bug，分享一下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">-1</span>; i &lt; s.<span class=\"built_in\">size</span>(); ++i)</span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$这个循环不论<code>s.size()</code>多大都不会进入，我一开始也很疑惑，这说明<code>i&lt;s.size()</code>是false，后来想起size()的返回类型是无符号整型size_t，比较运算实质是做减法，那么编译器在做一个无符号数减一个有符号数时都会先将有符号数转为无符号数，那么这里-1就会直接变成最大的无符号数，因此返回false不会进入循环。</p>\n<p>$\\qquad$不得不说，细节决定成败。和绝对理性的机器打交道就必须注意这些不起眼的小点。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    map&lt;string, <span class=\"type\">int</span>&gt; cnt;</span><br><span class=\"line\">    string s, word, ans;</span><br><span class=\"line\">    <span class=\"type\">int</span> max = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(cin, s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s.<span class=\"built_in\">size</span>() &amp;&amp; !<span class=\"built_in\">isalnum</span>(s[i++]));</span><br><span class=\"line\">        i -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; s.<span class=\"built_in\">size</span>() &amp;&amp; <span class=\"built_in\">isalnum</span>(s[i]); ++i)</span><br><span class=\"line\">            word += <span class=\"built_in\">tolower</span>(s[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++cnt[word] &gt; max)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            max = cnt[word];</span><br><span class=\"line\">            ans = word;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cnt[word] == max &amp;&amp; word &lt; ans)</span><br><span class=\"line\">            ans = word;</span><br><span class=\"line\">        word.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"People often have a preference among synonyms of the same word. For example, some may prefer “the police”, while others may prefer “the cops...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"map","slug":"map","count":25,"path":"api/tags/map.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1072」Gas Station","uid":"74ba177c21feee6c064587dc81699431","slug":"「1072」Gas-Station","date":"2022-10-05T10:12:26.000Z","updated":"2022-10-11T06:44:55.702Z","comments":true,"path":"api/articles/「1072」Gas-Station.json","keywords":null,"cover":[],"text":"A gas station has to be built at such a location that the minimum distance between the station and any of the residential housing is as far ...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"},{"name":"Dijkstra","slug":"Dijkstra","count":6,"path":"api/tags/Dijkstra.json"},{"name":"min_element","slug":"min-element","count":2,"path":"api/tags/min-element.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1070」Mooncake","uid":"7776532a38433935aad29c44c794b489","slug":"「1070」Mooncake","date":"2022-09-29T05:43:39.000Z","updated":"2022-09-29T06:55:31.502Z","comments":true,"path":"api/articles/「1070」Mooncake.json","keywords":null,"cover":null,"text":"Mooncake is a Chinese bakery product traditionally eaten during the Mid-Autumn Festival. Many types of fillings and crusts can be found in t...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}