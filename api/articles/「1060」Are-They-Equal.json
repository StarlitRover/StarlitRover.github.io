{"title":"「1060」Are They Equal","uid":"0eaf91694ac904eb1b9bccba53543259","slug":"「1060」Are-They-Equal","date":"2022-09-11T08:00:39.000Z","updated":"2022-09-11T08:34:10.241Z","comments":true,"path":"api/articles/「1060」Are-They-Equal.json","keywords":null,"cover":null,"content":"<p>If a machine can save only 3 significant digits, the float numbers 12300 and 12358.9 are considered equal since they are both saved as $0.123×10^5$ with simple chopping. Now given the number of significant digits on a machine and two float numbers, you are supposed to tell if they are treated equal in that machine.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case which gives three numbers $N, A$ and $B$, where $N (&lt;100)$ is the number of significant digits, and A and B are the two float numbers to be compared. Each float number is non-negative, no greater than $10^{100}$, and that its total digit number is less than 100.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print in a line <code>YES</code> if the two numbers are treated equal, and then the number in the standard form <code>0.d[1]...d[N]*10^k</code> (<code>d[1]</code>&gt;0 unless the number is 0); or <code>NO</code> if they are not treated equal, and then the two numbers in their standard form. All the terms must be separated by a space, with no extra space at the end of a line.</p>\n<p>Note: Simple chopping is assumed without rounding.</p>\n<h3><span id=\"sample-input-1\">Sample Input 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 12300 12358.9</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-1\">Sample Output 1:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES 0.123*10^5</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-input-2\">Sample Input 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 120 128</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output-2\">Sample Output 2:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NO 0.120*10^3 0.128*10^3</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$给定底数的存取精度，忽略指数的精度范围，判断两个数用科学计数法表示后（有精度的损失）是否相等。</p>\n<p>$\\qquad$这种题目就是那种月球村，到处都是环形坑，当然碰到这种题目也不要害怕，把所有坑都踩一遍就无敌啦。</p>\n<p>$\\qquad$科学计数法无非就两个重要数据——底数和指数，我们可以建一个科学计数法的class来统一格式化。</p>\n<p>$\\qquad$对于刚读入的纯天然数字字符串n，我们先求指数。用<code>find(&#39;.&#39;)</code>函数确定小数点的位置，如果不存在小数点就取【最后一个字符索引+1&#x3D;n.size()】，然后将小数点去除（⚠️去除后小数点的索引就变成了小数点后一位数字的索引，也是格式化中第一个非0数字将要移到的位置）找第一个非0数字的位置，找到后就将所有前置0去除。此时若字符串为空说明为0（大坑），单独指定一下指数为0；非空就用【小数点位置（终点）-第一个非0数字位置（起点）】，即为所求指数。</p>\n<p>$\\qquad$然后如果此时字符串不足n位的话就通过添加后置‘0’来补到n位，这样就得到了底数和指数。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Float</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string data;</span><br><span class=\"line\">    <span class=\"type\">int</span> bias = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Float</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cin &gt;&gt; data;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> point = data.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (point == string::npos)</span><br><span class=\"line\">            point = data.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            data.<span class=\"built_in\">erase</span>(data.<span class=\"built_in\">begin</span>() + point);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> &amp;it: data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it != <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            ++bias;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        data.<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>, bias);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            data = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">            bias = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            bias = point - bias;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (data.<span class=\"built_in\">size</span>() &lt; n)</span><br><span class=\"line\">            data += <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> string <span class=\"title\">format</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;0.&quot;</span> + data.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, n) + <span class=\"string\">&quot;*10^&quot;</span> + <span class=\"built_in\">to_string</span>(bias);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">Float <span class=\"title\">a</span><span class=\"params\">(n)</span>, <span class=\"title\">b</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.bias == b.bias &amp;&amp; a.data.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, n) == b.data.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, n))</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;YES &quot;</span> &lt;&lt; a.format(n) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;NO &quot;</span> &lt;&lt; a.format(n) &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; b.format(n) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"tips︎\">Tips☔︎</span></h2><ol>\n<li><p><code>string.find(char)</code>返回第一个字符所在的下标索引（不是迭代器），如果没找到就会返回<code>string::npos</code>，即size_t类型的最大值</p>\n</li>\n<li><p>字符串的删除函数<code>string.erase()</code>有两种用法：</p>\n<ul>\n<li><p><code>string.erase(iterator pos)</code>：直接传入该字符的迭代器进行删除</p>\n</li>\n<li><p><code>string.erase(int start,int num)</code>：指定起始索引和连续删除的字符个数，删除<code>string[start:start+num]</code>，start+num处字符保留</p>\n</li>\n</ul>\n</li>\n</ol>\n","text":"If a machine can save only 3 significant digits, the float numbers 12300 and 12358.9 are considered equal since they are both saved as $0.12...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 1:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input 2:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output 2:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Tips☔︎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"Lab1: Xv6 and Unix utilities","uid":"1e574a5e3fca1a756fff12eb87b95cbe","slug":"Lab1-Xv6-and-Unix-utilities","date":"2022-09-13T10:32:31.000Z","updated":"2022-10-10T06:21:34.553Z","comments":true,"path":"api/articles/Lab1-Xv6-and-Unix-utilities.json","keywords":null,"cover":[],"text":"$\\qquad$这学期开始学操作系统啦，一周五节课，是一位老教师，除了讲话慢了点还经常请同学们回答一些神奇问题外感觉还好，和上学期的寄网还是有差距的。暑假想预习来着的，不过经历了一些事情有点颓，现在回忆起来像是上个世纪的假期了。众所周知，大学&#x3D;大不了自学，所以打开了MI...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/categories/操作系统.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"xv6","slug":"xv6","count":3,"path":"api/tags/xv6.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1059」Prime Factors","uid":"d25a64f6e3048948d06ba269622dda29","slug":"「1059」Prime-Factors","date":"2022-09-08T13:23:41.000Z","updated":"2022-09-08T13:51:01.550Z","comments":true,"path":"api/articles/「1059」Prime-Factors.json","keywords":null,"cover":null,"text":"Given any positive integer N, you are supposed to find all of its prime factors, and write them in the format $N &#x3D; p_1​^{k_1}​×p_2​^{k_...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"prime","slug":"prime","count":6,"path":"api/tags/prime.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}