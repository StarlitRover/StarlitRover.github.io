{"title":"<10> NO Left Recursion","uid":"0ec694a906049225d6d529b78f724448","slug":"10-NO-Left-Recursion","date":"2022-05-17T07:58:36.000Z","updated":"2022-06-21T07:50:59.594Z","comments":true,"path":"api/articles/10-NO-Left-Recursion.json","keywords":null,"cover":[],"content":"<p>$\\qquad$本文介绍消除文法左递归的算法，并输出新文法产生式。</p>\n<img src=\"/images/编译原理/12.png\" style=\"zoom:50%;\">\n\n<br>\n\n<span id=\"more\"></span>\n\n<hr>\n<p>$\\qquad$消除左递归在语法分析阶段是比较重要的一个过程，尤其在自顶向下的分析过程中，编译器会尝试各个推导式，如果存在左递归，那么推导过程将会用永无止境。</p>\n<p>$\\qquad$比较显式的左递归我们称之为直接左递归，比如说</p>\n<p>$$<br>A → A\\alpha_1|A\\alpha_2|\\cdots|A\\alpha_n|\\beta_1|\\beta_2|\\cdots|\\beta_m<br>$$</p>\n<p>$\\qquad$其中$α_i$表示非空的表达式，$β_j$表示不以非终结符A开头的表达式。</p>\n<p>$\\qquad$那么我们知道对于非终结符A来说，最终只能以$\\beta_1$到$β_2$来结束，否则依然会含有非终结符A，因此我们可以将文法直接改为</p>\n<p>$$<br>A → \\beta_1A’|\\beta_2A’|\\cdots|\\beta_mA’\\ ,\\ A’ → \\alpha_1A’|\\alpha_2A’|\\cdots|\\alpha_nA’|ε<br>$$</p>\n<p>$\\qquad$然而并非所有的左递归都这么显而易见，还是会存在很多间接左递归</p>\n<p>$$<br>A → B\\alpha|\\cdots\\ ,\\ B → C\\beta|\\cdots\\ ,\\ C → A\\gamma|\\cdots<br>$$</p>\n<p>$\\qquad$那么我们就需要一个通用的算法来消除所有的直接左递归和间接左递归。</p>\n<hr>\n<h2><span id=\"algorithm\">⫸ Algorithm</span></h2><p>$\\qquad$算法也不难理解，大致流程如下：</p>\n<ol>\n<li><p>将所有非终结符先进行整理编号，即所有非终结符转换为</p>\n<p>$$<br>A_1,A_2,A_3,\\cdots,A_n<br>$$</p>\n</li>\n<li><p>对每一个$A_i$，我们将其所有满足$i&gt;j$的产生式$A_i→A_j\\alpha$替换为$A_i\\rightarrow β_1 α|β_2 α|\\cdots|β_k α$，其中$A_j \\rightarrow β_1|β_2|\\cdots|β_k$</p>\n</li>\n<li><p>从$A_1$开始至$A_n$，依次执行步骤2，每完成一个$A_i$的替换就消除当前该$A_i$的所有直接左递归</p>\n</li>\n</ol>\n<p>$\\qquad$该算法的伪代码如下图所示：</p>\n<img src=\"/images/编译原理/13.jpg\" style=\"zoom:60%;\">\n\n<p>$\\qquad$我们可以注意到，每一个$A_i$完成替换后，那么$A_i$所有产生式右边的第一个符号要么是终结符，要么是编号$j≥i$的非终结符$A_j$，在消除此时产生式中的直接左递归后，就只剩下终结符和编号$j&gt;i$非终结符$A_j$打头的右部了。这样一来，最终的文法一方面不可能有直接左递归，另一方面不可能有间接左递归（因为只能小编号的非终结符推出大编号的非终结符）。</p>\n<hr>\n<h2><span id=\"c-d-e\">C ☺ D E</span></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> deepcopy</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;请输入文法产生式的个数：&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;请输入文法产生式：&#x27;</span>)</span><br><span class=\"line\">gen = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">left = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">num = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">    g = <span class=\"built_in\">input</span>().replace(<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> g[<span class=\"number\">1</span>:<span class=\"number\">3</span>] == <span class=\"string\">&#x27;-&gt;&#x27;</span></span><br><span class=\"line\">    gen.setdefault(g[<span class=\"number\">0</span>], [[], []])</span><br><span class=\"line\">    left[g[<span class=\"number\">0</span>]] = num</span><br><span class=\"line\">    num += <span class=\"number\">1</span></span><br><span class=\"line\">    start = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>, <span class=\"built_in\">len</span>(g)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> g[i] == <span class=\"string\">&#x27;|&#x27;</span> <span class=\"keyword\">or</span> i == <span class=\"built_in\">len</span>(g) - <span class=\"number\">1</span>:</span><br><span class=\"line\">            i += (<span class=\"number\">1</span> <span class=\"keyword\">if</span> i == <span class=\"built_in\">len</span>(g) - <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> start &lt; i</span><br><span class=\"line\">            <span class=\"keyword\">if</span> g[<span class=\"number\">0</span>].isupper():</span><br><span class=\"line\">                gen[g[<span class=\"number\">0</span>]][<span class=\"number\">0</span>].append(g[start:i])</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> g[<span class=\"number\">0</span>].islower():</span><br><span class=\"line\">                gen[g[<span class=\"number\">0</span>]][<span class=\"number\">1</span>].append(g[start:i])</span><br><span class=\"line\">            start = i + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将没有出现在产生式左部的非终结符当作终结符</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> gen:</span><br><span class=\"line\">    nonterminal = deepcopy(gen[key][<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> nonterminal:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item[<span class=\"number\">0</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> left.keys():</span><br><span class=\"line\">            gen[key][<span class=\"number\">0</span>].remove(item)</span><br><span class=\"line\">            gen[key][<span class=\"number\">1</span>].append(item)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> gen[key][<span class=\"number\">1</span>] != []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换Ai-&gt;Ajβ (j&lt;i)</span></span><br><span class=\"line\">more_gen = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> gen:</span><br><span class=\"line\">    rmv = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> gen[key][<span class=\"number\">0</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> left[item[<span class=\"number\">0</span>]] &lt; left[key]:</span><br><span class=\"line\">            rmv.append(item)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> gen[item[<span class=\"number\">0</span>]][<span class=\"number\">1</span>]:</span><br><span class=\"line\">                gen[key][<span class=\"number\">1</span>].append(k + item[<span class=\"number\">1</span>:])</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> gen[item[<span class=\"number\">0</span>]][<span class=\"number\">0</span>]:</span><br><span class=\"line\">                gen[key][<span class=\"number\">0</span>].append(k + item[<span class=\"number\">1</span>:])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> rmv:</span><br><span class=\"line\">        gen[key][<span class=\"number\">0</span>].remove(r)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 消除直接左递归</span></span><br><span class=\"line\">    nonterminal = deepcopy(gen[key][<span class=\"number\">0</span>])</span><br><span class=\"line\">    flag = <span class=\"literal\">True</span></span><br><span class=\"line\">    terminal = deepcopy(gen[key][<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> nonterminal:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item[<span class=\"number\">0</span>] == key:</span><br><span class=\"line\">            sym = <span class=\"string\">&#x27;[&#x27;</span> + key + <span class=\"string\">&#x27;\\&#x27;]&#x27;</span></span><br><span class=\"line\">            more_gen.setdefault(sym, []).extend([item[<span class=\"number\">1</span>:], (item[<span class=\"number\">1</span>:]) + sym])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> terminal:</span><br><span class=\"line\">                    gen[key][<span class=\"number\">1</span>].append(k + sym)</span><br><span class=\"line\">            gen[key][<span class=\"number\">0</span>].remove(item)</span><br><span class=\"line\">            flag = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> gen:</span><br><span class=\"line\">    gen[key][<span class=\"number\">0</span>].extend(gen[key][<span class=\"number\">1</span>])</span><br><span class=\"line\">    gen[key] = gen[key][<span class=\"number\">0</span>]</span><br><span class=\"line\">gen.update(more_gen)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\nAfter Remove Left Recursion:&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> gen:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(key + <span class=\"string\">&#x27; -&gt; &#x27;</span>, end=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(*gen[key], sep=<span class=\"string\">&#x27; | &#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"tips\">➷ Tips</span></h2><ol>\n<li><p>读入输入时先除去所有空格，并规定终结符和非终结符仅能为单个字母，小写字母代表终结符，大写字母代表非终结符</p>\n</li>\n<li><p>所有产生式用一个字典存储，每个产生式左边的非终结符作为键值，每个键值对应一个列表，列表里有两个子列表（见3）</p>\n</li>\n<li><p>对每一个产生式的右部进行分类，非终结符打头的一类，终结符打头的一类</p>\n</li>\n<li><p>这里将没有出现在产生式左部的非终结符当作终结符，从而无需对这些非终结符进行编号</p>\n<p>⚠️ Python中可迭代对象的直接赋值是引用，复制赋值则需要<code>deepcopy()</code></p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"outcome\">Outcome</span></h2><img src=\"/images/编译原理/14.png\" style=\"zoom:60%;\">\n","text":"$\\qquad$本文介绍消除文法左递归的算法，并输出新文法产生式。 $\\qquad$消除左递归在语法分析阶段是比较重要的一个过程，尤其在自顶向下的分析过程中，编译器会尝试各个推导式，如果存在左递归，那么推导过程将会用永无止境。 $\\qquad$比较显式的左递归我们称之为直接左递归...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"编译原理","slug":"编译原理","count":7,"path":"api/categories/编译原理.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">⫸ Algorithm</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C ☺ D E</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">➷ Tips</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Outcome</span></a></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"Apply ANN in MNIST","uid":"27d8ddbd7db795b00aa745f14f40ef75","slug":"Apply-ANN-in-MNIST","date":"2022-05-20T03:44:06.000Z","updated":"2022-07-13T16:03:19.229Z","comments":true,"path":"api/articles/Apply-ANN-in-MNIST.json","keywords":null,"cover":null,"text":"$\\qquad$看完了3Blue1Brown的神经网络三部曲，感觉眼睛明亮了，内心更通透了，手指控制不住地就开始跳动。 $\\qquad$接下来请欣赏寿司神经网络——手写数字集MNIST登场！ 123import numpy as npimport pandas as pdimpo...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"Machine Learning","slug":"Machine-Learning","count":3,"path":"api/categories/Machine-Learning.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"},{"name":"python","slug":"python","count":11,"path":"api/tags/python.json"},{"name":"ANN","slug":"ANN","count":1,"path":"api/tags/ANN.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"The Egg","uid":"13a6dd20890e09e09e3cc068d4199bf2","slug":"The-Egg","date":"2022-05-12T09:32:31.000Z","updated":"2022-05-12T10:00:21.021Z","comments":true,"path":"api/articles/The-Egg.json","keywords":null,"cover":[],"text":"$\\qquad$欢迎来到✮Star✮频道，这个频道是一个不定期的分享接口。今天来这的是一篇科幻小说The Egg，敬请享用。 The EggAndy Weir You were on your way home when you died. It was a car accide...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"✮Star✮","slug":"✮Star✮","count":1,"path":"api/categories/✮Star✮.json"}],"tags":[{"name":"Sci-Fi","slug":"Sci-Fi","count":1,"path":"api/tags/Sci-Fi.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}