{"title":"「1056」Mice and Rice","uid":"f2cca43e895bb7a04b6723f4b34dca34","slug":"「1056」Mice-and-Rice","date":"2022-09-07T09:55:58.000Z","updated":"2022-09-11T08:40:34.775Z","comments":true,"path":"api/articles/「1056」Mice-and-Rice.json","keywords":null,"cover":null,"content":"<p><strong>Mice and Rice</strong> is the name of a programming contest in which each programmer must write a piece of code to control the movements of a mouse in a given map. The goal of each mouse is to eat as much rice as possible in order to become a FatMouse.</p>\n<p>First the playing order is randomly decided for $N_P​$ programmers. Then every $N_G$​ programmers are grouped in a match. The fattest mouse in a group wins and enters the next turn. All the losers in this turn are ranked the same. Every $N_G$ ​ winners are then grouped in the next match until a final winner is determined.</p>\n<p>For the sake of simplicity, assume that the weight of each mouse is fixed once the programmer submits his&#x2F;her code. Given the weights of all the mice and the initial playing order, you are supposed to output the ranks for the programmers.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains 2 positive integers: $N_P$​ and $N_G​ (≤1000)$, the number of programmers and the maximum number of mice in a group, respectively. If there are less than $N_G$ ​ mice at the end of the player’s list, then all the mice left will be put into the last group. The second line contains NP​ distinct non-negative numbers $W_i​ (i&#x3D;0,⋯,N_P​−1)$ where each $W_i​$ is the weight of the $i$-th mouse respectively. The third line gives the initial playing order which is a permutation of $0,⋯,N_P​−1$ (assume that the programmers are numbered from 0 to $N_P​−1$). All the numbers in a line are separated by a space.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each test case, print the final ranks in a line. The $i$-th number is the rank of the $i$-th programmer, and all the numbers must be separated by a space, with no extra space at the end of the line.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11 3</span><br><span class=\"line\">25 18 0 46 37 3 19 22 57 56 10</span><br><span class=\"line\">6 0 8 7 10 5 9 1 4 2 3</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5 5 2 5 5 5 3 1 3 5</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$奇奇怪怪，莫名其妙。</p>\n<p>$\\qquad$由于对题目的高超解读，导致我手算Sample都算不出Output。</p>\n<p>$\\qquad$对$N_P$只老鼠的体重进行分组比较，每组不超过$N_G$个老鼠。每组最胖的那只肥仔将赢得组内比赛，进入下一轮比赛，每组输掉的老鼠都将获得相同的名次。下一轮比赛还是按照不超过$N_G$个老鼠进行分组比赛，以同样的方式选择出winner进入下一轮直至诞生第一名肥仔。</p>\n<p>$\\qquad$输入就三行，前两行就是$N_P,N_G$和各个老鼠的体重，而第三行题目中说是“initial playing order”，即初始比赛顺序。那么我想0号是第一位选手，而$N_P-1$是最后一位选手，结果发现算出来不对，懵了。其实第二行已经给每个老鼠按照顺序编了号，第三行是根据编号给出参赛顺序，，，可能中午吃太多把脑子塞住了。</p>\n<br>\n\n<p>$\\qquad$由于最后需要按编号输出，因此可以用pair记录每只老鼠的体重和编号，然后根据参赛顺序对老鼠进行排列：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; np; ++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cin &gt;&gt; k;</span><br><span class=\"line\">    order[k] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">sort</span>(weight.<span class=\"built_in\">begin</span>(), weight.<span class=\"built_in\">end</span>(), [](pii &amp;a, pii &amp;b) &#123; <span class=\"keyword\">return</span> order[a.second] &lt; order[b.second]; &#125;);    </span><br></pre></td></tr></table></figure>\n\n<p>$\\qquad$接下来每$N_G$只老鼠选出最胖肥仔作为赢家，并将其的名次赋为$[(w-1)&#x2F;N_G]+2$（其中w为本轮将要选出的赢家数，-1解决了整除时无需+1的问题），也就是说先把进入下一轮比赛老鼠的名次都赋成下一轮输家的名次，那么只要计算下一轮赢家数+1即可。直到选出唯一的赢家结束。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; weight;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; order;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; pii;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> np, ng, k;</span><br><span class=\"line\">    cin &gt;&gt; np &gt;&gt; ng;</span><br><span class=\"line\">    order.<span class=\"built_in\">resize</span>(np);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; np; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; k;</span><br><span class=\"line\">        weight.<span class=\"built_in\">emplace_back</span>(k, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; np; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; k;</span><br><span class=\"line\">        order[k] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(weight.<span class=\"built_in\">begin</span>(), weight.<span class=\"built_in\">end</span>(), [](pii &amp;a, pii &amp;b) &#123; <span class=\"keyword\">return</span> order[a.second] &lt; order[b.second]; &#125;);</span><br><span class=\"line\">    <span class=\"type\">int</span> r = np == <span class=\"number\">1</span> ? <span class=\"number\">1</span> : (np - <span class=\"number\">1</span>) / ng + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">rank</span><span class=\"params\">(np, r)</span></span>;</span><br><span class=\"line\">    vector&lt;pii&gt; next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (weight.<span class=\"built_in\">size</span>() != <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r = r == <span class=\"number\">2</span> ? <span class=\"number\">1</span> : (r - <span class=\"number\">2</span>) / ng + <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; weight.<span class=\"built_in\">size</span>(); i += ng)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> maxw = weight[i].first;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> iter = weight.<span class=\"built_in\">begin</span>() + i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; i + ng &amp;&amp; j &lt; weight.<span class=\"built_in\">size</span>(); ++j)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (weight[j].first &gt; maxw)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    maxw = weight[j].first;</span><br><span class=\"line\">                    iter = weight.<span class=\"built_in\">begin</span>() + j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            rank[iter-&gt;second] = r;</span><br><span class=\"line\">            next.<span class=\"built_in\">push_back</span>(*iter);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        weight = std::<span class=\"built_in\">move</span>(next);</span><br><span class=\"line\">        next = <span class=\"built_in\">vector</span>&lt;pii&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; np; ++i)</span><br><span class=\"line\">        cout &lt;&lt; (i == <span class=\"number\">0</span> ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot; &quot;</span>) &lt;&lt; rank[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"tips\">Tips</span></h2><p>$\\qquad$你可能会对<code>r = r == 2 ? 1 : (r - 2) / ng + 2;</code>感到疑惑，为什么需要对2单独设置一种情况。经过上面的讲解，你会知道后面那个式子计算的就是下一轮输家的名次，那么我们把2代入会发现结果还是2，2似乎是一个不动点，那么为什么无法计算出排名1的结果呢？首先r&#x3D;2是该轮输家的名次，那么下一轮很显然就只有一个人参赛了。我们计算下一轮输家名次的思路很简单，就是计算比赛组数+1，注意到这个名次就是通过排除掉所有赢家才计算出来给输家的。然而一个人的比赛中那个人既是赢家也是输家，所以计算出来的名次2根本不会落到已经被作为赢家而排除的他头上，也就毫无意义。这是一个挺有意思的逻辑悖论。</p>\n","text":"Mice and Rice is the name of a programming contest in which each programmer must write a piece of code to control the movements of a mouse i...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Tips</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1057」Stack","uid":"c3a496a07a213e1385fa77bc05492d6e","slug":"「1057」Stack","date":"2022-09-08T02:14:58.000Z","updated":"2022-09-08T03:10:22.187Z","comments":true,"path":"api/articles/「1057」Stack.json","keywords":null,"cover":null,"text":"Stack is one of the most fundamental data structures, which is based on the principle of Last In First Out (LIFO). The basic operations incl...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"binary search","slug":"binary-search","count":7,"path":"api/tags/binary-search.json"},{"name":"stack","slug":"stack","count":3,"path":"api/tags/stack.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1055」The World's Richest","uid":"a7cca520edea6b39e829c30cbac4d862","slug":"「1055」The-World-s-Richest","date":"2022-09-06T12:17:47.000Z","updated":"2022-10-17T04:10:04.772Z","comments":true,"path":"api/articles/「1055」The-World-s-Richest.json","keywords":null,"cover":null,"text":"Forbes magazine publishes every year its list of billionaires based on the annual ranking of the world’s wealthiest people. Now you are supp...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"sort","slug":"sort","count":24,"path":"api/tags/sort.json"},{"name":"tuple","slug":"tuple","count":9,"path":"api/tags/tuple.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}