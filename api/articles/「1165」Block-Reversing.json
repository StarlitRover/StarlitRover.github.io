{"title":"「1165」Block Reversing","uid":"9e4aa382d8b2ad0e7867e42c221eb9e6","slug":"「1165」Block-Reversing","date":"2022-12-02T06:03:29.000Z","updated":"2022-12-02T06:57:03.251Z","comments":true,"path":"api/articles/「1165」Block-Reversing.json","keywords":null,"cover":null,"content":"<p>Given a singly linked list L. Let us consider every K nodes as a <strong>block</strong> (if there are less than K nodes at the end of the list, the rest of the nodes are still considered as a block). Your job is to reverse all the blocks in L. For example, given L as 1→2→3→4→5→6→7→8 and K as 3, your output must be 7→8→4→5→6→1→2→3.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains the address of the first node, a positive $N (≤10^5)$ which is the total number of nodes, and a positive $K (≤N)$ which is the size of a block. The address of a node is a 5-digit nonnegative integer, and NULL is represented by −1.</p>\n<p>Then N lines follow, each describes a node in the format:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Address Data Next</span><br></pre></td></tr></table></figure>\n\n<p>where <code>Address</code> is the position of the node, <code>Data</code> is an integer, and <code>Next</code> is the position of the next node.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00100 8 3</span><br><span class=\"line\">71120 7 88666</span><br><span class=\"line\">00000 4 99999</span><br><span class=\"line\">00100 1 12309</span><br><span class=\"line\">68237 6 71120</span><br><span class=\"line\">33218 3 00000</span><br><span class=\"line\">99999 5 68237</span><br><span class=\"line\">88666 8 -1</span><br><span class=\"line\">12309 2 33218</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">71120 7 88666</span><br><span class=\"line\">88666 8 00000</span><br><span class=\"line\">00000 4 99999</span><br><span class=\"line\">99999 5 68237</span><br><span class=\"line\">68237 6 00100</span><br><span class=\"line\">00100 1 12309</span><br><span class=\"line\">12309 2 33218</span><br><span class=\"line\">33218 3 -1</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$常规链表放松题。给出头节点与链表地址、值、下一个节点地址。需要将这个链表每$K$个节点分为一块（最后不足$K$个节点也算一块），然后将这些块逆序连接（块内部无需逆序）输出。</p>\n<p>$\\qquad$先将链表中所有节点的地址、值存储到一个vector中，我们只需要确定最后一个块的起始索引，然后每次往后输出$K\\ or\\ list.\\mathrm{size()}\\%K$个节点，最后把起始索引$-K$重复循环即可。</p>\n<p>$\\qquad$那么最后块的起始索引应该是$list.\\mathrm{size()}-list.\\mathrm{size()}\\%K$，注意当$K$可以整除$list.\\mathrm{size()}$时就需要减去$K$，因此我们可以-1平移之后再取余得到最后那块的起始索引为</p>\n<p>$$<br>list.\\mathrm{size()}-[list.\\mathrm{size()}-1]\\%K-1<br>$$</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> h, n, k, a;</span><br><span class=\"line\">    cin &gt;&gt; h &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; node;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; node[a].first &gt;&gt; node[a].second;</span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (h != <span class=\"number\">-1</span>) list.<span class=\"built_in\">emplace_back</span>(h, node[h].first), h = node[h].second;</span><br><span class=\"line\">    <span class=\"type\">bool</span> first = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = list.<span class=\"built_in\">size</span>() - (list.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>) % k - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i -= k)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; <span class=\"built_in\">min</span>(i + k, <span class=\"built_in\">int</span>(list.<span class=\"built_in\">size</span>())); ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!first) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %05d\\n&quot;</span>, list[j].first);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> first = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%05d %d&quot;</span>, list[j].first, list[j].second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; -1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Given a singly linked list L. Let us consider every K nodes as a block (if there are less than K nodes at the end of the list, the rest of t...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"list","slug":"list","count":5,"path":"api/tags/list.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1166』Summit","uid":"198f2c49e9910efe18930d8f84735116","slug":"「1166』Summit","date":"2022-12-02T06:16:17.000Z","updated":"2022-12-02T06:37:24.567Z","comments":true,"path":"api/articles/「1166』Summit.json","keywords":null,"cover":null,"text":"A summit (峰会) is a meeting of heads of state or government. Arranging the rest areas for the summit is not a simple job. The ideal arrangeme...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"},{"name":"bitset","slug":"bitset","count":4,"path":"api/tags/bitset.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1164」Good in C","uid":"e7fe1381af6f1b05a70d02f02d73c22d","slug":"「1164」Good-in-C","date":"2022-12-02T05:51:06.000Z","updated":"2022-12-02T06:57:44.180Z","comments":true,"path":"api/articles/「1164」Good-in-C.json","keywords":null,"cover":[],"text":"When your interviewer asks you to write “Hello World” using C, can you do as the following figure shows? Input Specification:Each input file...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}