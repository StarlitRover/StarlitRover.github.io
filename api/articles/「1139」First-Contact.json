{"title":"「1139」First Contact","uid":"8e874153b53000d75be72bb73b703255","slug":"「1139」First-Contact","date":"2022-11-25T17:09:15.000Z","updated":"2022-11-27T04:00:37.308Z","comments":true,"path":"api/articles/「1139」First-Contact.json","keywords":null,"cover":null,"content":"<p>Unlike in nowadays, the way that boys and girls expressing their feelings of love was quite subtle in the early years. When a boy A had a crush on a girl B, he would usually not contact her directly in the first place. Instead, he might ask another boy C, one of his close friends, to ask another girl D, who was a friend of both B and C, to send a message to B – quite a long shot, isn’t it? Girls would do analogously.</p>\n<p>Here given a network of friendship relations, you are supposed to help a boy or a girl to list all their friends who can possibly help them making the first contact.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line gives two positive integers N (1 &lt; N ≤ 300) and M, being the total number of people and the number of friendship relations, respectively. Then M lines follow, each gives a pair of friends. Here a person is represented by a 4-digit ID. To tell their genders, we use a negative sign to represent girls.</p>\n<p>After the relations, a positive integer K (≤ 100) is given, which is the number of queries. Then K lines of queries follow, each gives a pair of lovers, separated by a space. It is assumed that the first one is having a crush on the second one.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each query, first print in a line the number of different pairs of friends they can find to help them, then in each line print the IDs of a pair of friends.</p>\n<p>If the lovers A and B are of opposite genders, you must first print the friend of A who is of the same gender of A, then the friend of B, who is of the same gender of B. If they are of the same gender, then both friends must be in the same gender as theirs. It is guaranteed that each person has only one gender.</p>\n<p>The friends must be printed in non-decreasing order of the first IDs, and for the same first ones, in increasing order of the seconds ones.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 18</span><br><span class=\"line\">-2001 1001</span><br><span class=\"line\">-2002 -2001</span><br><span class=\"line\">1004 1001</span><br><span class=\"line\">-2004 -2001</span><br><span class=\"line\">-2003 1005</span><br><span class=\"line\">1005 -2001</span><br><span class=\"line\">1001 -2003</span><br><span class=\"line\">1002 1001</span><br><span class=\"line\">1002 -2004</span><br><span class=\"line\">-2004 1001</span><br><span class=\"line\">1003 -2002</span><br><span class=\"line\">-2003 1003</span><br><span class=\"line\">1004 -2002</span><br><span class=\"line\">-2001 -2003</span><br><span class=\"line\">1001 1003</span><br><span class=\"line\">1003 -2001</span><br><span class=\"line\">1002 -2001</span><br><span class=\"line\">-2002 -2003</span><br><span class=\"line\">5</span><br><span class=\"line\">1001 -2001</span><br><span class=\"line\">-2003 1001</span><br><span class=\"line\">1005 -2001</span><br><span class=\"line\">-2002 -2004</span><br><span class=\"line\">1111 -2003</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1002 2004</span><br><span class=\"line\">1003 2002</span><br><span class=\"line\">1003 2003</span><br><span class=\"line\">1004 2002</span><br><span class=\"line\">4</span><br><span class=\"line\">2001 1002</span><br><span class=\"line\">2001 1003</span><br><span class=\"line\">2002 1003</span><br><span class=\"line\">2002 1004</span><br><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2003 2001</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$又是单身狗无法理解的一道题目，我由衷地希望，大家能够直球地面对自己的心上人，真诚才是必杀技，谢谢。</p>\n<p>$\\qquad$累了，简单的外表下，藏着一颗月球的心，不要问我在哪，有坑的地方就有我……. 什么叫做一步一个脚印，就是每当你提交前觉得要ac的时候，结果只多红了一个测试点，甚至毫无变化。</p>\n<p>$\\qquad$A喜欢B，怂的1b，希望通过好基友C找到B的好闺蜜D去试探B（你这种人能脱单才怪哦）⚠️AC，BD必须同性别。想法非常简单，用set存储每个人的同性朋友，然后用一个<code>map&lt;int,bool&gt; r</code> 所有朋友对，$r[10000u+v]$来表示$u,v$之间是否为朋友。那么我们就直接枚举A和B的所有同性朋友$c,d$，然后用r来判断$c,d$是否为朋友。由于set会自动按照编号升序排序，因此按依次遍历得到的结果顺序即为题意要求。</p>\n<p>$\\qquad$思路就是这么简单，接下来是环形坑枚举阶段：</p>\n<ol>\n<li><p>四位编号输入可能存在“0000”和“-0000”，如果是用int读取就无法区分性别，因此需要用字符串读取后判断长度得出性别</p>\n</li>\n<li><p>A和B可能本身就是同性朋友（为这道题的格局点赞），因此枚举A的同性朋友时需要跳过B</p>\n</li>\n<li><p>同样的，枚举B的同性朋友时跳过A（很重要，有时候想到2也不见得会记得3）</p>\n</li>\n<li><p>C和D不能是同一个人，但你只要有判断C和D是否是朋友就不需要关注这点</p>\n</li>\n<li><p>如果是以int存储编号的，最后输出别忘记格式化<code>%04d</code></p>\n</li>\n</ol>\n<p>$\\qquad$这还不是最开心的，最让人激动的是唯一的测试样例没有出现上面的任何一个坑: ) 可谓埋的一手好雷。外加这种题目不好自己构造测试样例，有时只能站在出题人的角度去找洞攻击自己代码。道高一尺，魔高一丈，只是未曾想过路途如此险恶。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, a, b;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, set&lt;<span class=\"type\">int</span>&gt;&gt; f;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">bool</span>&gt; r;</span><br><span class=\"line\">    string sa, sb;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; sa &gt;&gt; sb;</span><br><span class=\"line\">        a = <span class=\"built_in\">stoi</span>(sa), b = <span class=\"built_in\">stoi</span>(sb);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sa.<span class=\"built_in\">size</span>() == sb.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            f[<span class=\"built_in\">abs</span>(a)].<span class=\"built_in\">insert</span>(<span class=\"built_in\">abs</span>(b)), f[<span class=\"built_in\">abs</span>(b)].<span class=\"built_in\">insert</span>(<span class=\"built_in\">abs</span>(a));</span><br><span class=\"line\">        r[<span class=\"built_in\">abs</span>(a) * <span class=\"number\">10000</span> + <span class=\"built_in\">abs</span>(b)] = r[<span class=\"built_in\">abs</span>(b) * <span class=\"number\">10000</span> + <span class=\"built_in\">abs</span>(a)] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        a = <span class=\"built_in\">abs</span>(a), b = <span class=\"built_in\">abs</span>(b);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;u: f[a])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (u == b) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v: f[b])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v == a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r[u * <span class=\"number\">10000</span> + v])</span><br><span class=\"line\">                    ans.<span class=\"built_in\">push_back</span>(u * <span class=\"number\">10000</span> + v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%zu\\n&quot;</span>, ans.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t: ans)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%04d %04d\\n&quot;</span>, t / <span class=\"number\">10000</span>, t % <span class=\"number\">10000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"Unlike in nowadays, the way that boys and girls expressing their feelings of love was quite subtle in the early years. When a boy A had a cr...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1140」Look-and-say Sequence","uid":"7df29c755cdde6fc07511e582be256da","slug":"「1140」Look-and-say-Sequence","date":"2022-11-26T05:03:10.000Z","updated":"2022-11-26T07:23:43.651Z","comments":true,"path":"api/articles/「1140」Look-and-say-Sequence.json","keywords":null,"cover":null,"text":"Look-and-say sequence is a sequence of integers as the following: 1D, D1, D111, D113, D11231, D112213111, ... where D is in [0, 9] except 1....","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"string","slug":"string","count":18,"path":"api/tags/string.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1138」Postorder Traversal","uid":"568e7e4ef7b87e91d83cab23742c4094","slug":"「1138」Postorder-Traversal","date":"2022-11-25T14:28:08.000Z","updated":"2022-11-25T14:35:40.949Z","comments":true,"path":"api/articles/「1138」Postorder-Traversal.json","keywords":null,"cover":null,"text":"Suppose that all the keys in a binary tree are distinct positive integers. Given the preorder and inorder traversal sequences, you are suppo...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}