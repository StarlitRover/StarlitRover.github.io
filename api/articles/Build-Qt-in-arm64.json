{"title":"Build Qt in arm64","uid":"fbbac3b5688cf257c824005fed6d10e6","slug":"Build-Qt-in-arm64","date":"2022-03-19T02:32:08.000Z","updated":"2022-09-26T17:02:27.000Z","comments":true,"path":"api/articles/Build-Qt-in-arm64.json","keywords":null,"cover":[],"content":"<h2><span id=\"︎-引言\">♿︎ 引言</span></h2><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>自从电脑换成Mac后就需要面对芯片架构不同带来的众多问题，市场上还是有很多软件只适配x86而不支持arm。当然这段时间我体验下来，arm架构采用的是精简指令集，在续航方面全面吊打x86，一般来说不插电工作一天绰绰有余。当然缺点也很明显，就是软件市场依然不是很友好，比如说VS（坦白地说，VS for mac就是微软做出来嘲笑苹果的）。虽然很多软件表示已经在开发arm版，但还是需要一定时间的。这也是本文存在的原因。</p>\n<span id=\"more\"></span>\n\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>导师那边有个框架之前我都是在老电脑的VS上用的（之前也只有VS版），然而最近发布的新版本使用了<strong>CMake</strong>。众所周知，<strong>CMake</strong>是一款跨平台编译工具，像<strong>CLion</strong>就是使用<strong>CMake</strong>进行编译的。Mac人狂喜，然而被学长告知框架所需的Qt目前只支持x86，arm版的需要自己编译。可以自己编译的关键一点是，Qt是开源的，我们可以获得其源码。那么简单地来说，虽然直接下载下来的Qt是x86版的，但只要将其源码在自己电脑编译一遍，生成的就是适配自己电脑的版本啦。</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"0.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 0 2000 16\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mspace\"/></g></g></g></svg></mjx-container>这就不得不提到<code>makefile</code>文件。该文件是Linux下的一个工程管理文件，类似CMake文件，指出了如何编译软件的规则，有着自己专门的语法。但我目前也不是很了解，只是刚刚入门，以后有机会的话再讲吧。</p>\n<hr>\n<h3><span id=\"版本信息\">版本信息</span></h3><ul>\n<li><strong>Qt 5.15.2</strong></li>\n<li><strong>CLion 2021.3.4</strong></li>\n<li><strong>MacOS Monterey 12.3</strong></li>\n</ul>\n<hr>\n<h2><span id=\"build\">⩙ BUILD</span></h2><ol>\n<li><p>打开terminal，使用homebrew（默认已有）安装依赖项</p>\n<pre class=\"line-numbers language-zsh\" data-language=\"zsh\"><code class=\"language-zsh\">brew install pcre2 harfbuzz freetype\n#下面这一项可能不需要，保险起见就安上\nbrew install cmake ninja python<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>下载<strong>Qt 5.15.2</strong>的源码，通道<a href=\"https://download.qt.io/archive/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\">在此</a></p>\n</li>\n<li><p>假设下载的压缩包<strong>qt-everywhere-src-5.15.2.tar.xz</strong>所在文件夹的绝对路径为<code>path</code>，在terminal内</p>\n<pre class=\"line-numbers language-zsh\" data-language=\"zsh\"><code class=\"language-zsh\">cd path\n#解压压缩包\nx qt-everywhere-src-5.15.2.tar.xz\n#创建文件夹buildir\nmkdir buildir\ncd buildir\n#设置arm64版编译并生成makefile\n../qt-everywhere-src-5.15.2/configure -release -prefix ./outDir -nomake examples -nomake tests QMAKE_APPLE_DEVICE_ARCHS=arm64 -opensource -confirm-license -skip qt3d -skip qtwebengine\n#接下来会生成很多命令，不用管<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>在<code>make</code>命令之前我们需要消除两个问题（当然直接打开文件改也行，下面是在terminal中用vim修改）</p>\n<ul>\n<li><p>首先打开第一个更改文件，path是上面那个绝对路径</p>\n<pre class=\"line-numbers language-zsh\" data-language=\"zsh\"><code class=\"language-zsh\">vim path/qt-everywhere-src-5.15.2/qtbase/src/plugins/platforms/cocoa/qiosurfacegraphicsbuffer.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>找到下面的语句块</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;qpa/qplatformgraphicsbuffer.h&gt;\n#include &lt;private/qcore_mac_p.h&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>进入vim的插入模式，在该语句块前加上</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;CoreGraphics/CGColorSpace.h&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最后应该是这样子的</p>\n<img src=\"/images/血泪史/1/1.png\" style=\"zoom:60%;\">\n\n<p>改完后保存退出：esc+输入<code>:wq</code></p>\n</li>\n<li><p>打开第二个更改文件</p>\n<pre class=\"line-numbers language-zsh\" data-language=\"zsh\"><code class=\"language-zsh\">vim path/qt-everywhere-src-5.15.2/qtlocation/include/QtLocation/5.15.2/QtLocation/private/../../../../../src/location/declarativemaps/qdeclarativepolylinemapitem_p_p.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输入<code>:set number</code>后显示行号，然后将523行处的<code>typedef struct {</code>改为<code>typedef struct MapPolylineEntry {</code>，改完后保存退出</p>\n</li>\n</ul>\n</li>\n<li><p>接下来开启所有进程进行编译</p>\n<pre class=\"line-numbers language-zsh\" data-language=\"zsh\"><code class=\"language-zsh\">#在buildir目录下\nmake -j$(nproc)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>上步完成后开始安装</p>\n<pre class=\"line-numbers language-zsh\" data-language=\"zsh\"><code class=\"language-zsh\">make install -j$(nproc)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>安装完成后可以把和buildir同层目录内的<strong>qt-everywhere-src-5.15.2.tar.xz</strong>与<strong>qt-everywhere-src-5.15.2</strong>给删了</p>\n</li>\n<li><p>此时arm64版Qt算是安装完成（buildir），接下来（可以忽略）是在CLion上的iGameMeshView工程中使用Qt</p>\n</li>\n<li><p>修改iGameMeshView的cmake文件</p>\n<pre class=\"line-numbers language-CMake\" data-language=\"CMake\"><code class=\"language-CMake\"># MacOS\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"AppleClang\")\n    message(STATUS \"编译器是AppleClang\")\n    #设置QT的目录\n    set(Qt5Core_DIR path/buildir/outDir/lib/cmake/Qt5Core)\n    set(Qt5Gui_DIR path/buildir/outDir/lib/cmake/Qt5Gui)\n    set(Qt5OpenGL_DIR path/buildir/outDir/lib/cmake/Qt5OpenGL)\n    set(Qt5Widgets_DIR path/buildir/outDir/lib/cmake/Qt5Widgets)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>完成</p>\n</li>\n</ol>\n<hr>\n<h3><span id=\"reference\">「Reference」</span></h3><ul>\n<li><p>Qt5适配M1：<a href=\"https://www.cnblogs.com/wqcwood/p/15138983.html\">https://www.cnblogs.com/wqcwood/p/15138983.html</a></p>\n</li>\n<li><p>[Qt] Fix missing Cocoa include：<a href=\"https://github.com/microsoft/vcpkg/pull/21056/commits/99582d154236b0e7af70cadef8420c4f25829f61\">https://github.com/microsoft/vcpkg/pull/21056/commits/99582d154236b0e7af70cadef8420c4f25829f61</a></p>\n</li>\n</ul>\n<hr>\n<br>\n\n<center>❃ 特别鸣谢CJgg两节课的耐心讲解 /doge</center>","text":"♿︎ 引言自从电脑换成Mac后就需要面对芯片架构不同带来的众多问题，市场上还是有很多软件只适配x86而不支持arm。当然这段时间我体验下来，arm架构采用的是精简指令集，在续航方面全面吊打x86，一般来说不插电工作一天绰绰有余。当然缺点也很明显，就是软件市场依然不是很友好，比如说V...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"血泪史","slug":"血泪史","count":2,"path":"api/categories/血泪史.json"}],"tags":[{"name":"arm64","slug":"arm64","count":1,"path":"api/tags/arm64.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">♿︎ 引言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">版本信息</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">⩙ BUILD</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">「Reference」</span></a></li></ol></li></ol>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"借助Flex实现SysY词法分析","uid":"bba1ccc43c803be00dfdf449eaee8924","slug":"借助flex实现SysY词法分析","date":"2022-03-22T10:49:25.000Z","updated":"2022-06-10T11:59:42.000Z","comments":true,"path":"api/articles/借助flex实现SysY词法分析.json","keywords":null,"cover":[],"text":"词法分析（lexical analysis）是编译器的第一阶段，主要是将代码的字符序列转换为token的过程。简单地来说，就是对代码进行切块的一个过程，并将每一块添加上其所属的类别标签。比如说int asd=897;，其词法分析的结果即为 int ：&lt; TYPE , ‘in...","link":"","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"编译原理","slug":"编译原理","count":7,"path":"api/categories/编译原理.json"}],"tags":[{"name":"走码观花","slug":"走码观花","count":15,"path":"api/tags/走码观花.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「Section 6」指令系统","uid":"03afcc3b07031cb1f7cc8d70de23254b","slug":"指令系统","date":"2022-03-16T01:57:48.000Z","updated":"2022-03-17T08:56:15.000Z","comments":true,"path":"api/articles/指令系统.json","keywords":null,"cover":[],"text":"α. 指令系统概述 β. 指令格式 γ. 操作数类型 α 指令系统概述 现代冯·诺伊曼计算机结构框图是以存储器为中心，计算机的工作过程就是循环往复地取指令、分析指令、执行指令的过程。 一些概念 计算机指令：指示计算机硬件进行某种操作的命令。 机器指令（机器字）：使用二进制来表示计...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"计算机组成原理","slug":"计算机组成原理","count":8,"path":"api/categories/计算机组成原理.json"}],"tags":[{"name":"notes","slug":"notes","count":14,"path":"api/tags/notes.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"数着头发过日子","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}