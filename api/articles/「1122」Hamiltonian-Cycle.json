{"title":"「1122」Hamiltonian Cycle","uid":"033ed2c7a1bcdb67e313290ff8557d56","slug":"「1122」Hamiltonian-Cycle","date":"2022-11-22T07:14:15.000Z","updated":"2022-11-22T07:29:47.317Z","comments":true,"path":"api/articles/「1122」Hamiltonian-Cycle.json","keywords":null,"cover":null,"content":"<p>The “Hamilton cycle problem” is to find a simple cycle that contains every vertex in a graph. Such a cycle is called a “Hamiltonian cycle”.</p>\n<p>In this problem, you are supposed to tell if a given cycle is a Hamiltonian cycle.</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"input-specification\">Input Specification:</span></h3><p>Each input file contains one test case. For each case, the first line contains 2 positive integers $N (2&lt;N≤200)$, the number of vertices, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format <code>Vertex1 Vertex2</code>, where the vertices are numbered from 1 to N. The next line gives a positive integer K which is the number of queries, followed by K lines of queries, each in the format:</p>\n<p>$n\\ V_1​\\ V_2\\ \\cdots\\ V_n​$</p>\n<p>where n is the number of vertices in the list, and $V_i$​’s are the vertices on a path.</p>\n<h3><span id=\"output-specification\">Output Specification:</span></h3><p>For each query, print in a line <code>YES</code> if the path does form a Hamiltonian cycle, or <code>NO</code> if not.</p>\n<h3><span id=\"sample-input\">Sample Input:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 10</span><br><span class=\"line\">6 2</span><br><span class=\"line\">3 4</span><br><span class=\"line\">1 5</span><br><span class=\"line\">2 5</span><br><span class=\"line\">3 1</span><br><span class=\"line\">4 1</span><br><span class=\"line\">1 6</span><br><span class=\"line\">6 3</span><br><span class=\"line\">1 2</span><br><span class=\"line\">4 5</span><br><span class=\"line\">6</span><br><span class=\"line\">7 5 1 4 3 6 2 5</span><br><span class=\"line\">6 5 1 4 3 6 2</span><br><span class=\"line\">9 6 2 1 6 3 4 5 2 6</span><br><span class=\"line\">4 1 2 5 1</span><br><span class=\"line\">7 6 1 3 4 5 2 6</span><br><span class=\"line\">7 6 1 2 5 4 3 1</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sample-output\">Sample Output:</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES</span><br><span class=\"line\">NO</span><br><span class=\"line\">NO</span><br><span class=\"line\">NO</span><br><span class=\"line\">YES</span><br><span class=\"line\">NO</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"ω\">Ω</span></h2><p>$\\qquad$给出一个无向图，再给出几个顶点序列，判断是否构成哈密尔顿回路。</p>\n<p>$\\qquad$哈密尔顿回路指，每个顶点都出现且仅出现一次，那么这个顶点序列需要满足：</p>\n<ol>\n<li><p>起点和终点相同</p>\n</li>\n<li><p>除了终点，其他节点必须互不相同</p>\n</li>\n<li><p>顶点总数应为N+1（结合2⇒每个顶点出现且仅出现一次）</p>\n</li>\n<li><p>任意相邻节点之间必须存在边</p>\n</li>\n</ol>\n<p>$\\qquad$根据以上判据设置一个bool向量，如果有重复出现的顶点就将flag置false，如果尚未出现就将其标记为true，同时++cnt。最后根据 flag&amp;&amp;起点&#x3D;&#x3D;终点&amp;&amp;cnt&#x3D;&#x3D;n 来断定是否为哈密尔顿回路。</p>\n<hr>\n<h2><span id>🐎</span></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, k, s, a, b;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">bool</span>&gt;&gt; <span class=\"built_in\">edge</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;(n + <span class=\"number\">1</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        edge[a][b] = edge[b][a] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>, pre;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">show</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; s, pre = s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; a; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (show[k] || !edge[pre][k]) flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> show[k] = <span class=\"literal\">true</span>, ++cnt;</span><br><span class=\"line\">            pre = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag &amp;&amp; s == k &amp;&amp; cnt == n) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;YES\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NO\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"The “Hamilton cycle problem” is to find a simple cycle that contains every vertex in a graph. Such a cycle is called a “Hamiltonian cycle”. ...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"Graph","slug":"Graph","count":16,"path":"api/tags/Graph.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Input Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Output Specification:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Input:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Sample Output:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Ω</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">🐎</span></a>","author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}},"mapped":true,"prev_post":{"title":"「1123」Is It a Complete AVL Tree","uid":"84f574e4cfc0fc23647f1cff6dfd2d15","slug":"「1123」Is-It-a-Complete-AVL-Tree","date":"2022-11-22T15:46:11.000Z","updated":"2022-11-22T16:07:22.231Z","comments":true,"path":"api/articles/「1123」Is-It-a-Complete-AVL-Tree.json","keywords":null,"cover":[],"text":"An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one;...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"},{"name":"BFS","slug":"BFS","count":10,"path":"api/tags/BFS.json"},{"name":"Tree","slug":"Tree","count":23,"path":"api/tags/Tree.json"},{"name":"AVL","slug":"AVL","count":2,"path":"api/tags/AVL.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}},"next_post":{"title":"「1121」Damn Single","uid":"682e37dc1f7927fd1308b08627948fb9","slug":"「1121」Damn-Single","date":"2022-11-22T05:57:31.000Z","updated":"2022-11-22T06:19:49.620Z","comments":true,"path":"api/articles/「1121」Damn-Single.json","keywords":null,"cover":null,"text":"“Damn Single (单身狗)” is the Chinese nickname for someone who is being single. You are supposed to find those who are alone in a big party, so...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"PAT（Advanced Level）Practice","slug":"PAT（Advanced-Level）Practice","count":153,"path":"api/categories/PAT（Advanced-Level）Practice.json"}],"tags":[{"name":"C＋＋","slug":"C＋＋","count":160,"path":"api/tags/C＋＋.json"}],"author":{"name":"Starlit Rover","slug":"blog-author","avatar":"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQWu4nWh5NV26rlAS5lR23iaundn5IVlV3EpYGNAdtnMObooQnk","link":"/","description":"Stroll in the starlit firmament~","socials":{"github":"https://github.com/StarlitRover","twitter":"https://twitter.com/Starlit_Rover","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"steam":{"icon":"/images/aurora/steam.svg","link":"https://steamcommunity.com/id/starlitrover/"}}}}}}